ARM GAS  /tmp/cckl8RH2.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "main.c"
  19              		.section	.text.main,"ax",%progbits
  20              		.align	1
  21              		.global	main
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	main:
  27              	.LFB333:
   1:main.c        **** /*
   2:main.c        **** 
   3:main.c        **** 	Warning: This hot-fire version only supports usb but not RS485. 
   4:main.c        **** 			Only built for sequencing testing. Not suitable for actual hot-fire
   5:main.c        **** 
   6:main.c        **** */
   7:main.c        **** 
   8:main.c        **** 
   9:main.c        **** /*******************************************************************************
  10:main.c        **** *
  11:main.c        **** * FILE: 
  12:main.c        **** * 		main.c
  13:main.c        **** *
  14:main.c        **** * DESCRIPTION: 
  15:main.c        **** * 		Initiates engine ignition, monitors sequencing, and logs engine data 
  16:main.c        **** *       during the hotfire	
  17:main.c        **** *
  18:main.c        **** *******************************************************************************/
  19:main.c        **** 
  20:main.c        **** 
  21:main.c        **** /*------------------------------------------------------------------------------
  22:main.c        ****  Standard Includes                                                              
  23:main.c        **** ------------------------------------------------------------------------------*/
  24:main.c        **** #include <stdbool.h>
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** /*------------------------------------------------------------------------------
  28:main.c        ****  Project Includes                                                              
  29:main.c        **** ------------------------------------------------------------------------------*/
  30:main.c        **** 
  31:main.c        **** /* Application Layer */
ARM GAS  /tmp/cckl8RH2.s 			page 2


  32:main.c        **** #include "main.h"
  33:main.c        **** #include "init.h"
  34:main.c        **** #include "sdr_pin_defines_L0002.h"
  35:main.c        **** #include "sdr_error.h"
  36:main.c        **** #include "valve_control.h"
  37:main.c        **** #include "terminal.h"
  38:main.c        **** 
  39:main.c        **** /* Low-level modules */
  40:main.c        **** #include "commands.h"
  41:main.c        **** #include "ignition.h"
  42:main.c        **** #include "flash.h"
  43:main.c        **** #include "led.h"
  44:main.c        **** #include "power.h"
  45:main.c        **** #include "pressure.h"
  46:main.c        **** #include "sensor.h"
  47:main.c        **** #include "temp.h"
  48:main.c        **** #include "usb.h"
  49:main.c        **** #include "valve.h"
  50:main.c        **** #include "wireless.h"
  51:main.c        **** 
  52:main.c        **** 
  53:main.c        **** /*------------------------------------------------------------------------------
  54:main.c        ****  MCU Peripheral Handles 
  55:main.c        **** ------------------------------------------------------------------------------*/
  56:main.c        **** ADC_HandleTypeDef  hadc1;  /* Pressure transducer ADC handle */
  57:main.c        **** ADC_HandleTypeDef  hadc2;  /* Load cell ADC handle           */
  58:main.c        **** ADC_HandleTypeDef  hadc3;  /* Pressure transducer 5 ADC handle */
  59:main.c        **** I2C_HandleTypeDef  hi2c1;  /* Thermocouple I2C handle        */
  60:main.c        **** SPI_HandleTypeDef  hspi2;  /* Flash SPI handle               */
  61:main.c        **** UART_HandleTypeDef huart1; /* USB UART handler struct        */
  62:main.c        **** UART_HandleTypeDef huart2; /* Valve controller UART handle   */
  63:main.c        **** UART_HandleTypeDef huart4; /* Wireless interface UART handle */
  64:main.c        **** 
  65:main.c        **** 
  66:main.c        **** /*------------------------------------------------------------------------------
  67:main.c        ****  Global Variables  
  68:main.c        **** ------------------------------------------------------------------------------*/
  69:main.c        **** FSM_STATE fsm_state           = FSM_INIT_STATE; /* Finite State Machine state */
  70:main.c        **** volatile uint8_t   gs_command          = 0;              /* Ground Station commands    */
  71:main.c        **** volatile bool stop_hotfire_flag   = false;      /* Manual hotfire termination */
  72:main.c        **** volatile bool stop_purge_flag     = false;      /* Manual purge termination   */
  73:main.c        **** volatile bool lox_purge_flag      = false;      /* LOX tank purge             */
  74:main.c        **** volatile bool kbottle_closed_flag = false;      /* KBottle is closed          */
  75:main.c        **** volatile bool tanks_safe_flag     = false;      /* Tanks are safe             */
  76:main.c        **** volatile bool telreq_wait_flag    = false;      /* Controller busy            */
  77:main.c        **** 
  78:main.c        **** /* Sensor data */
  79:main.c        **** SENSOR_DATA_PING_PONG sensor_ping_pong_buffer = {0};
  80:main.c        **** 
  81:main.c        **** 
  82:main.c        **** /*------------------------------------------------------------------------------
  83:main.c        ****  Application entry point                                                      
  84:main.c        **** ------------------------------------------------------------------------------*/
  85:main.c        **** int main
  86:main.c        **** 	(
  87:main.c        ****  	void
  88:main.c        **** 	)
ARM GAS  /tmp/cckl8RH2.s 			page 3


  89:main.c        **** {
  28              		.loc 1 89 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 8BB0     		sub	sp, sp, #44
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
  90:main.c        **** /*------------------------------------------------------------------------------
  91:main.c        ****  Local Variables                                                                  
  92:main.c        **** ------------------------------------------------------------------------------*/
  93:main.c        **** 
  94:main.c        **** /* Flash */
  95:main.c        **** HFLASH_BUFFER flash_handle;                    /* Flash API buffer handle     */
  39              		.loc 1 95 1 view .LVU1
  96:main.c        **** uint8_t       flash_buffer[ DEF_BUFFER_SIZE ]; /* Flash data buffer */
  40              		.loc 1 96 1 view .LVU2
  97:main.c        **** 
  98:main.c        **** /* Thermocouple */
  99:main.c        **** THERMO_CONFIG   thermo_config;    /* Thermocouple configuration settings        */
  41              		.loc 1 99 1 view .LVU3
 100:main.c        **** 
 101:main.c        **** /* Terminal */
 102:main.c        **** uint8_t         terminal_cmd;     /* Terminal command */
  42              		.loc 1 102 1 view .LVU4
 103:main.c        **** 
 104:main.c        **** /* Module return codes */
 105:main.c        **** FLASH_STATUS    flash_status;     /* Status of flash operations                 */
  43              		.loc 1 105 1 view .LVU5
 106:main.c        **** THERMO_STATUS   thermo_status;    /* Thermocouple status code                   */
  44              		.loc 1 106 1 view .LVU6
 107:main.c        **** TERMINAL_STATUS terminal_status;  /* Return codes from SDEC terminal            */
  45              		.loc 1 107 1 view .LVU7
 108:main.c        **** USB_STATUS      usb_status;       /* Return codes from usb module               */
  46              		.loc 1 108 1 view .LVU8
 109:main.c        **** 
 110:main.c        **** 
 111:main.c        **** /*------------------------------------------------------------------------------
 112:main.c        ****  MCU Initialization                                                                  
 113:main.c        **** ------------------------------------------------------------------------------*/
 114:main.c        **** HAL_Init                (); /* Reset peripherals, initialize flash interface 
  47              		.loc 1 114 1 view .LVU9
  48 0004 FFF7FEFF 		bl	HAL_Init
  49              	.LVL0:
 115:main.c        ****                                and Systick.                                   */
 116:main.c        **** SystemClock_Config      (); /* System clock                                   */
  50              		.loc 1 116 1 view .LVU10
  51 0008 FFF7FEFF 		bl	SystemClock_Config
  52              	.LVL1:
 117:main.c        **** PeriphCommonClock_Config(); /* Shared peripheral clocks                       */
  53              		.loc 1 117 1 view .LVU11
  54 000c FFF7FEFF 		bl	PeriphCommonClock_Config
  55              	.LVL2:
ARM GAS  /tmp/cckl8RH2.s 			page 4


 118:main.c        **** GPIO_Init               (); /* GPIO                                           */
  56              		.loc 1 118 1 view .LVU12
  57 0010 FFF7FEFF 		bl	GPIO_Init
  58              	.LVL3:
 119:main.c        **** 
 120:main.c        **** 
 121:main.c        **** led_set_color( LED_CYAN ); /* Indicate MCU is powered on */
  59              		.loc 1 121 1 view .LVU13
  60 0014 0420     		movs	r0, #4
  61 0016 FFF7FEFF 		bl	led_set_color
  62              	.LVL4:
 122:main.c        **** HAL_Delay( 1500 );         /* Wait for peripherals to power on */
  63              		.loc 1 122 1 view .LVU14
  64 001a 40F2DC50 		movw	r0, #1500
  65 001e FFF7FEFF 		bl	HAL_Delay
  66              	.LVL5:
 123:main.c        **** 
 124:main.c        **** 
 125:main.c        **** USB_UART_Init           (); /* USB UART                                       */
  67              		.loc 1 125 1 view .LVU15
  68 0022 FFF7FEFF 		bl	USB_UART_Init
  69              	.LVL6:
 126:main.c        **** Valve_UART_Init         (); /* Valve control UART                             */
  70              		.loc 1 126 1 view .LVU16
  71 0026 FFF7FEFF 		bl	Valve_UART_Init
  72              	.LVL7:
 127:main.c        **** Wireless_UART_Init      (); /* Wireless interface UART                        */
  73              		.loc 1 127 1 view .LVU17
  74 002a FFF7FEFF 		bl	Wireless_UART_Init
  75              	.LVL8:
 128:main.c        **** FLASH_SPI_Init          (); /* Flash SPI Bus                                  */
  76              		.loc 1 128 1 view .LVU18
  77 002e FFF7FEFF 		bl	FLASH_SPI_Init
  78              	.LVL9:
 129:main.c        **** PRESSURE_ADC_Init       (); /* Pressure transducers ADC                       */
  79              		.loc 1 129 1 view .LVU19
  80 0032 FFF7FEFF 		bl	PRESSURE_ADC_Init
  81              	.LVL10:
 130:main.c        **** PRESSURE5_ADC_Init      (); /* Pressure transducers ADC                       */
  82              		.loc 1 130 1 view .LVU20
  83 0036 FFF7FEFF 		bl	PRESSURE5_ADC_Init
  84              	.LVL11:
 131:main.c        **** LOADCELL_ADC_Init       (); /* Load Cell ADC                                  */
  85              		.loc 1 131 1 view .LVU21
  86 003a FFF7FEFF 		bl	LOADCELL_ADC_Init
  87              	.LVL12:
 132:main.c        **** Thermocouple_I2C_Init   (); /* Thermocouple I2C                               */
  88              		.loc 1 132 1 view .LVU22
  89 003e FFF7FEFF 		bl	Thermocouple_I2C_Init
  90              	.LVL13:
 133:main.c        **** 
 134:main.c        **** 
 135:main.c        **** /*------------------------------------------------------------------------------
 136:main.c        ****  Variable Initializations 
 137:main.c        **** ------------------------------------------------------------------------------*/
 138:main.c        **** 
 139:main.c        **** /* Flash Buffer */
ARM GAS  /tmp/cckl8RH2.s 			page 5


 140:main.c        **** flash_handle.write_protected       = FLASH_WP_WRITE_ENABLED;
  91              		.loc 1 140 1 view .LVU23
  92              		.loc 1 140 36 is_stmt 0 view .LVU24
  93 0042 0023     		movs	r3, #0
  94 0044 8DF82430 		strb	r3, [sp, #36]
 141:main.c        **** flash_handle.num_bytes             = 0;
  95              		.loc 1 141 1 is_stmt 1 view .LVU25
  96              		.loc 1 141 36 is_stmt 0 view .LVU26
  97 0048 0693     		str	r3, [sp, #24]
 142:main.c        **** flash_handle.address               = 0;
  98              		.loc 1 142 1 is_stmt 1 view .LVU27
  99              		.loc 1 142 36 is_stmt 0 view .LVU28
 100 004a 0793     		str	r3, [sp, #28]
 143:main.c        **** flash_handle.pbuffer               = &flash_buffer[0];
 101              		.loc 1 143 1 is_stmt 1 view .LVU29
 102              		.loc 1 143 36 is_stmt 0 view .LVU30
 103 004c 02AA     		add	r2, sp, #8
 104 004e 0892     		str	r2, [sp, #32]
 144:main.c        **** flash_handle.status_register       = 0xFF;
 105              		.loc 1 144 1 is_stmt 1 view .LVU31
 106              		.loc 1 144 36 is_stmt 0 view .LVU32
 107 0050 FF22     		movs	r2, #255
 108 0052 8DF82720 		strb	r2, [sp, #39]
 145:main.c        **** flash_handle.bpl_bits              = FLASH_BPL_NONE;
 109              		.loc 1 145 1 is_stmt 1 view .LVU33
 110              		.loc 1 145 36 is_stmt 0 view .LVU34
 111 0056 C322     		movs	r2, #195
 112 0058 8DF82520 		strb	r2, [sp, #37]
 146:main.c        **** flash_handle.bpl_write_protect     = FLASH_BPL_READ_WRITE;
 113              		.loc 1 146 1 is_stmt 1 view .LVU35
 114              		.loc 1 146 36 is_stmt 0 view .LVU36
 115 005c 8DF82630 		strb	r3, [sp, #38]
 147:main.c        **** 
 148:main.c        **** /* Thermocouple configuration */
 149:main.c        **** thermo_config.type                 = THERMO_TYPE_K;
 116              		.loc 1 149 1 is_stmt 1 view .LVU37
 117              		.loc 1 149 36 is_stmt 0 view .LVU38
 118 0060 8DF80030 		strb	r3, [sp]
 150:main.c        **** thermo_config.filter_coeff         = THERMO_FILTER_OFF; 
 119              		.loc 1 150 1 is_stmt 1 view .LVU39
 120              		.loc 1 150 36 is_stmt 0 view .LVU40
 121 0064 8DF80130 		strb	r3, [sp, #1]
 151:main.c        **** thermo_config.adc_resolution       = THERMO_18BIT_ADC;
 122              		.loc 1 151 1 is_stmt 1 view .LVU41
 123              		.loc 1 151 36 is_stmt 0 view .LVU42
 124 0068 8DF80230 		strb	r3, [sp, #2]
 152:main.c        **** thermo_config.cold_junc_resolution = THERMO_COLD_JUNC_MIN_RES;
 125              		.loc 1 152 1 is_stmt 1 view .LVU43
 126              		.loc 1 152 36 is_stmt 0 view .LVU44
 127 006c 8DF80330 		strb	r3, [sp, #3]
 153:main.c        **** thermo_config.burst_mode           = THERMO_BURST_MODE_1;
 128              		.loc 1 153 1 is_stmt 1 view .LVU45
 129              		.loc 1 153 36 is_stmt 0 view .LVU46
 130 0070 8DF80430 		strb	r3, [sp, #4]
 154:main.c        **** thermo_config.shutdown_mode        = THERMO_NORMAL_MODE;
 131              		.loc 1 154 1 is_stmt 1 view .LVU47
 132              		.loc 1 154 36 is_stmt 0 view .LVU48
ARM GAS  /tmp/cckl8RH2.s 			page 6


 133 0074 8DF80530 		strb	r3, [sp, #5]
 155:main.c        **** thermo_config.status               = 0;
 134              		.loc 1 155 1 is_stmt 1 view .LVU49
 135              		.loc 1 155 36 is_stmt 0 view .LVU50
 136 0078 8DF80630 		strb	r3, [sp, #6]
 156:main.c        **** 
 157:main.c        **** /* SDEC terminal */
 158:main.c        **** terminal_cmd                       = 0;
 137              		.loc 1 158 1 is_stmt 1 view .LVU51
 138              	.LVL14:
 159:main.c        **** 
 160:main.c        **** /* Module return codes */
 161:main.c        **** flash_status                       = FLASH_OK;
 139              		.loc 1 161 1 view .LVU52
 162:main.c        **** thermo_status                      = THERMO_OK;
 140              		.loc 1 162 1 view .LVU53
 163:main.c        **** terminal_status                    = TERMINAL_OK;
 141              		.loc 1 163 1 view .LVU54
 164:main.c        **** 
 165:main.c        **** 
 166:main.c        **** /*------------------------------------------------------------------------------
 167:main.c        ****  External Hardware Initializations 
 168:main.c        **** ------------------------------------------------------------------------------*/
 169:main.c        **** 
 170:main.c        **** 
 171:main.c        **** 
 172:main.c        **** /* Flash Chip */
 173:main.c        **** flash_status = flash_init( &flash_handle );
 142              		.loc 1 173 1 view .LVU55
 143              		.loc 1 173 16 is_stmt 0 view .LVU56
 144 007c 06A8     		add	r0, sp, #24
 145 007e FFF7FEFF 		bl	flash_init
 146              	.LVL15:
 174:main.c        **** if ( flash_status != FLASH_OK )
 147              		.loc 1 174 1 is_stmt 1 view .LVU57
 148              		.loc 1 174 4 is_stmt 0 view .LVU58
 149 0082 18BB     		cbnz	r0, .L23
 150              	.LVL16:
 151              	.L2:
 175:main.c        **** 	{
 176:main.c        **** 	Error_Handler( ERROR_FLASH_INIT_ERROR );
 177:main.c        **** 	}
 178:main.c        **** 
 179:main.c        **** /* Sensor module */
 180:main.c        **** sensor_init();
 152              		.loc 1 180 1 is_stmt 1 view .LVU59
 153 0084 FFF7FEFF 		bl	sensor_init
 154              	.LVL17:
 181:main.c        **** 
 182:main.c        **** /* Thermocouple */
 183:main.c        **** thermo_status = temp_init( &thermo_config );
 155              		.loc 1 183 1 view .LVU60
 156              		.loc 1 183 17 is_stmt 0 view .LVU61
 157 0088 6846     		mov	r0, sp
 158 008a FFF7FEFF 		bl	temp_init
 159              	.LVL18:
 184:main.c        **** if ( thermo_status != THERMO_OK )
ARM GAS  /tmp/cckl8RH2.s 			page 7


 160              		.loc 1 184 1 is_stmt 1 view .LVU62
 161              		.loc 1 184 4 is_stmt 0 view .LVU63
 162 008e 08BB     		cbnz	r0, .L24
 163              	.LVL19:
 164              	.L3:
 185:main.c        **** 	{
 186:main.c        **** 	Error_Handler( ERROR_THERMO_INIT_ERROR );
 187:main.c        **** 	}
 188:main.c        **** 
 189:main.c        **** /* Indicate Successful MCU and Peripheral Hardware Setup */
 190:main.c        **** led_set_color( LED_GREEN );
 165              		.loc 1 190 1 is_stmt 1 view .LVU64
 166 0090 0120     		movs	r0, #1
 167 0092 FFF7FEFF 		bl	led_set_color
 168              	.LVL20:
 191:main.c        **** 
 192:main.c        **** 
 193:main.c        **** // /*------------------------------------------------------------------------------
 194:main.c        **** //  USB Data Acquisition Mode 
 195:main.c        **** // ------------------------------------------------------------------------------*/
 196:main.c        **** // while ( usb_detect() )
 197:main.c        **** // 	{
 198:main.c        **** // 	/* Get sdec command from USB port */
 199:main.c        **** // 	usb_status = usb_receive( &terminal_cmd, 
 200:main.c        **** // 							  sizeof( terminal_cmd ), 
 201:main.c        **** // 							  HAL_DEFAULT_TIMEOUT );
 202:main.c        **** 
 203:main.c        **** // 	/* Parse command input if HAL_UART_Receive doesn't timeout */
 204:main.c        **** // 	if ( ( usb_status == USB_OK ) && ( terminal_cmd != 0 ) )
 205:main.c        **** // 		{
 206:main.c        **** // 		terminal_status = terminal_exec_cmd( terminal_cmd );
 207:main.c        **** // 		if ( terminal_status != TERMINAL_OK )
 208:main.c        **** // 			{
 209:main.c        **** // 			Error_Handler( ERROR_TERMINAL_ERROR );
 210:main.c        **** // 			}
 211:main.c        **** // 		} /* if ( usb_status == USB_OK ) */
 212:main.c        **** // 	}
 213:main.c        **** 
 214:main.c        **** 
 215:main.c        **** /*------------------------------------------------------------------------------
 216:main.c        ****  Initialization stage 
 217:main.c        **** ------------------------------------------------------------------------------*/
 218:main.c        **** 
 219:main.c        **** /* Connect to the valve controller             */
 220:main.c        **** if ( vc_connect() != VC_OK )
 169              		.loc 1 220 1 view .LVU65
 170              		.loc 1 220 6 is_stmt 0 view .LVU66
 171 0096 FFF7FEFF 		bl	vc_connect
 172              	.LVL21:
 173              		.loc 1 220 4 view .LVU67
 174 009a F8B9     		cbnz	r0, .L25
 175              	.L4:
 221:main.c        **** 	{
 222:main.c        **** 	Error_Handler( ERROR_VC_OFFLINE_ERROR );
 223:main.c        **** 	}
 224:main.c        **** 
 225:main.c        **** /* Enable the main valve stepper motor drivers */
ARM GAS  /tmp/cckl8RH2.s 			page 8


 226:main.c        **** if ( vc_enable_main_valves() != VC_OK )
 176              		.loc 1 226 1 is_stmt 1 view .LVU68
 177              		.loc 1 226 6 is_stmt 0 view .LVU69
 178 009c FFF7FEFF 		bl	vc_enable_main_valves
 179              	.LVL22:
 180              		.loc 1 226 4 view .LVU70
 181 00a0 00BB     		cbnz	r0, .L26
 182              	.L5:
 227:main.c        **** 	{
 228:main.c        **** 	Error_Handler( ERROR_VC_INIT_ERROR );
 229:main.c        **** 	}
 230:main.c        **** 
 231:main.c        **** /* Calibrate the main propellant valves        */
 232:main.c        **** if ( vc_calibrate_main_valves() != VC_OK )
 183              		.loc 1 232 1 is_stmt 1 view .LVU71
 184              		.loc 1 232 6 is_stmt 0 view .LVU72
 185 00a2 FFF7FEFF 		bl	vc_calibrate_main_valves
 186              	.LVL23:
 187              		.loc 1 232 4 view .LVU73
 188 00a6 08BB     		cbnz	r0, .L27
 189              	.L6:
 233:main.c        **** 	{
 234:main.c        **** 	Error_Handler( ERROR_VC_INIT_ERROR );
 235:main.c        **** 	}
 236:main.c        **** HAL_Delay( VALVE_CALIBRATION_TIME ); /* Wait for calibration to finish */
 190              		.loc 1 236 1 is_stmt 1 view .LVU74
 191 00a8 4FF47A70 		mov	r0, #1000
 192 00ac FFF7FEFF 		bl	HAL_Delay
 193              	.LVL24:
 237:main.c        **** 
 238:main.c        **** /* Reset solenoid positions                    */
 239:main.c        **** if ( vc_reset_solenoids() != VC_OK )
 194              		.loc 1 239 1 view .LVU75
 195              		.loc 1 239 6 is_stmt 0 view .LVU76
 196 00b0 FFF7FEFF 		bl	vc_reset_solenoids
 197              	.LVL25:
 198              		.loc 1 239 4 view .LVU77
 199 00b4 F0B9     		cbnz	r0, .L28
 200              	.L7:
 240:main.c        **** 	{
 241:main.c        **** 	Error_Handler( ERROR_VC_INIT_ERROR );
 242:main.c        **** 	}
 243:main.c        **** 
 244:main.c        **** /* Enter the READY state                */
 245:main.c        **** fsm_state = FSM_READY_STATE;
 201              		.loc 1 245 1 is_stmt 1 view .LVU78
 202              		.loc 1 245 11 is_stmt 0 view .LVU79
 203 00b6 0121     		movs	r1, #1
 204 00b8 344B     		ldr	r3, .L29
 205 00ba 1970     		strb	r1, [r3]
 246:main.c        **** 
 247:main.c        **** /* Start listening for commands from the ground station */
 248:main.c        **** usb_status = usb_receive_IT( (void*) &gs_command, sizeof( gs_command ) );
 206              		.loc 1 248 1 is_stmt 1 view .LVU80
 207              		.loc 1 248 14 is_stmt 0 view .LVU81
 208 00bc 3448     		ldr	r0, .L29+4
 209 00be FFF7FEFF 		bl	usb_receive_IT
ARM GAS  /tmp/cckl8RH2.s 			page 9


 210              	.LVL26:
 249:main.c        **** if ( usb_status != USB_OK )
 211              		.loc 1 249 1 is_stmt 1 view .LVU82
 212              		.loc 1 249 4 is_stmt 0 view .LVU83
 213 00c2 F8B1     		cbz	r0, .L9
 250:main.c        **** 	{
 251:main.c        **** 	Error_Handler( ERROR_USB_UART_ERROR );
 214              		.loc 1 251 2 is_stmt 1 view .LVU84
 215 00c4 1720     		movs	r0, #23
 216              	.LVL27:
 217              		.loc 1 251 2 is_stmt 0 view .LVU85
 218 00c6 FFF7FEFF 		bl	Error_Handler
 219              	.LVL28:
 220 00ca 1BE0     		b	.L9
 221              	.LVL29:
 222              	.L23:
 176:main.c        **** 	}
 223              		.loc 1 176 2 is_stmt 1 view .LVU86
 224 00cc 0020     		movs	r0, #0
 225              	.LVL30:
 176:main.c        **** 	}
 226              		.loc 1 176 2 is_stmt 0 view .LVU87
 227 00ce FFF7FEFF 		bl	Error_Handler
 228              	.LVL31:
 229 00d2 D7E7     		b	.L2
 230              	.LVL32:
 231              	.L24:
 186:main.c        **** 	}
 232              		.loc 1 186 2 is_stmt 1 view .LVU88
 233 00d4 1B20     		movs	r0, #27
 234              	.LVL33:
 186:main.c        **** 	}
 235              		.loc 1 186 2 is_stmt 0 view .LVU89
 236 00d6 FFF7FEFF 		bl	Error_Handler
 237              	.LVL34:
 238 00da D9E7     		b	.L3
 239              	.L25:
 222:main.c        **** 	}
 240              		.loc 1 222 2 is_stmt 1 view .LVU90
 241 00dc 2720     		movs	r0, #39
 242 00de FFF7FEFF 		bl	Error_Handler
 243              	.LVL35:
 244 00e2 DBE7     		b	.L4
 245              	.L26:
 228:main.c        **** 	}
 246              		.loc 1 228 2 view .LVU91
 247 00e4 2820     		movs	r0, #40
 248 00e6 FFF7FEFF 		bl	Error_Handler
 249              	.LVL36:
 250 00ea DAE7     		b	.L5
 251              	.L27:
 234:main.c        **** 	}
 252              		.loc 1 234 2 view .LVU92
 253 00ec 2820     		movs	r0, #40
 254 00ee FFF7FEFF 		bl	Error_Handler
 255              	.LVL37:
 256 00f2 D9E7     		b	.L6
ARM GAS  /tmp/cckl8RH2.s 			page 10


 257              	.L28:
 241:main.c        **** 	}
 258              		.loc 1 241 2 view .LVU93
 259 00f4 2820     		movs	r0, #40
 260 00f6 FFF7FEFF 		bl	Error_Handler
 261              	.LVL38:
 262 00fa DCE7     		b	.L7
 263              	.LVL39:
 264              	.L20:
 252:main.c        **** 	}
 253:main.c        **** 
 254:main.c        **** 
 255:main.c        **** /*------------------------------------------------------------------------------
 256:main.c        ****  Hotfire Sequencing 
 257:main.c        **** ------------------------------------------------------------------------------*/
 258:main.c        **** 
 259:main.c        **** /* Nominal Sequence: READY > PRE-FIRE PURGE > FILL-CHILL > STANDBY >
 260:main.c        ****                      FIRE  > DISARM         > POST-FLIGHT 
 261:main.c        ****    Failure Contingencies : FILL_CHILL > MANUAL
 262:main.c        ****                            FIRE       > ABORT 
 263:main.c        **** 						   DISARM     > MANUAL */
 264:main.c        **** while (1)
 265:main.c        **** 	{
 266:main.c        **** 	/* Run the current state */
 267:main.c        **** 	switch ( fsm_state )
 268:main.c        **** 		{
 269:main.c        **** 		/* READY state */
 270:main.c        **** 		case FSM_READY_STATE:
 271:main.c        **** 			{
 272:main.c        **** 			fsm_state = run_ready_state();
 265              		.loc 1 272 4 view .LVU94
 266              		.loc 1 272 16 is_stmt 0 view .LVU95
 267 00fc FFF7FEFF 		bl	run_ready_state
 268              	.LVL40:
 269              		.loc 1 272 14 view .LVU96
 270 0100 224B     		ldr	r3, .L29
 271 0102 1870     		strb	r0, [r3]
 273:main.c        **** 			break;
 272              		.loc 1 273 4 is_stmt 1 view .LVU97
 273              	.L9:
 264:main.c        **** 	{
 274              		.loc 1 264 1 view .LVU98
 267:main.c        **** 		{
 275              		.loc 1 267 2 view .LVU99
 276 0104 214B     		ldr	r3, .L29
 277 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 278 0108 013B     		subs	r3, r3, #1
 279 010a 082B     		cmp	r3, #8
 280 010c 3AD8     		bhi	.L10
 281 010e 01A2     		adr	r2, .L12
 282 0110 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 283              		.p2align 2
 284              	.L12:
 285 0114 FD000000 		.word	.L20+1
 286 0118 39010000 		.word	.L19+1
 287 011c 43010000 		.word	.L18+1
 288 0120 4D010000 		.word	.L17+1
ARM GAS  /tmp/cckl8RH2.s 			page 11


 289 0124 57010000 		.word	.L16+1
 290 0128 61010000 		.word	.L15+1
 291 012c 6B010000 		.word	.L14+1
 292 0130 75010000 		.word	.L13+1
 293 0134 7F010000 		.word	.L11+1
 294              		.p2align 1
 295              	.L19:
 274:main.c        **** 			} /* case FSM_READY_STATE */
 275:main.c        **** 		
 276:main.c        **** 		/* PRE-FIRE PURGE state */
 277:main.c        **** 		case FSM_PRE_FIRE_PURGE_STATE:
 278:main.c        **** 			{
 279:main.c        **** 			fsm_state = run_pre_fire_purge_state();
 296              		.loc 1 279 4 view .LVU100
 297              		.loc 1 279 16 is_stmt 0 view .LVU101
 298 0138 FFF7FEFF 		bl	run_pre_fire_purge_state
 299              	.LVL41:
 300              		.loc 1 279 14 view .LVU102
 301 013c 134B     		ldr	r3, .L29
 302 013e 1870     		strb	r0, [r3]
 280:main.c        **** 			break;
 303              		.loc 1 280 4 is_stmt 1 view .LVU103
 304 0140 E0E7     		b	.L9
 305              	.L18:
 281:main.c        **** 			}
 282:main.c        **** 		
 283:main.c        **** 		/* FILL-CHILL state */
 284:main.c        **** 		case FSM_FILL_CHILL_STATE:
 285:main.c        **** 			{
 286:main.c        **** 			fsm_state = run_fill_chill_state();
 306              		.loc 1 286 4 view .LVU104
 307              		.loc 1 286 16 is_stmt 0 view .LVU105
 308 0142 FFF7FEFF 		bl	run_fill_chill_state
 309              	.LVL42:
 310              		.loc 1 286 14 view .LVU106
 311 0146 114B     		ldr	r3, .L29
 312 0148 1870     		strb	r0, [r3]
 287:main.c        **** 			break;
 313              		.loc 1 287 4 is_stmt 1 view .LVU107
 314 014a DBE7     		b	.L9
 315              	.L17:
 288:main.c        **** 			}
 289:main.c        **** 
 290:main.c        **** 		/* STANDBY state */
 291:main.c        **** 		case FSM_STANDBY_STATE:
 292:main.c        **** 			{
 293:main.c        **** 			fsm_state = run_standby_state();
 316              		.loc 1 293 4 view .LVU108
 317              		.loc 1 293 16 is_stmt 0 view .LVU109
 318 014c FFF7FEFF 		bl	run_standby_state
 319              	.LVL43:
 320              		.loc 1 293 14 view .LVU110
 321 0150 0E4B     		ldr	r3, .L29
 322 0152 1870     		strb	r0, [r3]
 294:main.c        **** 			break;
 323              		.loc 1 294 4 is_stmt 1 view .LVU111
 324 0154 D6E7     		b	.L9
ARM GAS  /tmp/cckl8RH2.s 			page 12


 325              	.L16:
 295:main.c        **** 			}
 296:main.c        **** 		
 297:main.c        **** 		/* FIRE state */
 298:main.c        **** 		case FSM_FIRE_STATE:
 299:main.c        **** 			{
 300:main.c        **** 			fsm_state = run_fire_state();
 326              		.loc 1 300 4 view .LVU112
 327              		.loc 1 300 16 is_stmt 0 view .LVU113
 328 0156 FFF7FEFF 		bl	run_fire_state
 329              	.LVL44:
 330              		.loc 1 300 14 view .LVU114
 331 015a 0C4B     		ldr	r3, .L29
 332 015c 1870     		strb	r0, [r3]
 301:main.c        **** 			break;
 333              		.loc 1 301 4 is_stmt 1 view .LVU115
 334 015e D1E7     		b	.L9
 335              	.L15:
 302:main.c        **** 			}
 303:main.c        **** 		
 304:main.c        **** 		/* DISARM state */
 305:main.c        **** 		case FSM_DISARM_STATE:
 306:main.c        **** 			{
 307:main.c        **** 			fsm_state = run_disarm_state();
 336              		.loc 1 307 4 view .LVU116
 337              		.loc 1 307 16 is_stmt 0 view .LVU117
 338 0160 FFF7FEFF 		bl	run_disarm_state
 339              	.LVL45:
 340              		.loc 1 307 14 view .LVU118
 341 0164 094B     		ldr	r3, .L29
 342 0166 1870     		strb	r0, [r3]
 308:main.c        **** 			break;
 343              		.loc 1 308 4 is_stmt 1 view .LVU119
 344 0168 CCE7     		b	.L9
 345              	.L14:
 309:main.c        **** 			}
 310:main.c        **** 		
 311:main.c        **** 		/* POST-FIRE state */
 312:main.c        **** 		case FSM_POST_FIRE_STATE:
 313:main.c        **** 			{
 314:main.c        **** 			fsm_state = run_post_fire_state();
 346              		.loc 1 314 4 view .LVU120
 347              		.loc 1 314 16 is_stmt 0 view .LVU121
 348 016a FFF7FEFF 		bl	run_post_fire_state
 349              	.LVL46:
 350              		.loc 1 314 14 view .LVU122
 351 016e 074B     		ldr	r3, .L29
 352 0170 1870     		strb	r0, [r3]
 315:main.c        **** 			break;
 353              		.loc 1 315 4 is_stmt 1 view .LVU123
 354 0172 C7E7     		b	.L9
 355              	.L13:
 316:main.c        **** 			}
 317:main.c        **** 
 318:main.c        **** 		/* Manual control mode */
 319:main.c        **** 		case FSM_MANUAL_STATE:
 320:main.c        **** 			{
ARM GAS  /tmp/cckl8RH2.s 			page 13


 321:main.c        **** 			fsm_state = run_manual_state();
 356              		.loc 1 321 4 view .LVU124
 357              		.loc 1 321 16 is_stmt 0 view .LVU125
 358 0174 FFF7FEFF 		bl	run_manual_state
 359              	.LVL47:
 360              		.loc 1 321 14 view .LVU126
 361 0178 044B     		ldr	r3, .L29
 362 017a 1870     		strb	r0, [r3]
 322:main.c        **** 			break;
 363              		.loc 1 322 4 is_stmt 1 view .LVU127
 364 017c C2E7     		b	.L9
 365              	.L11:
 323:main.c        **** 			}
 324:main.c        **** 
 325:main.c        **** 		/* ABORT state */
 326:main.c        **** 		case FSM_ABORT_STATE:
 327:main.c        **** 			{
 328:main.c        **** 			run_abort_state();
 366              		.loc 1 328 4 view .LVU128
 367 017e FFF7FEFF 		bl	run_abort_state
 368              	.LVL48:
 329:main.c        **** 			break;
 369              		.loc 1 329 4 view .LVU129
 370 0182 BFE7     		b	.L9
 371              	.L10:
 330:main.c        **** 			}
 331:main.c        **** 		
 332:main.c        **** 		/* Invalid state */
 333:main.c        **** 		default:
 334:main.c        **** 			{
 335:main.c        **** 			Error_Handler( ERROR_FSM_INVALID_STATE_ERROR );
 372              		.loc 1 335 4 view .LVU130
 373 0184 2620     		movs	r0, #38
 374 0186 FFF7FEFF 		bl	Error_Handler
 375              	.LVL49:
 376 018a BBE7     		b	.L9
 377              	.L30:
 378              		.align	2
 379              	.L29:
 380 018c 00000000 		.word	fsm_state
 381 0190 00000000 		.word	gs_command
 382              		.cfi_endproc
 383              	.LFE333:
 385              		.global	sensor_ping_pong_buffer
 386              		.section	.bss.sensor_ping_pong_buffer,"aw",%nobits
 387              		.align	2
 390              	sensor_ping_pong_buffer:
 391 0000 00000000 		.space	84
 391      00000000 
 391      00000000 
 391      00000000 
 391      00000000 
 392              		.global	telreq_wait_flag
 393              		.section	.bss.telreq_wait_flag,"aw",%nobits
 396              	telreq_wait_flag:
 397 0000 00       		.space	1
 398              		.global	tanks_safe_flag
ARM GAS  /tmp/cckl8RH2.s 			page 14


 399              		.section	.bss.tanks_safe_flag,"aw",%nobits
 402              	tanks_safe_flag:
 403 0000 00       		.space	1
 404              		.global	kbottle_closed_flag
 405              		.section	.bss.kbottle_closed_flag,"aw",%nobits
 408              	kbottle_closed_flag:
 409 0000 00       		.space	1
 410              		.global	lox_purge_flag
 411              		.section	.bss.lox_purge_flag,"aw",%nobits
 414              	lox_purge_flag:
 415 0000 00       		.space	1
 416              		.global	stop_purge_flag
 417              		.section	.bss.stop_purge_flag,"aw",%nobits
 420              	stop_purge_flag:
 421 0000 00       		.space	1
 422              		.global	stop_hotfire_flag
 423              		.section	.bss.stop_hotfire_flag,"aw",%nobits
 426              	stop_hotfire_flag:
 427 0000 00       		.space	1
 428              		.global	gs_command
 429              		.section	.bss.gs_command,"aw",%nobits
 432              	gs_command:
 433 0000 00       		.space	1
 434              		.global	fsm_state
 435              		.section	.bss.fsm_state,"aw",%nobits
 438              	fsm_state:
 439 0000 00       		.space	1
 440              		.global	huart4
 441              		.section	.bss.huart4,"aw",%nobits
 442              		.align	2
 445              	huart4:
 446 0000 00000000 		.space	144
 446      00000000 
 446      00000000 
 446      00000000 
 446      00000000 
 447              		.global	huart2
 448              		.section	.bss.huart2,"aw",%nobits
 449              		.align	2
 452              	huart2:
 453 0000 00000000 		.space	144
 453      00000000 
 453      00000000 
 453      00000000 
 453      00000000 
 454              		.global	huart1
 455              		.section	.bss.huart1,"aw",%nobits
 456              		.align	2
 459              	huart1:
 460 0000 00000000 		.space	144
 460      00000000 
 460      00000000 
 460      00000000 
 460      00000000 
 461              		.global	hspi2
 462              		.section	.bss.hspi2,"aw",%nobits
 463              		.align	2
ARM GAS  /tmp/cckl8RH2.s 			page 15


 466              	hspi2:
 467 0000 00000000 		.space	136
 467      00000000 
 467      00000000 
 467      00000000 
 467      00000000 
 468              		.global	hi2c1
 469              		.section	.bss.hi2c1,"aw",%nobits
 470              		.align	2
 473              	hi2c1:
 474 0000 00000000 		.space	76
 474      00000000 
 474      00000000 
 474      00000000 
 474      00000000 
 475              		.global	hadc3
 476              		.section	.bss.hadc3,"aw",%nobits
 477              		.align	2
 480              	hadc3:
 481 0000 00000000 		.space	100
 481      00000000 
 481      00000000 
 481      00000000 
 481      00000000 
 482              		.global	hadc2
 483              		.section	.bss.hadc2,"aw",%nobits
 484              		.align	2
 487              	hadc2:
 488 0000 00000000 		.space	100
 488      00000000 
 488      00000000 
 488      00000000 
 488      00000000 
 489              		.global	hadc1
 490              		.section	.bss.hadc1,"aw",%nobits
 491              		.align	2
 494              	hadc1:
 495 0000 00000000 		.space	100
 495      00000000 
 495      00000000 
 495      00000000 
 495      00000000 
 496              		.text
 497              	.Letext0:
 498              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 499              		.file 3 "../../../lib/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
 500              		.file 4 "../../../lib/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 501              		.file 5 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 502              		.file 6 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 503              		.file 7 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 504              		.file 8 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
 505              		.file 9 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
 506              		.file 10 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
 507              		.file 11 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 508              		.file 12 "../../../mod/sensor/sensor.h"
 509              		.file 13 "main.h"
 510              		.file 14 "../../../lib/sdr_pin_defines_L0002.h"
ARM GAS  /tmp/cckl8RH2.s 			page 16


 511              		.file 15 "../../../lib/util/sdr_error.h"
 512              		.file 16 "valve_control.h"
 513              		.file 17 "terminal.h"
 514              		.file 18 "../../../mod/flash/flash.h"
 515              		.file 19 "../../../mod/led/led.h"
 516              		.file 20 "../../../mod/temp/temp.h"
 517              		.file 21 "../../../mod/usb/usb.h"
 518              		.file 22 "../../../init/rev5/init.h"
 519              		.file 23 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cckl8RH2.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cckl8RH2.s:20     .text.main:0000000000000000 $t
     /tmp/cckl8RH2.s:26     .text.main:0000000000000000 main
     /tmp/cckl8RH2.s:285    .text.main:0000000000000114 $d
     /tmp/cckl8RH2.s:294    .text.main:0000000000000138 $t
     /tmp/cckl8RH2.s:380    .text.main:000000000000018c $d
     /tmp/cckl8RH2.s:438    .bss.fsm_state:0000000000000000 fsm_state
     /tmp/cckl8RH2.s:432    .bss.gs_command:0000000000000000 gs_command
     /tmp/cckl8RH2.s:390    .bss.sensor_ping_pong_buffer:0000000000000000 sensor_ping_pong_buffer
     /tmp/cckl8RH2.s:387    .bss.sensor_ping_pong_buffer:0000000000000000 $d
     /tmp/cckl8RH2.s:396    .bss.telreq_wait_flag:0000000000000000 telreq_wait_flag
     /tmp/cckl8RH2.s:397    .bss.telreq_wait_flag:0000000000000000 $d
     /tmp/cckl8RH2.s:402    .bss.tanks_safe_flag:0000000000000000 tanks_safe_flag
     /tmp/cckl8RH2.s:403    .bss.tanks_safe_flag:0000000000000000 $d
     /tmp/cckl8RH2.s:408    .bss.kbottle_closed_flag:0000000000000000 kbottle_closed_flag
     /tmp/cckl8RH2.s:409    .bss.kbottle_closed_flag:0000000000000000 $d
     /tmp/cckl8RH2.s:414    .bss.lox_purge_flag:0000000000000000 lox_purge_flag
     /tmp/cckl8RH2.s:415    .bss.lox_purge_flag:0000000000000000 $d
     /tmp/cckl8RH2.s:420    .bss.stop_purge_flag:0000000000000000 stop_purge_flag
     /tmp/cckl8RH2.s:421    .bss.stop_purge_flag:0000000000000000 $d
     /tmp/cckl8RH2.s:426    .bss.stop_hotfire_flag:0000000000000000 stop_hotfire_flag
     /tmp/cckl8RH2.s:427    .bss.stop_hotfire_flag:0000000000000000 $d
     /tmp/cckl8RH2.s:433    .bss.gs_command:0000000000000000 $d
     /tmp/cckl8RH2.s:439    .bss.fsm_state:0000000000000000 $d
     /tmp/cckl8RH2.s:445    .bss.huart4:0000000000000000 huart4
     /tmp/cckl8RH2.s:442    .bss.huart4:0000000000000000 $d
     /tmp/cckl8RH2.s:452    .bss.huart2:0000000000000000 huart2
     /tmp/cckl8RH2.s:449    .bss.huart2:0000000000000000 $d
     /tmp/cckl8RH2.s:459    .bss.huart1:0000000000000000 huart1
     /tmp/cckl8RH2.s:456    .bss.huart1:0000000000000000 $d
     /tmp/cckl8RH2.s:466    .bss.hspi2:0000000000000000 hspi2
     /tmp/cckl8RH2.s:463    .bss.hspi2:0000000000000000 $d
     /tmp/cckl8RH2.s:473    .bss.hi2c1:0000000000000000 hi2c1
     /tmp/cckl8RH2.s:470    .bss.hi2c1:0000000000000000 $d
     /tmp/cckl8RH2.s:480    .bss.hadc3:0000000000000000 hadc3
     /tmp/cckl8RH2.s:477    .bss.hadc3:0000000000000000 $d
     /tmp/cckl8RH2.s:487    .bss.hadc2:0000000000000000 hadc2
     /tmp/cckl8RH2.s:484    .bss.hadc2:0000000000000000 $d
     /tmp/cckl8RH2.s:494    .bss.hadc1:0000000000000000 hadc1
     /tmp/cckl8RH2.s:491    .bss.hadc1:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_Init
SystemClock_Config
PeriphCommonClock_Config
GPIO_Init
led_set_color
HAL_Delay
USB_UART_Init
Valve_UART_Init
Wireless_UART_Init
FLASH_SPI_Init
PRESSURE_ADC_Init
PRESSURE5_ADC_Init
LOADCELL_ADC_Init
Thermocouple_I2C_Init
ARM GAS  /tmp/cckl8RH2.s 			page 18


flash_init
sensor_init
temp_init
vc_connect
vc_enable_main_valves
vc_calibrate_main_valves
vc_reset_solenoids
usb_receive_IT
Error_Handler
run_ready_state
run_pre_fire_purge_state
run_fill_chill_state
run_standby_state
run_fire_state
run_disarm_state
run_post_fire_state
run_manual_state
run_abort_state
