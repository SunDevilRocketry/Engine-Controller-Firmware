ARM GAS  /tmp/ccnIi471.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"sensor.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "../../../mod/sensor/sensor.c"
  19              		.section	.text.sensor_map,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	sensor_map:
  26              	.LVL0:
  27              	.LFB338:
   1:../../../mod/sensor/sensor.c **** /*******************************************************************************
   2:../../../mod/sensor/sensor.c **** *
   3:../../../mod/sensor/sensor.c **** * FILE: 
   4:../../../mod/sensor/sensor.c **** * 		sensor.c
   5:../../../mod/sensor/sensor.c **** *
   6:../../../mod/sensor/sensor.c **** * DESCRIPTION: 
   7:../../../mod/sensor/sensor.c **** * 		Contains functions to interface between sdec terminal commands and SDR
   8:../../../mod/sensor/sensor.c **** *       sensor APIs
   9:../../../mod/sensor/sensor.c **** *
  10:../../../mod/sensor/sensor.c **** *******************************************************************************/
  11:../../../mod/sensor/sensor.c **** 
  12:../../../mod/sensor/sensor.c **** 
  13:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
  14:../../../mod/sensor/sensor.c ****  Standard Includes                                                                     
  15:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
  16:../../../mod/sensor/sensor.c **** #include <string.h>
  17:../../../mod/sensor/sensor.c **** #include <stdbool.h>
  18:../../../mod/sensor/sensor.c **** #include <math.h>
  19:../../../mod/sensor/sensor.c **** 
  20:../../../mod/sensor/sensor.c **** 
  21:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
  22:../../../mod/sensor/sensor.c ****  MCU Pins 
  23:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
  24:../../../mod/sensor/sensor.c **** #if   defined( FLIGHT_COMPUTER      )
  25:../../../mod/sensor/sensor.c **** 	#include "sdr_pin_defines_A0002.h"
  26:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER    )
  27:../../../mod/sensor/sensor.c **** 	#include "sdr_pin_defines_L0002.h"
  28:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
  29:../../../mod/sensor/sensor.c **** 	#include "sdr_pin_defines_A0007.h"
  30:../../../mod/sensor/sensor.c **** #elif defined( VALVE_CONTROLLER     )
  31:../../../mod/sensor/sensor.c **** 	#include "sdr_pin_defines_L0005.h"
ARM GAS  /tmp/ccnIi471.s 			page 2


  32:../../../mod/sensor/sensor.c **** #endif 
  33:../../../mod/sensor/sensor.c **** 
  34:../../../mod/sensor/sensor.c **** 
  35:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
  36:../../../mod/sensor/sensor.c ****  Project Includes                                                                     
  37:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
  38:../../../mod/sensor/sensor.c **** #include "main.h"
  39:../../../mod/sensor/sensor.c **** #if defined( FLIGHT_COMPUTER )
  40:../../../mod/sensor/sensor.c **** 	#include "imu.h"
  41:../../../mod/sensor/sensor.c **** 	#include "baro.h"
  42:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
  43:../../../mod/sensor/sensor.c **** 	#include "baro.h"
  44:../../../mod/sensor/sensor.c **** #endif
  45:../../../mod/sensor/sensor.c **** #include "usb.h"
  46:../../../mod/sensor/sensor.c **** #include "sensor.h"
  47:../../../mod/sensor/sensor.c **** #if defined( ENGINE_CONTROLLER )
  48:../../../mod/sensor/sensor.c **** 	#include "pressure.h"
  49:../../../mod/sensor/sensor.c **** 	#include "loadcell.h"
  50:../../../mod/sensor/sensor.c **** 	#include "temp.h"
  51:../../../mod/sensor/sensor.c **** #endif
  52:../../../mod/sensor/sensor.c **** #if defined( VALVE_CONTROLLER  )
  53:../../../mod/sensor/sensor.c **** 	#include "valve.h"
  54:../../../mod/sensor/sensor.c **** #endif
  55:../../../mod/sensor/sensor.c **** 
  56:../../../mod/sensor/sensor.c **** 
  57:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
  58:../../../mod/sensor/sensor.c ****  Global Variables 
  59:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
  60:../../../mod/sensor/sensor.c **** 
  61:../../../mod/sensor/sensor.c **** /* Hash table of sensor readout sizes and offsets */
  62:../../../mod/sensor/sensor.c **** static SENSOR_DATA_SIZE_OFFSETS sensor_size_offsets_table[ NUM_SENSORS ];
  63:../../../mod/sensor/sensor.c **** 
  64:../../../mod/sensor/sensor.c **** 
  65:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
  66:../../../mod/sensor/sensor.c ****  Internal function prototypes 
  67:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
  68:../../../mod/sensor/sensor.c **** 
  69:../../../mod/sensor/sensor.c **** /* Sensor ID to size and pointer mapping */
  70:../../../mod/sensor/sensor.c **** void static sensor_map
  71:../../../mod/sensor/sensor.c **** 	(
  72:../../../mod/sensor/sensor.c **** 	SENSOR_DATA* sensor_data_ptr,
  73:../../../mod/sensor/sensor.c **** 	SENSOR_ID    sensor_id      ,
  74:../../../mod/sensor/sensor.c **** 	uint8_t**    sensorid_pptr  ,
  75:../../../mod/sensor/sensor.c **** 	size_t*      sensor_size
  76:../../../mod/sensor/sensor.c **** 	);
  77:../../../mod/sensor/sensor.c **** 
  78:../../../mod/sensor/sensor.c **** /* Extract bytes for export from SENSOR_ID struct */
  79:../../../mod/sensor/sensor.c **** void static extract_sensor_bytes 
  80:../../../mod/sensor/sensor.c **** 	(
  81:../../../mod/sensor/sensor.c **** 	SENSOR_DATA* sensor_data_ptr      ,
  82:../../../mod/sensor/sensor.c **** 	SENSOR_ID*   sensor_ids_ptr       ,
  83:../../../mod/sensor/sensor.c **** 	uint8_t      num_sensors          ,
  84:../../../mod/sensor/sensor.c **** 	uint8_t*     sensor_data_bytes_ptr,
  85:../../../mod/sensor/sensor.c **** 	uint8_t*     num_sensor_bytes
  86:../../../mod/sensor/sensor.c **** 	);
  87:../../../mod/sensor/sensor.c **** 
  88:../../../mod/sensor/sensor.c **** /* reads from all sensors using the MCUs ADCs */
ARM GAS  /tmp/ccnIi471.s 			page 3


  89:../../../mod/sensor/sensor.c **** #ifdef L0002_REV5
  90:../../../mod/sensor/sensor.c **** SENSOR_STATUS sensor_adc_burst_read
  91:../../../mod/sensor/sensor.c **** 	(
  92:../../../mod/sensor/sensor.c **** 	SENSOR_DATA* sensor_data_ptr /* Pointer to sensor data structure */
  93:../../../mod/sensor/sensor.c **** 	);
  94:../../../mod/sensor/sensor.c **** 
  95:../../../mod/sensor/sensor.c **** /* Mapping from pressure transducer number to mutliplexor GPIO pin */
  96:../../../mod/sensor/sensor.c **** static inline uint16_t mux_map
  97:../../../mod/sensor/sensor.c **** 	(
  98:../../../mod/sensor/sensor.c ****     PRESSURE_PT_NUM    pt_num    
  99:../../../mod/sensor/sensor.c ****     );
 100:../../../mod/sensor/sensor.c **** #endif
 101:../../../mod/sensor/sensor.c **** 
 102:../../../mod/sensor/sensor.c **** #ifdef L0002_REV5
 103:../../../mod/sensor/sensor.c **** /* Select the adc channel for PT1 */
 104:../../../mod/sensor/sensor.c **** static void pt1_adc_channel_select
 105:../../../mod/sensor/sensor.c **** 	(
 106:../../../mod/sensor/sensor.c **** 	void
 107:../../../mod/sensor/sensor.c **** 	);
 108:../../../mod/sensor/sensor.c **** 
 109:../../../mod/sensor/sensor.c **** /* Select the adc channel for PT7 */
 110:../../../mod/sensor/sensor.c **** static void pt7_adc_channel_select
 111:../../../mod/sensor/sensor.c **** 	(
 112:../../../mod/sensor/sensor.c **** 	void
 113:../../../mod/sensor/sensor.c **** 	);
 114:../../../mod/sensor/sensor.c **** 
 115:../../../mod/sensor/sensor.c **** /* Select the adc channel for the loadcell */
 116:../../../mod/sensor/sensor.c **** static void loadcell_adc_channel_select
 117:../../../mod/sensor/sensor.c **** 	(
 118:../../../mod/sensor/sensor.c **** 	void
 119:../../../mod/sensor/sensor.c **** 	);
 120:../../../mod/sensor/sensor.c **** 
 121:../../../mod/sensor/sensor.c **** /* Select the adc channel for the pt8 */
 122:../../../mod/sensor/sensor.c **** static void pt8_adc_channel_select
 123:../../../mod/sensor/sensor.c **** 	(
 124:../../../mod/sensor/sensor.c **** 	void
 125:../../../mod/sensor/sensor.c **** 	);
 126:../../../mod/sensor/sensor.c **** 
 127:../../../mod/sensor/sensor.c **** /* Select the adc channel for the pt5 */
 128:../../../mod/sensor/sensor.c **** static void pt5_adc_channel_select
 129:../../../mod/sensor/sensor.c **** 	(
 130:../../../mod/sensor/sensor.c **** 	void
 131:../../../mod/sensor/sensor.c **** 	);
 132:../../../mod/sensor/sensor.c **** 
 133:../../../mod/sensor/sensor.c **** /* Select the adc channel for the pt6 */
 134:../../../mod/sensor/sensor.c **** static void pt6_adc_channel_select
 135:../../../mod/sensor/sensor.c **** 	(
 136:../../../mod/sensor/sensor.c **** 	void
 137:../../../mod/sensor/sensor.c **** 	);
 138:../../../mod/sensor/sensor.c **** #endif /* #ifdef L0002_REV5 */
 139:../../../mod/sensor/sensor.c **** 
 140:../../../mod/sensor/sensor.c **** 
 141:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 142:../../../mod/sensor/sensor.c ****  API Functions 
 143:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 144:../../../mod/sensor/sensor.c **** 
 145:../../../mod/sensor/sensor.c **** /*******************************************************************************
ARM GAS  /tmp/ccnIi471.s 			page 4


 146:../../../mod/sensor/sensor.c **** *                                                                              *
 147:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
 148:../../../mod/sensor/sensor.c **** * 		sensor_init                                                            *
 149:../../../mod/sensor/sensor.c **** *                                                                              *
 150:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
 151:../../../mod/sensor/sensor.c **** *       Initialize the sensor module                                           *
 152:../../../mod/sensor/sensor.c **** *                                                                              *
 153:../../../mod/sensor/sensor.c **** *******************************************************************************/
 154:../../../mod/sensor/sensor.c **** void sensor_init 
 155:../../../mod/sensor/sensor.c **** 	(
 156:../../../mod/sensor/sensor.c **** 	void
 157:../../../mod/sensor/sensor.c **** 	)
 158:../../../mod/sensor/sensor.c **** {
 159:../../../mod/sensor/sensor.c **** /* Setup the sensor id hash table */
 160:../../../mod/sensor/sensor.c **** #if defined( FLIGHT_COMPUTER )
 161:../../../mod/sensor/sensor.c **** 	/* Sensor offsets */
 162:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0  ].offset = 0;  /* SENSOR_ACCX  */
 163:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].offset = 2;  /* SENSOR_ACCY  */
 164:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].offset = 4;  /* SENSOR_ACCZ  */
 165:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].offset = 6;  /* SENSOR_GYROX */
 166:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].offset = 8;  /* SENSOR_GYROY */
 167:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].offset = 10; /* SENSOR_GYROZ */
 168:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].offset = 12; /* SENSOR_MAGX  */
 169:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].offset = 14; /* SENSOR_MAGY  */
 170:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].offset = 16; /* SENSOR_MAGZ  */
 171:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].offset = 18; /* SENSOR_IMUT  */
 172:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 10 ].offset = 20; /* SENSOR_PRES  */
 173:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 11 ].offset = 24; /* SENSOR_TEMP  */
 174:../../../mod/sensor/sensor.c **** 
 175:../../../mod/sensor/sensor.c **** 	/* Sensor Sizes   */
 176:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0  ].size   = 2;  /* SENSOR_ACCX  */
 177:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].size   = 2;  /* SENSOR_ACCY  */
 178:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].size   = 2;  /* SENSOR_ACCZ  */
 179:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].size   = 2;  /* SENSOR_GYROX */
 180:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].size   = 2;  /* SENSOR_GYROY */
 181:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].size   = 2;  /* SENSOR_GYROZ */
 182:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].size   = 2;  /* SENSOR_MAGX  */
 183:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].size   = 2;  /* SENSOR_MAGY  */
 184:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].size   = 2;  /* SENSOR_MAGZ  */
 185:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].size   = 2;  /* SENSOR_IMUT  */
 186:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 10 ].size   = 4;  /* SENSOR_PRES  */
 187:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 11 ].size   = 4;  /* SENSOR_TEMP  */
 188:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER )
 189:../../../mod/sensor/sensor.c **** 	/* Sensor offsets */
 190:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0  ].offset = 0;  /* SENSOR_PT0  */
 191:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].offset = 4;  /* SENSOR_PT1  */
 192:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].offset = 8;  /* SENSOR_PT2  */
 193:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].offset = 12; /* SENSOR_PT3  */
 194:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].offset = 16; /* SENSOR_PT4  */
 195:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].offset = 20; /* SENSOR_PT5  */
 196:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].offset = 24; /* SENSOR_PT6  */
 197:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].offset = 28; /* SENSOR_PT7  */
 198:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].offset = 36; /* SENSOR_TC   */
 199:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].offset = 32; /* SENSOR_LC   */
 200:../../../mod/sensor/sensor.c **** 
 201:../../../mod/sensor/sensor.c **** 	/* Sensor Sizes   */
 202:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0  ].size   = 4;  /* SENSOR_PT0  */
ARM GAS  /tmp/ccnIi471.s 			page 5


 203:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].size   = 4;  /* SENSOR_PT1  */
 204:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].size   = 4;  /* SENSOR_PT2  */
 205:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].size   = 4;  /* SENSOR_PT3  */
 206:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].size   = 4;  /* SENSOR_PT4  */
 207:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].size   = 4;  /* SENSOR_PT5  */
 208:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].size   = 4;  /* SENSOR_PT6  */
 209:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].size   = 4;  /* SENSOR_PT7  */
 210:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].size   = 4;  /* SENSOR_TC   */
 211:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].size   = 4;  /* SENSOR_LC   */
 212:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 213:../../../mod/sensor/sensor.c **** 	/* Sensor offsets */
 214:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0 ].offset = 0; /* SENSOR_PRES  */
 215:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1 ].offset = 4; /* SENSOR_TEMP  */
 216:../../../mod/sensor/sensor.c **** 
 217:../../../mod/sensor/sensor.c **** 	/* Sensor Sizes   */
 218:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0 ].size   = 4;  /* SENSOR_PRES  */
 219:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1 ].size   = 4;  /* SENSOR_TEMP  */
 220:../../../mod/sensor/sensor.c **** #elif defined( VALVE_CONTROLLER     )
 221:../../../mod/sensor/sensor.c **** 	/* Sensor offsets */
 222:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0 ].offset = 0;  /* SENSOR_ENCO  */
 223:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1 ].offset = 4;  /* SENSOR_ENCF  */
 224:../../../mod/sensor/sensor.c **** 
 225:../../../mod/sensor/sensor.c **** 	/* Sensor sizes */
 226:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 0 ].size   = 4;  /* SENSOR_ENCO */
 227:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1 ].size   = 4;  /* SENSOR_ENCF */
 228:../../../mod/sensor/sensor.c **** #endif
 229:../../../mod/sensor/sensor.c **** 
 230:../../../mod/sensor/sensor.c **** } /* sensor_init */
 231:../../../mod/sensor/sensor.c **** 
 232:../../../mod/sensor/sensor.c **** 
 233:../../../mod/sensor/sensor.c **** /*******************************************************************************
 234:../../../mod/sensor/sensor.c **** *                                                                              *
 235:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
 236:../../../mod/sensor/sensor.c **** * 		sensor_cmd_execute                                                     *
 237:../../../mod/sensor/sensor.c **** *                                                                              *
 238:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
 239:../../../mod/sensor/sensor.c **** *       Executes a sensor subcommand                                           *
 240:../../../mod/sensor/sensor.c **** *                                                                              *
 241:../../../mod/sensor/sensor.c **** *******************************************************************************/
 242:../../../mod/sensor/sensor.c **** SENSOR_STATUS sensor_cmd_execute 
 243:../../../mod/sensor/sensor.c **** 	(
 244:../../../mod/sensor/sensor.c **** 	#ifndef VALVE_CONTROLLER
 245:../../../mod/sensor/sensor.c **** 		uint8_t subcommand 
 246:../../../mod/sensor/sensor.c **** 	#else
 247:../../../mod/sensor/sensor.c **** 		uint8_t    subcommand,   /* SDEC subcommand         */
 248:../../../mod/sensor/sensor.c **** 		CMD_SOURCE cmd_source    /* Serial interface source */
 249:../../../mod/sensor/sensor.c **** 	#endif
 250:../../../mod/sensor/sensor.c ****     )
 251:../../../mod/sensor/sensor.c **** {
 252:../../../mod/sensor/sensor.c **** 
 253:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 254:../../../mod/sensor/sensor.c ****  Local Variables  
 255:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 256:../../../mod/sensor/sensor.c **** SENSOR_STATUS sensor_status;                         /* Status indicating if 
 257:../../../mod/sensor/sensor.c ****                                                        subcommand function 
 258:../../../mod/sensor/sensor.c ****                                                        returned properly      */
 259:../../../mod/sensor/sensor.c **** USB_STATUS    usb_status;                            /* USB return codes      */
ARM GAS  /tmp/ccnIi471.s 			page 6


 260:../../../mod/sensor/sensor.c **** SENSOR_DATA   sensor_data;                           /* Struct with all sensor 
 261:../../../mod/sensor/sensor.c ****                                                         data                  */
 262:../../../mod/sensor/sensor.c **** uint8_t       sensor_data_bytes[ SENSOR_DATA_SIZE ]; /* Byte array with sensor 
 263:../../../mod/sensor/sensor.c ****                                                        readouts               */
 264:../../../mod/sensor/sensor.c **** uint8_t       num_sensor_bytes = SENSOR_DATA_SIZE;   /* Size of data in bytes */
 265:../../../mod/sensor/sensor.c **** uint8_t       num_sensors;                           /* Number of sensors to 
 266:../../../mod/sensor/sensor.c ****                                                         use for polling       */
 267:../../../mod/sensor/sensor.c **** uint8_t       poll_sensors[ SENSOR_MAX_NUM_POLL ];   /* Codes for sensors to
 268:../../../mod/sensor/sensor.c ****                                                         be polled             */
 269:../../../mod/sensor/sensor.c **** uint8_t       sensor_poll_cmd;                       /* Command codes used by 
 270:../../../mod/sensor/sensor.c ****                                                         sensor poll           */
 271:../../../mod/sensor/sensor.c **** #ifdef VALVE_CONTROLLER
 272:../../../mod/sensor/sensor.c **** 	VALVE_STATUS valve_status; /* status codes from valve API */
 273:../../../mod/sensor/sensor.c **** #endif
 274:../../../mod/sensor/sensor.c **** 
 275:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 276:../../../mod/sensor/sensor.c ****  Initializations  
 277:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 278:../../../mod/sensor/sensor.c **** usb_status      = USB_OK;
 279:../../../mod/sensor/sensor.c **** sensor_status   = SENSOR_OK;
 280:../../../mod/sensor/sensor.c **** #ifdef VALVE_CONTROLLER
 281:../../../mod/sensor/sensor.c **** 	valve_status = VALVE_OK;
 282:../../../mod/sensor/sensor.c **** #endif
 283:../../../mod/sensor/sensor.c **** num_sensors     = 0;
 284:../../../mod/sensor/sensor.c **** sensor_poll_cmd = 0;
 285:../../../mod/sensor/sensor.c **** memset( &sensor_data_bytes[0], 0, sizeof( sensor_data_bytes ) );
 286:../../../mod/sensor/sensor.c **** memset( &sensor_data         , 0, sizeof( sensor_data       ) );
 287:../../../mod/sensor/sensor.c **** memset( &poll_sensors[0]     , 0, sizeof( poll_sensors      ) );
 288:../../../mod/sensor/sensor.c **** 
 289:../../../mod/sensor/sensor.c **** 
 290:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 291:../../../mod/sensor/sensor.c ****  Implementation 
 292:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 293:../../../mod/sensor/sensor.c **** switch ( subcommand )
 294:../../../mod/sensor/sensor.c **** 	{
 295:../../../mod/sensor/sensor.c **** 	/*--------------------------------------------------------------------------
 296:../../../mod/sensor/sensor.c **** 	 SENSOR POLL 
 297:../../../mod/sensor/sensor.c **** 	--------------------------------------------------------------------------*/
 298:../../../mod/sensor/sensor.c ****     case SENSOR_POLL_CODE:
 299:../../../mod/sensor/sensor.c **** 		{
 300:../../../mod/sensor/sensor.c **** 		/* Determine the number of sensors to poll */
 301:../../../mod/sensor/sensor.c **** 		#ifndef VALVE_CONTROLLER 
 302:../../../mod/sensor/sensor.c **** 			usb_status = usb_receive( &num_sensors, 
 303:../../../mod/sensor/sensor.c **** 									sizeof( num_sensors ), 
 304:../../../mod/sensor/sensor.c **** 									HAL_DEFAULT_TIMEOUT );
 305:../../../mod/sensor/sensor.c **** 			if ( usb_status != USB_OK )
 306:../../../mod/sensor/sensor.c **** 				{
 307:../../../mod/sensor/sensor.c **** 				return SENSOR_USB_FAIL;
 308:../../../mod/sensor/sensor.c **** 				}
 309:../../../mod/sensor/sensor.c **** 		#else
 310:../../../mod/sensor/sensor.c **** 			if ( cmd_source == CMD_SOURCE_USB )
 311:../../../mod/sensor/sensor.c **** 				{
 312:../../../mod/sensor/sensor.c **** 				usb_status = usb_receive( &num_sensors, 
 313:../../../mod/sensor/sensor.c **** 										sizeof( num_sensors ), 
 314:../../../mod/sensor/sensor.c **** 										HAL_DEFAULT_TIMEOUT );
 315:../../../mod/sensor/sensor.c **** 				if ( usb_status != USB_OK )
 316:../../../mod/sensor/sensor.c **** 					{
ARM GAS  /tmp/ccnIi471.s 			page 7


 317:../../../mod/sensor/sensor.c **** 					return SENSOR_USB_FAIL;
 318:../../../mod/sensor/sensor.c **** 					}
 319:../../../mod/sensor/sensor.c **** 				}
 320:../../../mod/sensor/sensor.c **** 			else
 321:../../../mod/sensor/sensor.c **** 				{
 322:../../../mod/sensor/sensor.c **** 				valve_status = valve_receive( &num_sensors, 
 323:../../../mod/sensor/sensor.c **** 				                              sizeof( num_sensors ), 
 324:../../../mod/sensor/sensor.c **** 											  HAL_DEFAULT_TIMEOUT );
 325:../../../mod/sensor/sensor.c **** 				if ( valve_status != VALVE_OK )
 326:../../../mod/sensor/sensor.c **** 					{
 327:../../../mod/sensor/sensor.c **** 					return SENSOR_VALVE_UART_ERROR;
 328:../../../mod/sensor/sensor.c **** 					}
 329:../../../mod/sensor/sensor.c **** 				}
 330:../../../mod/sensor/sensor.c **** 		#endif /* #ifdef VALVE_CONTROLLER */
 331:../../../mod/sensor/sensor.c **** 
 332:../../../mod/sensor/sensor.c **** 		/* Determine which sensors to poll */
 333:../../../mod/sensor/sensor.c **** 		#ifndef VALVE_CONTROLLER 
 334:../../../mod/sensor/sensor.c **** 			usb_status = usb_receive( &poll_sensors[0],
 335:../../../mod/sensor/sensor.c **** 									num_sensors     , 
 336:../../../mod/sensor/sensor.c **** 									HAL_SENSOR_TIMEOUT );
 337:../../../mod/sensor/sensor.c **** 			if ( usb_status != USB_OK )
 338:../../../mod/sensor/sensor.c **** 				{
 339:../../../mod/sensor/sensor.c **** 				return SENSOR_USB_FAIL;
 340:../../../mod/sensor/sensor.c **** 				}
 341:../../../mod/sensor/sensor.c **** 		#else
 342:../../../mod/sensor/sensor.c **** 			if ( cmd_source == CMD_SOURCE_USB )
 343:../../../mod/sensor/sensor.c **** 				{
 344:../../../mod/sensor/sensor.c **** 				usb_status = usb_receive( &poll_sensors[0],
 345:../../../mod/sensor/sensor.c **** 										num_sensors     , 
 346:../../../mod/sensor/sensor.c **** 										HAL_SENSOR_TIMEOUT );
 347:../../../mod/sensor/sensor.c **** 				if ( usb_status != USB_OK )
 348:../../../mod/sensor/sensor.c **** 					{
 349:../../../mod/sensor/sensor.c **** 					return SENSOR_USB_FAIL;
 350:../../../mod/sensor/sensor.c **** 					}
 351:../../../mod/sensor/sensor.c **** 				}
 352:../../../mod/sensor/sensor.c **** 			else
 353:../../../mod/sensor/sensor.c **** 				{
 354:../../../mod/sensor/sensor.c **** 				valve_status = valve_receive( &poll_sensors[0],
 355:../../../mod/sensor/sensor.c **** 											num_sensors     ,
 356:../../../mod/sensor/sensor.c **** 											HAL_SENSOR_TIMEOUT );
 357:../../../mod/sensor/sensor.c **** 				if ( valve_status != VALVE_OK )
 358:../../../mod/sensor/sensor.c **** 					{
 359:../../../mod/sensor/sensor.c **** 					return SENSOR_VALVE_UART_ERROR;
 360:../../../mod/sensor/sensor.c **** 					}
 361:../../../mod/sensor/sensor.c **** 				}
 362:../../../mod/sensor/sensor.c **** 		#endif /* #ifndef VALVE_CONTROLLER */
 363:../../../mod/sensor/sensor.c **** 
 364:../../../mod/sensor/sensor.c **** 		/* Receive initiating command code  */
 365:../../../mod/sensor/sensor.c **** 		#ifndef VALVE_CONTROLLER
 366:../../../mod/sensor/sensor.c **** 			usb_status = usb_receive( &sensor_poll_cmd,
 367:../../../mod/sensor/sensor.c **** 									sizeof( sensor_poll_cmd ),
 368:../../../mod/sensor/sensor.c **** 									HAL_DEFAULT_TIMEOUT );
 369:../../../mod/sensor/sensor.c **** 			if      ( usb_status      != USB_OK            )
 370:../../../mod/sensor/sensor.c **** 				{
 371:../../../mod/sensor/sensor.c **** 				return SENSOR_USB_FAIL; /* USB error */
 372:../../../mod/sensor/sensor.c **** 				}
 373:../../../mod/sensor/sensor.c **** 			else if ( sensor_poll_cmd != SENSOR_POLL_START )
ARM GAS  /tmp/ccnIi471.s 			page 8


 374:../../../mod/sensor/sensor.c **** 				{
 375:../../../mod/sensor/sensor.c **** 				/* SDEC fails to initiate sensor poll */
 376:../../../mod/sensor/sensor.c **** 				return SENSOR_POLL_FAIL_TO_START;
 377:../../../mod/sensor/sensor.c **** 				}
 378:../../../mod/sensor/sensor.c **** 		#else
 379:../../../mod/sensor/sensor.c **** 			if ( cmd_source == CMD_SOURCE_USB )
 380:../../../mod/sensor/sensor.c **** 				{
 381:../../../mod/sensor/sensor.c **** 				usb_status = usb_receive( &sensor_poll_cmd,
 382:../../../mod/sensor/sensor.c **** 										sizeof( sensor_poll_cmd ),
 383:../../../mod/sensor/sensor.c **** 										HAL_DEFAULT_TIMEOUT );
 384:../../../mod/sensor/sensor.c **** 				if      ( usb_status      != USB_OK            )
 385:../../../mod/sensor/sensor.c **** 					{
 386:../../../mod/sensor/sensor.c **** 					return SENSOR_USB_FAIL; /* USB error */
 387:../../../mod/sensor/sensor.c **** 					}
 388:../../../mod/sensor/sensor.c **** 				else if ( sensor_poll_cmd != SENSOR_POLL_START )
 389:../../../mod/sensor/sensor.c **** 					{
 390:../../../mod/sensor/sensor.c **** 					/* SDEC fails to initiate sensor poll */
 391:../../../mod/sensor/sensor.c **** 					return SENSOR_POLL_FAIL_TO_START;
 392:../../../mod/sensor/sensor.c **** 					}
 393:../../../mod/sensor/sensor.c **** 				}
 394:../../../mod/sensor/sensor.c **** 			else
 395:../../../mod/sensor/sensor.c **** 				{
 396:../../../mod/sensor/sensor.c **** 				valve_status = valve_receive( &sensor_poll_cmd, 
 397:../../../mod/sensor/sensor.c **** 											sizeof( sensor_poll_cmd ), 
 398:../../../mod/sensor/sensor.c **** 											HAL_DEFAULT_TIMEOUT );
 399:../../../mod/sensor/sensor.c **** 				if ( valve_status != VALVE_OK )
 400:../../../mod/sensor/sensor.c **** 					{
 401:../../../mod/sensor/sensor.c **** 					return SENSOR_VALVE_UART_ERROR;
 402:../../../mod/sensor/sensor.c **** 					}
 403:../../../mod/sensor/sensor.c **** 				else if ( sensor_poll_cmd != SENSOR_POLL_START )
 404:../../../mod/sensor/sensor.c **** 					{
 405:../../../mod/sensor/sensor.c **** 					return SENSOR_POLL_FAIL_TO_START;
 406:../../../mod/sensor/sensor.c **** 					}
 407:../../../mod/sensor/sensor.c **** 				}
 408:../../../mod/sensor/sensor.c **** 		#endif
 409:../../../mod/sensor/sensor.c **** 
 410:../../../mod/sensor/sensor.c **** 		/* Start polling sensors */
 411:../../../mod/sensor/sensor.c **** 		while ( sensor_poll_cmd != SENSOR_POLL_STOP )
 412:../../../mod/sensor/sensor.c **** 			{
 413:../../../mod/sensor/sensor.c **** 			/* Get command code */
 414:../../../mod/sensor/sensor.c **** 			#ifndef VALVE_CONTROLLER 
 415:../../../mod/sensor/sensor.c **** 				usb_status = usb_receive( &sensor_poll_cmd         ,
 416:../../../mod/sensor/sensor.c **** 										sizeof( sensor_poll_cmd ),
 417:../../../mod/sensor/sensor.c **** 										HAL_DEFAULT_TIMEOUT );
 418:../../../mod/sensor/sensor.c **** 				if ( usb_status != USB_OK ) 
 419:../../../mod/sensor/sensor.c **** 					{
 420:../../../mod/sensor/sensor.c **** 					return SENSOR_USB_FAIL;
 421:../../../mod/sensor/sensor.c **** 					}
 422:../../../mod/sensor/sensor.c **** 			#else
 423:../../../mod/sensor/sensor.c **** 				if ( cmd_source == CMD_SOURCE_USB )
 424:../../../mod/sensor/sensor.c **** 					{
 425:../../../mod/sensor/sensor.c **** 					usb_status = usb_receive( &sensor_poll_cmd         ,
 426:../../../mod/sensor/sensor.c **** 											sizeof( sensor_poll_cmd ),
 427:../../../mod/sensor/sensor.c **** 											HAL_DEFAULT_TIMEOUT );
 428:../../../mod/sensor/sensor.c **** 					if ( usb_status != USB_OK ) 
 429:../../../mod/sensor/sensor.c **** 						{
 430:../../../mod/sensor/sensor.c **** 						return SENSOR_USB_FAIL;
ARM GAS  /tmp/ccnIi471.s 			page 9


 431:../../../mod/sensor/sensor.c **** 						}
 432:../../../mod/sensor/sensor.c **** 					}
 433:../../../mod/sensor/sensor.c **** 				else
 434:../../../mod/sensor/sensor.c **** 					{
 435:../../../mod/sensor/sensor.c **** 					valve_status = valve_receive( &sensor_poll_cmd         , 
 436:../../../mod/sensor/sensor.c **** 					                              sizeof( sensor_poll_cmd ), 
 437:../../../mod/sensor/sensor.c **** 												  HAL_DEFAULT_TIMEOUT );
 438:../../../mod/sensor/sensor.c **** 					if ( valve_status != VALVE_OK )
 439:../../../mod/sensor/sensor.c **** 						{
 440:../../../mod/sensor/sensor.c **** 						return SENSOR_VALVE_UART_ERROR;
 441:../../../mod/sensor/sensor.c **** 						}
 442:../../../mod/sensor/sensor.c **** 					}
 443:../../../mod/sensor/sensor.c **** 			#endif /* #ifndef VALVE_CONTROLLER */
 444:../../../mod/sensor/sensor.c **** 			
 445:../../../mod/sensor/sensor.c **** 			/* Execute command */
 446:../../../mod/sensor/sensor.c **** 			switch ( sensor_poll_cmd )
 447:../../../mod/sensor/sensor.c **** 				{
 448:../../../mod/sensor/sensor.c **** 
 449:../../../mod/sensor/sensor.c **** 				/* Poll Sensors */
 450:../../../mod/sensor/sensor.c **** 				case SENSOR_POLL_REQUEST:
 451:../../../mod/sensor/sensor.c **** 					{
 452:../../../mod/sensor/sensor.c **** 					sensor_status = sensor_poll( &sensor_data    , 
 453:../../../mod/sensor/sensor.c **** 												 &poll_sensors[0],
 454:../../../mod/sensor/sensor.c **** 												 num_sensors );
 455:../../../mod/sensor/sensor.c **** 					if ( sensor_status != SENSOR_OK )
 456:../../../mod/sensor/sensor.c **** 						{
 457:../../../mod/sensor/sensor.c **** 						return SENSOR_POLL_FAIL;
 458:../../../mod/sensor/sensor.c **** 						}
 459:../../../mod/sensor/sensor.c **** 					else
 460:../../../mod/sensor/sensor.c **** 						{
 461:../../../mod/sensor/sensor.c **** 						/* Copy over sensor data into buffer */
 462:../../../mod/sensor/sensor.c **** 						extract_sensor_bytes( &sensor_data, 
 463:../../../mod/sensor/sensor.c **** 						                      &poll_sensors[0],
 464:../../../mod/sensor/sensor.c **** 											  num_sensors     ,
 465:../../../mod/sensor/sensor.c **** 											  &sensor_data_bytes[0],
 466:../../../mod/sensor/sensor.c **** 											  &num_sensor_bytes );
 467:../../../mod/sensor/sensor.c **** 
 468:../../../mod/sensor/sensor.c **** 						/* Transmit sensor bytes back to SDEC */
 469:../../../mod/sensor/sensor.c **** 						usb_transmit( &sensor_data_bytes[0],
 470:../../../mod/sensor/sensor.c **** 						              num_sensor_bytes     ,
 471:../../../mod/sensor/sensor.c **** 									  HAL_SENSOR_TIMEOUT );
 472:../../../mod/sensor/sensor.c **** 								
 473:../../../mod/sensor/sensor.c **** 						break;
 474:../../../mod/sensor/sensor.c **** 						}
 475:../../../mod/sensor/sensor.c **** 					} /* case SENSOR_POLL_REQUEST */
 476:../../../mod/sensor/sensor.c **** 
 477:../../../mod/sensor/sensor.c **** 				/* STOP Executtion */
 478:../../../mod/sensor/sensor.c **** 				case SENSOR_POLL_STOP:
 479:../../../mod/sensor/sensor.c **** 					{
 480:../../../mod/sensor/sensor.c **** 					/* Do nothing */
 481:../../../mod/sensor/sensor.c **** 					break;
 482:../../../mod/sensor/sensor.c **** 					} /* case SENSOR_POLL_STOP */
 483:../../../mod/sensor/sensor.c **** 
 484:../../../mod/sensor/sensor.c **** 				/* WAIT, Pause execution */
 485:../../../mod/sensor/sensor.c **** 				case SENSOR_POLL_WAIT:
 486:../../../mod/sensor/sensor.c **** 					{
 487:../../../mod/sensor/sensor.c **** 					/* Poll USB port until resume signal arrives */
ARM GAS  /tmp/ccnIi471.s 			page 10


 488:../../../mod/sensor/sensor.c **** 					while( sensor_poll_cmd != SENSOR_POLL_RESUME )
 489:../../../mod/sensor/sensor.c **** 						{
 490:../../../mod/sensor/sensor.c **** 						#ifndef VALVE_CONTROLLER
 491:../../../mod/sensor/sensor.c **** 							usb_receive( &sensor_poll_cmd, 
 492:../../../mod/sensor/sensor.c **** 										sizeof( sensor_poll_cmd ),
 493:../../../mod/sensor/sensor.c **** 										HAL_DEFAULT_TIMEOUT );
 494:../../../mod/sensor/sensor.c **** 						#else
 495:../../../mod/sensor/sensor.c **** 							if ( cmd_source == CMD_SOURCE_USB )
 496:../../../mod/sensor/sensor.c **** 								{
 497:../../../mod/sensor/sensor.c **** 								usb_receive( &sensor_poll_cmd, 
 498:../../../mod/sensor/sensor.c **** 											sizeof( sensor_poll_cmd ),
 499:../../../mod/sensor/sensor.c **** 											HAL_DEFAULT_TIMEOUT );
 500:../../../mod/sensor/sensor.c **** 								}
 501:../../../mod/sensor/sensor.c **** 							else
 502:../../../mod/sensor/sensor.c **** 								{
 503:../../../mod/sensor/sensor.c **** 								valve_receive( &sensor_poll_cmd         , 
 504:../../../mod/sensor/sensor.c **** 								               sizeof( sensor_poll_cmd ), 
 505:../../../mod/sensor/sensor.c **** 											   HAL_DEFAULT_TIMEOUT );
 506:../../../mod/sensor/sensor.c **** 								}
 507:../../../mod/sensor/sensor.c **** 						#endif
 508:../../../mod/sensor/sensor.c **** 						}
 509:../../../mod/sensor/sensor.c **** 					break;
 510:../../../mod/sensor/sensor.c **** 					} /* case SENSOR_POLL_WAIT */
 511:../../../mod/sensor/sensor.c **** 
 512:../../../mod/sensor/sensor.c **** 				/* Erroneous Command*/
 513:../../../mod/sensor/sensor.c **** 				default:
 514:../../../mod/sensor/sensor.c **** 					{
 515:../../../mod/sensor/sensor.c **** 					return SENSOR_POLL_UNRECOGNIZED_CMD;
 516:../../../mod/sensor/sensor.c **** 					}
 517:../../../mod/sensor/sensor.c **** 				} /* switch( sensor_poll_cmd ) */
 518:../../../mod/sensor/sensor.c **** 
 519:../../../mod/sensor/sensor.c **** 			} /* while( sensor_poll_cmd != SENSOR_POLL_STOP ) */
 520:../../../mod/sensor/sensor.c **** 		
 521:../../../mod/sensor/sensor.c **** 		return sensor_status ;
 522:../../../mod/sensor/sensor.c ****         } /* SENSOR_POLL_CODE */ 
 523:../../../mod/sensor/sensor.c **** 
 524:../../../mod/sensor/sensor.c **** 	/*--------------------------------------------------------------------------
 525:../../../mod/sensor/sensor.c **** 	 SENSOR DUMP 
 526:../../../mod/sensor/sensor.c **** 	--------------------------------------------------------------------------*/
 527:../../../mod/sensor/sensor.c **** 	case SENSOR_DUMP_CODE: 
 528:../../../mod/sensor/sensor.c **** 		{
 529:../../../mod/sensor/sensor.c **** 		/* Tell the PC how many bytes to expect */
 530:../../../mod/sensor/sensor.c **** 		#ifndef VALVE_CONTROLLER 
 531:../../../mod/sensor/sensor.c **** 			usb_transmit( &num_sensor_bytes,
 532:../../../mod/sensor/sensor.c **** 						sizeof( num_sensor_bytes ), 
 533:../../../mod/sensor/sensor.c **** 						HAL_DEFAULT_TIMEOUT );
 534:../../../mod/sensor/sensor.c **** 		#else
 535:../../../mod/sensor/sensor.c **** 			if ( cmd_source == CMD_SOURCE_USB )
 536:../../../mod/sensor/sensor.c **** 				{
 537:../../../mod/sensor/sensor.c **** 				usb_transmit( &num_sensor_bytes,
 538:../../../mod/sensor/sensor.c **** 							sizeof( num_sensor_bytes ), 
 539:../../../mod/sensor/sensor.c **** 							HAL_DEFAULT_TIMEOUT );
 540:../../../mod/sensor/sensor.c **** 				}
 541:../../../mod/sensor/sensor.c **** 			else
 542:../../../mod/sensor/sensor.c **** 				{
 543:../../../mod/sensor/sensor.c **** 				valve_transmit( &num_sensor_bytes, 
 544:../../../mod/sensor/sensor.c **** 				                sizeof( num_sensor_bytes ), 
ARM GAS  /tmp/ccnIi471.s 			page 11


 545:../../../mod/sensor/sensor.c **** 								HAL_DEFAULT_TIMEOUT );
 546:../../../mod/sensor/sensor.c **** 				}
 547:../../../mod/sensor/sensor.c **** 		#endif /* #ifndef VALVE_CONTROLLER */
 548:../../../mod/sensor/sensor.c **** 
 549:../../../mod/sensor/sensor.c **** 		/* Get the sensor readings */
 550:../../../mod/sensor/sensor.c **** 	    sensor_status = sensor_dump( &sensor_data );	
 551:../../../mod/sensor/sensor.c **** 
 552:../../../mod/sensor/sensor.c **** 		/* Convert to byte array */
 553:../../../mod/sensor/sensor.c **** 		memcpy( &(sensor_data_bytes[0]), &sensor_data, sizeof( sensor_data ) );
 554:../../../mod/sensor/sensor.c **** 
 555:../../../mod/sensor/sensor.c **** 		/* Transmit sensor readings to PC */
 556:../../../mod/sensor/sensor.c **** 		if ( sensor_status == SENSOR_OK )
 557:../../../mod/sensor/sensor.c **** 			{
 558:../../../mod/sensor/sensor.c **** 			#ifndef VALVE_CONTROLLER
 559:../../../mod/sensor/sensor.c **** 				usb_transmit( &sensor_data_bytes[0]      , 
 560:../../../mod/sensor/sensor.c **** 							sizeof( sensor_data_bytes ), 
 561:../../../mod/sensor/sensor.c **** 							HAL_SENSOR_TIMEOUT );
 562:../../../mod/sensor/sensor.c **** 			#else
 563:../../../mod/sensor/sensor.c **** 				if ( cmd_source == CMD_SOURCE_USB )
 564:../../../mod/sensor/sensor.c **** 					{
 565:../../../mod/sensor/sensor.c **** 					usb_transmit( &sensor_data_bytes[0]      , 
 566:../../../mod/sensor/sensor.c **** 								sizeof( sensor_data_bytes ), 
 567:../../../mod/sensor/sensor.c **** 								HAL_SENSOR_TIMEOUT );
 568:../../../mod/sensor/sensor.c **** 					}
 569:../../../mod/sensor/sensor.c **** 				else
 570:../../../mod/sensor/sensor.c **** 					{
 571:../../../mod/sensor/sensor.c **** 					valve_transmit( &sensor_data_bytes[0],
 572:../../../mod/sensor/sensor.c **** 					                sizeof( sensor_data_bytes ), 
 573:../../../mod/sensor/sensor.c **** 									HAL_SENSOR_TIMEOUT );
 574:../../../mod/sensor/sensor.c **** 					}
 575:../../../mod/sensor/sensor.c **** 			#endif /* #ifndef VALVE_CONTROLLER */
 576:../../../mod/sensor/sensor.c **** 			return ( sensor_status );
 577:../../../mod/sensor/sensor.c ****             }
 578:../../../mod/sensor/sensor.c **** 		else
 579:../../../mod/sensor/sensor.c **** 			{
 580:../../../mod/sensor/sensor.c **** 			/* Sensor readings not recieved */
 581:../../../mod/sensor/sensor.c **** 			return( SENSOR_FAIL );
 582:../../../mod/sensor/sensor.c ****             }
 583:../../../mod/sensor/sensor.c ****         } /* SENSOR_DUMP_CODE */
 584:../../../mod/sensor/sensor.c **** 
 585:../../../mod/sensor/sensor.c **** 	/*--------------------------------------------------------------------------
 586:../../../mod/sensor/sensor.c **** 	 UNRECOGNIZED SUBCOMMAND 
 587:../../../mod/sensor/sensor.c **** 	--------------------------------------------------------------------------*/
 588:../../../mod/sensor/sensor.c **** 	default:
 589:../../../mod/sensor/sensor.c **** 		{
 590:../../../mod/sensor/sensor.c **** 		return ( SENSOR_UNRECOGNIZED_OP );
 591:../../../mod/sensor/sensor.c ****         }
 592:../../../mod/sensor/sensor.c ****     }
 593:../../../mod/sensor/sensor.c **** 
 594:../../../mod/sensor/sensor.c **** } /* sensor_cmd_execute */
 595:../../../mod/sensor/sensor.c **** 
 596:../../../mod/sensor/sensor.c **** 
 597:../../../mod/sensor/sensor.c **** /*******************************************************************************
 598:../../../mod/sensor/sensor.c **** *                                                                              *
 599:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
 600:../../../mod/sensor/sensor.c **** * 		sensor_dump                                                            *
 601:../../../mod/sensor/sensor.c **** *                                                                              *
ARM GAS  /tmp/ccnIi471.s 			page 12


 602:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
 603:../../../mod/sensor/sensor.c **** *       reads from all sensors and fill in the sensor data structure           *
 604:../../../mod/sensor/sensor.c **** *                                                                              *
 605:../../../mod/sensor/sensor.c **** *******************************************************************************/
 606:../../../mod/sensor/sensor.c **** SENSOR_STATUS sensor_dump 
 607:../../../mod/sensor/sensor.c **** 	(
 608:../../../mod/sensor/sensor.c ****     SENSOR_DATA*        sensor_data_ptr /* Pointer to the sensor data struct should 
 609:../../../mod/sensor/sensor.c ****                                         be written */ 
 610:../../../mod/sensor/sensor.c ****     )
 611:../../../mod/sensor/sensor.c **** {
 612:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 613:../../../mod/sensor/sensor.c ****  Local variables 
 614:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 615:../../../mod/sensor/sensor.c **** #if   defined( FLIGHT_COMPUTER      )
 616:../../../mod/sensor/sensor.c **** 	IMU_STATUS      accel_status;           /* IMU sensor status codes     */       
 617:../../../mod/sensor/sensor.c **** 	IMU_STATUS      gyro_status;
 618:../../../mod/sensor/sensor.c **** 	IMU_STATUS      mag_status; 
 619:../../../mod/sensor/sensor.c **** 	BARO_STATUS     press_status;           /* Baro Sensor status codes    */
 620:../../../mod/sensor/sensor.c **** 	BARO_STATUS     temp_status;
 621:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER    )
 622:../../../mod/sensor/sensor.c **** 	#ifdef L0002_REV4
 623:../../../mod/sensor/sensor.c **** 		PRESSURE_STATUS pt_status;          /* Pressure status codes       */
 624:../../../mod/sensor/sensor.c **** 		THERMO_STATUS   tc_status;          /* Thermocouple status codes   */
 625:../../../mod/sensor/sensor.c **** 		LOADCELL_STATUS lc_status;          /* Loadcell status codes       */
 626:../../../mod/sensor/sensor.c **** 	#elif defined( L0002_REV5 )
 627:../../../mod/sensor/sensor.c **** 		SENSOR_STATUS   sensor_status;      /* Sensor module return codes  */
 628:../../../mod/sensor/sensor.c **** 		THERMO_STATUS   tc_status;          /* Thermocouple status codes   */
 629:../../../mod/sensor/sensor.c **** 	#endif
 630:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 631:../../../mod/sensor/sensor.c **** 	BARO_STATUS     press_status;           /* Baro Sensor status codes    */
 632:../../../mod/sensor/sensor.c **** 	BARO_STATUS     temp_status;
 633:../../../mod/sensor/sensor.c **** #endif
 634:../../../mod/sensor/sensor.c **** 
 635:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 636:../../../mod/sensor/sensor.c ****  Initializations 
 637:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 638:../../../mod/sensor/sensor.c **** #if   defined( FLIGHT_COMPUTER      )
 639:../../../mod/sensor/sensor.c **** 	accel_status = IMU_OK;         
 640:../../../mod/sensor/sensor.c **** 	gyro_status  = IMU_OK;
 641:../../../mod/sensor/sensor.c **** 	mag_status   = IMU_OK; 
 642:../../../mod/sensor/sensor.c **** 	press_status = BARO_OK;           
 643:../../../mod/sensor/sensor.c **** 	temp_status  = BARO_OK;
 644:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER    )
 645:../../../mod/sensor/sensor.c **** 	#ifdef L0002_REV4
 646:../../../mod/sensor/sensor.c **** 		pt_status    = PRESSURE_OK;          
 647:../../../mod/sensor/sensor.c **** 		tc_status    = THERMO_OK;        
 648:../../../mod/sensor/sensor.c **** 	#elif defined( L0002_REV5 )
 649:../../../mod/sensor/sensor.c **** 		sensor_status = SENSOR_OK;
 650:../../../mod/sensor/sensor.c **** 		tc_status     = THERMO_OK;
 651:../../../mod/sensor/sensor.c **** 	#endif
 652:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 653:../../../mod/sensor/sensor.c **** 	press_status = BARO_OK;           
 654:../../../mod/sensor/sensor.c **** 	temp_status  = BARO_OK;
 655:../../../mod/sensor/sensor.c **** #endif
 656:../../../mod/sensor/sensor.c **** 
 657:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 658:../../../mod/sensor/sensor.c ****  Call sensor API functions 
ARM GAS  /tmp/ccnIi471.s 			page 13


 659:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 660:../../../mod/sensor/sensor.c **** 
 661:../../../mod/sensor/sensor.c **** /* Poll Sensors  */
 662:../../../mod/sensor/sensor.c **** #if defined( FLIGHT_COMPUTER )
 663:../../../mod/sensor/sensor.c **** 	/* IMU sensors */
 664:../../../mod/sensor/sensor.c **** 	accel_status = imu_get_accel_xyz( &(sensor_data_ptr->imu_data) ); 
 665:../../../mod/sensor/sensor.c **** 	gyro_status  = imu_get_gyro_xyz ( &(sensor_data_ptr->imu_data) );
 666:../../../mod/sensor/sensor.c **** 	mag_status   = imu_get_mag_xyz  ( &(sensor_data_ptr->imu_data) );
 667:../../../mod/sensor/sensor.c **** 	sensor_data_ptr -> imu_data.temp = 0;     // Figure out what to do with this 
 668:../../../mod/sensor/sensor.c **** 											  // readout, temporarily being used 
 669:../../../mod/sensor/sensor.c **** 											  // as struct padding
 670:../../../mod/sensor/sensor.c **** 
 671:../../../mod/sensor/sensor.c **** 	/* Baro sensors */
 672:../../../mod/sensor/sensor.c **** 	temp_status  = baro_get_temp    ( &(sensor_data_ptr -> baro_temp     ) );
 673:../../../mod/sensor/sensor.c **** 	press_status = baro_get_pressure( &(sensor_data_ptr -> baro_pressure ) );
 674:../../../mod/sensor/sensor.c **** 
 675:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER )
 676:../../../mod/sensor/sensor.c **** 	#ifndef L0002_REV5
 677:../../../mod/sensor/sensor.c **** 	/* Pressure Transducers */
 678:../../../mod/sensor/sensor.c **** 	pt_status    = pressure_poll_pts( &( sensor_data_ptr -> pt_pressures[0] ) );
 679:../../../mod/sensor/sensor.c **** 
 680:../../../mod/sensor/sensor.c **** 	/* Load cell */
 681:../../../mod/sensor/sensor.c **** 	lc_status    = loadcell_get_reading( &( sensor_data_ptr -> load_cell_force ) );
 682:../../../mod/sensor/sensor.c **** 	#else
 683:../../../mod/sensor/sensor.c **** 	/* PTs and Load Cell */
 684:../../../mod/sensor/sensor.c **** 	sensor_status = sensor_adc_burst_read( sensor_data_ptr );
 685:../../../mod/sensor/sensor.c **** 	#endif /* #ifndef L0002_REV5 */
 686:../../../mod/sensor/sensor.c **** 
 687:../../../mod/sensor/sensor.c **** 	/* Thermocouple */
 688:../../../mod/sensor/sensor.c **** //	tc_status    = temp_get_temp( &( sensor_data_ptr -> tc_temp ), 
 689:../../../mod/sensor/sensor.c **** 	//                              THERMO_HOT_JUNCTION );
 690:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 691:../../../mod/sensor/sensor.c **** 	/* Baro sensors */
 692:../../../mod/sensor/sensor.c **** 	temp_status  = baro_get_temp    ( &(sensor_data_ptr -> baro_temp     ) );
 693:../../../mod/sensor/sensor.c **** 	press_status = baro_get_pressure( &(sensor_data_ptr -> baro_pressure ) );
 694:../../../mod/sensor/sensor.c **** 
 695:../../../mod/sensor/sensor.c **** #elif defined( VALVE_CONTROLLER     )
 696:../../../mod/sensor/sensor.c **** 	/* Main Valve encoders */
 697:../../../mod/sensor/sensor.c **** 	sensor_data_ptr -> lox_valve_pos  = valve_get_ox_valve_pos();
 698:../../../mod/sensor/sensor.c **** 	sensor_data_ptr -> fuel_valve_pos = valve_get_fuel_valve_pos();
 699:../../../mod/sensor/sensor.c **** #endif
 700:../../../mod/sensor/sensor.c **** 
 701:../../../mod/sensor/sensor.c **** 
 702:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 703:../../../mod/sensor/sensor.c ****  Set command status from sensor API returns 
 704:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 705:../../../mod/sensor/sensor.c **** #if defined( FLIGHT_COMPUTER )
 706:../../../mod/sensor/sensor.c **** 	if      ( accel_status != IMU_OK )
 707:../../../mod/sensor/sensor.c **** 		{
 708:../../../mod/sensor/sensor.c **** 		return SENSOR_ACCEL_ERROR;
 709:../../../mod/sensor/sensor.c **** 		}
 710:../../../mod/sensor/sensor.c **** 	else if ( gyro_status  != IMU_OK )
 711:../../../mod/sensor/sensor.c **** 		{
 712:../../../mod/sensor/sensor.c **** 		return SENSOR_GYRO_ERROR;
 713:../../../mod/sensor/sensor.c **** 		}
 714:../../../mod/sensor/sensor.c **** 	else if ( mag_status   != IMU_OK )
 715:../../../mod/sensor/sensor.c **** 		{
ARM GAS  /tmp/ccnIi471.s 			page 14


 716:../../../mod/sensor/sensor.c **** 		return SENSOR_MAG_ERROR;	
 717:../../../mod/sensor/sensor.c **** 		}
 718:../../../mod/sensor/sensor.c **** 	else if ( press_status != BARO_OK ||
 719:../../../mod/sensor/sensor.c **** 			temp_status  != BARO_OK  )
 720:../../../mod/sensor/sensor.c **** 		{
 721:../../../mod/sensor/sensor.c **** 		return SENSOR_BARO_ERROR;
 722:../../../mod/sensor/sensor.c **** 		}
 723:../../../mod/sensor/sensor.c **** 	else
 724:../../../mod/sensor/sensor.c **** 		{
 725:../../../mod/sensor/sensor.c **** 		return SENSOR_OK;
 726:../../../mod/sensor/sensor.c **** 		}
 727:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER )
 728:../../../mod/sensor/sensor.c **** 	#ifdef L0002_REV4
 729:../../../mod/sensor/sensor.c **** 		if      ( pt_status != PRESSURE_OK )
 730:../../../mod/sensor/sensor.c **** 			{
 731:../../../mod/sensor/sensor.c **** 			return SENSOR_PT_ERROR;
 732:../../../mod/sensor/sensor.c **** 			}
 733:../../../mod/sensor/sensor.c **** 		else if ( tc_status != THERMO_OK   )
 734:../../../mod/sensor/sensor.c **** 			{
 735:../../../mod/sensor/sensor.c **** 			return SENSOR_TC_ERROR;
 736:../../../mod/sensor/sensor.c **** 			}
 737:../../../mod/sensor/sensor.c **** 		else if ( lc_status != LOADCELL_OK )
 738:../../../mod/sensor/sensor.c **** 			{
 739:../../../mod/sensor/sensor.c **** 			return SENSOR_LC_ERROR;
 740:../../../mod/sensor/sensor.c **** 			}
 741:../../../mod/sensor/sensor.c **** 		else
 742:../../../mod/sensor/sensor.c **** 			{
 743:../../../mod/sensor/sensor.c **** 			return SENSOR_OK;
 744:../../../mod/sensor/sensor.c **** 			}
 745:../../../mod/sensor/sensor.c **** 	#elif defined( L0002_REV5 )
 746:../../../mod/sensor/sensor.c **** 		if ( sensor_status != SENSOR_OK )
 747:../../../mod/sensor/sensor.c **** 			{
 748:../../../mod/sensor/sensor.c **** 			return sensor_status;
 749:../../../mod/sensor/sensor.c **** 			}
 750:../../../mod/sensor/sensor.c **** 		else if ( tc_status != THERMO_OK )
 751:../../../mod/sensor/sensor.c **** 			{
 752:../../../mod/sensor/sensor.c **** 			return SENSOR_TC_ERROR;
 753:../../../mod/sensor/sensor.c **** 			}
 754:../../../mod/sensor/sensor.c **** 		else
 755:../../../mod/sensor/sensor.c **** 			{
 756:../../../mod/sensor/sensor.c **** 			return SENSOR_OK;
 757:../../../mod/sensor/sensor.c **** 			}
 758:../../../mod/sensor/sensor.c **** 	#endif
 759:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 760:../../../mod/sensor/sensor.c **** 	if ( press_status != BARO_OK ||
 761:../../../mod/sensor/sensor.c **** 		 temp_status  != BARO_OK  )
 762:../../../mod/sensor/sensor.c **** 		{
 763:../../../mod/sensor/sensor.c **** 		return SENSOR_BARO_ERROR;
 764:../../../mod/sensor/sensor.c **** 		}
 765:../../../mod/sensor/sensor.c **** 	else
 766:../../../mod/sensor/sensor.c **** 		{
 767:../../../mod/sensor/sensor.c **** 		return SENSOR_OK;
 768:../../../mod/sensor/sensor.c **** 		}
 769:../../../mod/sensor/sensor.c **** #elif defined( VALVE_CONTROLLER     )
 770:../../../mod/sensor/sensor.c **** 	return SENSOR_OK;
 771:../../../mod/sensor/sensor.c **** #endif /* #elif defined( ENGINE_CONTROLLER )*/
 772:../../../mod/sensor/sensor.c **** 
ARM GAS  /tmp/ccnIi471.s 			page 15


 773:../../../mod/sensor/sensor.c **** } /* sensor_dump */
 774:../../../mod/sensor/sensor.c **** 
 775:../../../mod/sensor/sensor.c **** 
 776:../../../mod/sensor/sensor.c **** /*******************************************************************************
 777:../../../mod/sensor/sensor.c **** *                                                                              *
 778:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
 779:../../../mod/sensor/sensor.c **** * 		sensor_poll                                                            *
 780:../../../mod/sensor/sensor.c **** *                                                                              *
 781:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
 782:../../../mod/sensor/sensor.c **** *       Poll specific sensors on the board                                     *
 783:../../../mod/sensor/sensor.c **** *                                                                              *
 784:../../../mod/sensor/sensor.c **** *******************************************************************************/
 785:../../../mod/sensor/sensor.c **** SENSOR_STATUS sensor_poll
 786:../../../mod/sensor/sensor.c **** 	(
 787:../../../mod/sensor/sensor.c **** 	SENSOR_DATA* sensor_data_ptr, /* Data Export target               */
 788:../../../mod/sensor/sensor.c **** 	SENSOR_ID*   sensor_ids_ptr , /* Array containing sensor IDS      */
 789:../../../mod/sensor/sensor.c **** 	uint8_t      num_sensors      /* Number of sensors to poll        */
 790:../../../mod/sensor/sensor.c **** 	)
 791:../../../mod/sensor/sensor.c **** {
 792:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 793:../../../mod/sensor/sensor.c ****  Local Variables  
 794:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 795:../../../mod/sensor/sensor.c **** SENSOR_ID  sensor_id;        /* ID of sensor currently being polled */
 796:../../../mod/sensor/sensor.c **** SENSOR_ID* sensor_id_ptr;    /* Pointer to sensor id                */
 797:../../../mod/sensor/sensor.c **** 
 798:../../../mod/sensor/sensor.c **** /* Module return codes */
 799:../../../mod/sensor/sensor.c **** #if   defined( FLIGHT_COMPUTER   )
 800:../../../mod/sensor/sensor.c **** 	IMU_STATUS      imu_status;      /* IMU Module return codes   */ 
 801:../../../mod/sensor/sensor.c **** 	BARO_STATUS     baro_status;     /* Baro module return codes  */
 802:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER )
 803:../../../mod/sensor/sensor.c **** 	THERMO_STATUS   thermo_status;   /* Thermocouple return codes */
 804:../../../mod/sensor/sensor.c **** 	LOADCELL_STATUS lc_status;       /* Loadcell return codes     */
 805:../../../mod/sensor/sensor.c **** 	PRESSURE_STATUS pt_status;       /* PT return codes           */
 806:../../../mod/sensor/sensor.c **** 	#ifdef L0002_REV5
 807:../../../mod/sensor/sensor.c **** 	SENSOR_STATUS   sensor_status;   /* Sensor return codes       */
 808:../../../mod/sensor/sensor.c **** 	#endif
 809:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 810:../../../mod/sensor/sensor.c **** 	BARO_STATUS     baro_status;     /* Baro module return codes  */
 811:../../../mod/sensor/sensor.c **** #endif
 812:../../../mod/sensor/sensor.c **** 
 813:../../../mod/sensor/sensor.c **** /* Sensor poll memory to prevent multiple calls to same API function */
 814:../../../mod/sensor/sensor.c **** #if defined( FLIGHT_COMPUTER )
 815:../../../mod/sensor/sensor.c **** 	bool imu_accel_read;
 816:../../../mod/sensor/sensor.c **** 	bool imu_gyro_read;
 817:../../../mod/sensor/sensor.c **** 	bool imu_mag_read;
 818:../../../mod/sensor/sensor.c **** #endif
 819:../../../mod/sensor/sensor.c **** 
 820:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 821:../../../mod/sensor/sensor.c ****  Initializations 
 822:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 823:../../../mod/sensor/sensor.c **** sensor_id_ptr     = sensor_ids_ptr;
 824:../../../mod/sensor/sensor.c **** sensor_id         = *(sensor_id_ptr   );
 825:../../../mod/sensor/sensor.c **** 
 826:../../../mod/sensor/sensor.c **** /* Module return codes */
 827:../../../mod/sensor/sensor.c **** #if   defined( FLIGHT_COMPUTER   )
 828:../../../mod/sensor/sensor.c **** 	imu_status    = IMU_OK;
 829:../../../mod/sensor/sensor.c **** 	baro_status   = BARO_OK;
ARM GAS  /tmp/ccnIi471.s 			page 16


 830:../../../mod/sensor/sensor.c **** #elif defined( ENGINE_CONTROLLER )
 831:../../../mod/sensor/sensor.c **** 	thermo_status = THERMO_OK;
 832:../../../mod/sensor/sensor.c **** 	lc_status     = LOADCELL_OK;
 833:../../../mod/sensor/sensor.c **** 	pt_status     = PRESSURE_OK;
 834:../../../mod/sensor/sensor.c **** 	#ifdef L0002_REV5
 835:../../../mod/sensor/sensor.c **** 	sensor_status = SENSOR_OK;
 836:../../../mod/sensor/sensor.c **** 	#endif
 837:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 838:../../../mod/sensor/sensor.c **** 	baro_status   = BARO_OK;
 839:../../../mod/sensor/sensor.c **** #endif
 840:../../../mod/sensor/sensor.c **** 
 841:../../../mod/sensor/sensor.c **** /* Sensor poll memory */
 842:../../../mod/sensor/sensor.c **** #if defined( FLIGHT_COMPUTER )
 843:../../../mod/sensor/sensor.c **** 	imu_accel_read = false;
 844:../../../mod/sensor/sensor.c **** 	imu_gyro_read  = false;
 845:../../../mod/sensor/sensor.c **** 	imu_mag_read   = false;
 846:../../../mod/sensor/sensor.c **** #endif
 847:../../../mod/sensor/sensor.c **** 
 848:../../../mod/sensor/sensor.c **** /* Burst read ADC sensors on Engine controller Rev 5 */
 849:../../../mod/sensor/sensor.c **** #ifdef L0002_REV5
 850:../../../mod/sensor/sensor.c **** 	sensor_status = sensor_adc_burst_read( sensor_data_ptr );
 851:../../../mod/sensor/sensor.c **** 	if ( sensor_status != SENSOR_OK )
 852:../../../mod/sensor/sensor.c **** 		{
 853:../../../mod/sensor/sensor.c **** 		return sensor_status;
 854:../../../mod/sensor/sensor.c **** 		}
 855:../../../mod/sensor/sensor.c **** 	thermo_status = temp_get_temp( &( sensor_data_ptr -> tc_temp ),
 856:../../../mod/sensor/sensor.c **** 				                   THERMO_HOT_JUNCTION );
 857:../../../mod/sensor/sensor.c **** 	if ( thermo_status != THERMO_OK )
 858:../../../mod/sensor/sensor.c **** 		{
 859:../../../mod/sensor/sensor.c **** 		return SENSOR_TC_ERROR;
 860:../../../mod/sensor/sensor.c **** 		}
 861:../../../mod/sensor/sensor.c **** 	return SENSOR_OK;
 862:../../../mod/sensor/sensor.c **** #endif
 863:../../../mod/sensor/sensor.c **** 
 864:../../../mod/sensor/sensor.c **** 
 865:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 866:../../../mod/sensor/sensor.c ****  API function implementation
 867:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
 868:../../../mod/sensor/sensor.c **** 
 869:../../../mod/sensor/sensor.c **** /* Iterate over each sensor readout */
 870:../../../mod/sensor/sensor.c **** for ( int i = 0; i < num_sensors; ++i )
 871:../../../mod/sensor/sensor.c **** 	{
 872:../../../mod/sensor/sensor.c **** 	
 873:../../../mod/sensor/sensor.c **** 	/* Poll sensor */
 874:../../../mod/sensor/sensor.c **** 	switch ( sensor_id )
 875:../../../mod/sensor/sensor.c **** 		{
 876:../../../mod/sensor/sensor.c **** 		#if defined( FLIGHT_COMPUTER )
 877:../../../mod/sensor/sensor.c **** 			case SENSOR_ACCX:
 878:../../../mod/sensor/sensor.c **** 				{
 879:../../../mod/sensor/sensor.c **** 				if ( !imu_accel_read )
 880:../../../mod/sensor/sensor.c **** 					{
 881:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_accel_xyz( &( sensor_data_ptr -> imu_data ) );
 882:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 883:../../../mod/sensor/sensor.c **** 						{
 884:../../../mod/sensor/sensor.c **** 						return SENSOR_ACCEL_ERROR;
 885:../../../mod/sensor/sensor.c **** 						}
 886:../../../mod/sensor/sensor.c **** 					imu_accel_read = true;
ARM GAS  /tmp/ccnIi471.s 			page 17


 887:../../../mod/sensor/sensor.c **** 					}
 888:../../../mod/sensor/sensor.c **** 				break;
 889:../../../mod/sensor/sensor.c **** 				}
 890:../../../mod/sensor/sensor.c **** 
 891:../../../mod/sensor/sensor.c **** 			case SENSOR_ACCY:
 892:../../../mod/sensor/sensor.c **** 				{
 893:../../../mod/sensor/sensor.c **** 				if ( !imu_accel_read )
 894:../../../mod/sensor/sensor.c **** 					{
 895:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_accel_xyz( &( sensor_data_ptr -> imu_data ) );
 896:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 897:../../../mod/sensor/sensor.c **** 						{
 898:../../../mod/sensor/sensor.c **** 						return SENSOR_ACCEL_ERROR;
 899:../../../mod/sensor/sensor.c **** 						}
 900:../../../mod/sensor/sensor.c **** 					imu_accel_read = true;
 901:../../../mod/sensor/sensor.c **** 					}
 902:../../../mod/sensor/sensor.c **** 				break;
 903:../../../mod/sensor/sensor.c **** 				}
 904:../../../mod/sensor/sensor.c **** 
 905:../../../mod/sensor/sensor.c **** 			case SENSOR_ACCZ:
 906:../../../mod/sensor/sensor.c **** 				{
 907:../../../mod/sensor/sensor.c **** 				if ( !imu_accel_read )
 908:../../../mod/sensor/sensor.c **** 					{
 909:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_accel_xyz( &( sensor_data_ptr -> imu_data ) );
 910:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 911:../../../mod/sensor/sensor.c **** 						{
 912:../../../mod/sensor/sensor.c **** 						return SENSOR_ACCEL_ERROR;
 913:../../../mod/sensor/sensor.c **** 						}
 914:../../../mod/sensor/sensor.c **** 					imu_accel_read = true;
 915:../../../mod/sensor/sensor.c **** 					}
 916:../../../mod/sensor/sensor.c **** 				break;
 917:../../../mod/sensor/sensor.c **** 				}
 918:../../../mod/sensor/sensor.c **** 
 919:../../../mod/sensor/sensor.c **** 			case SENSOR_GYROX:
 920:../../../mod/sensor/sensor.c **** 				{
 921:../../../mod/sensor/sensor.c **** 				if ( !imu_gyro_read )
 922:../../../mod/sensor/sensor.c **** 					{
 923:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_gyro_xyz( &( sensor_data_ptr -> imu_data ) );
 924:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 925:../../../mod/sensor/sensor.c **** 						{
 926:../../../mod/sensor/sensor.c **** 						return SENSOR_GYRO_ERROR;
 927:../../../mod/sensor/sensor.c **** 						}
 928:../../../mod/sensor/sensor.c **** 					imu_gyro_read = true;
 929:../../../mod/sensor/sensor.c **** 					}
 930:../../../mod/sensor/sensor.c **** 				break;
 931:../../../mod/sensor/sensor.c **** 				}
 932:../../../mod/sensor/sensor.c **** 
 933:../../../mod/sensor/sensor.c **** 			case SENSOR_GYROY:
 934:../../../mod/sensor/sensor.c **** 				{
 935:../../../mod/sensor/sensor.c **** 				if ( !imu_gyro_read )
 936:../../../mod/sensor/sensor.c **** 					{
 937:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_gyro_xyz( &( sensor_data_ptr -> imu_data ) );
 938:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 939:../../../mod/sensor/sensor.c **** 						{
 940:../../../mod/sensor/sensor.c **** 						return SENSOR_GYRO_ERROR;
 941:../../../mod/sensor/sensor.c **** 						}
 942:../../../mod/sensor/sensor.c **** 					imu_gyro_read = true;
 943:../../../mod/sensor/sensor.c **** 					}
ARM GAS  /tmp/ccnIi471.s 			page 18


 944:../../../mod/sensor/sensor.c **** 				break;
 945:../../../mod/sensor/sensor.c **** 				}
 946:../../../mod/sensor/sensor.c **** 
 947:../../../mod/sensor/sensor.c **** 			case SENSOR_GYROZ:
 948:../../../mod/sensor/sensor.c **** 				{
 949:../../../mod/sensor/sensor.c **** 				if ( !imu_gyro_read )
 950:../../../mod/sensor/sensor.c **** 					{
 951:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_gyro_xyz( &( sensor_data_ptr -> imu_data ) );
 952:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 953:../../../mod/sensor/sensor.c **** 						{
 954:../../../mod/sensor/sensor.c **** 						return SENSOR_GYRO_ERROR;
 955:../../../mod/sensor/sensor.c **** 						}
 956:../../../mod/sensor/sensor.c **** 					imu_gyro_read = true;
 957:../../../mod/sensor/sensor.c **** 					}
 958:../../../mod/sensor/sensor.c **** 				break;
 959:../../../mod/sensor/sensor.c **** 				}
 960:../../../mod/sensor/sensor.c **** 
 961:../../../mod/sensor/sensor.c **** 			case SENSOR_MAGX:
 962:../../../mod/sensor/sensor.c **** 				{
 963:../../../mod/sensor/sensor.c **** 				if ( !imu_mag_read )
 964:../../../mod/sensor/sensor.c **** 					{
 965:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_mag_xyz( &( sensor_data_ptr -> imu_data ) );
 966:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 967:../../../mod/sensor/sensor.c **** 						{
 968:../../../mod/sensor/sensor.c **** 						return SENSOR_GYRO_ERROR;
 969:../../../mod/sensor/sensor.c **** 						}
 970:../../../mod/sensor/sensor.c **** 					imu_mag_read = true;
 971:../../../mod/sensor/sensor.c **** 					}
 972:../../../mod/sensor/sensor.c **** 				break;
 973:../../../mod/sensor/sensor.c **** 				}
 974:../../../mod/sensor/sensor.c **** 
 975:../../../mod/sensor/sensor.c **** 			case SENSOR_MAGY:
 976:../../../mod/sensor/sensor.c **** 				{
 977:../../../mod/sensor/sensor.c **** 				if ( !imu_mag_read )
 978:../../../mod/sensor/sensor.c **** 					{
 979:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_mag_xyz( &( sensor_data_ptr -> imu_data ) );
 980:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 981:../../../mod/sensor/sensor.c **** 						{
 982:../../../mod/sensor/sensor.c **** 						return SENSOR_GYRO_ERROR;
 983:../../../mod/sensor/sensor.c **** 						}
 984:../../../mod/sensor/sensor.c **** 					imu_mag_read = true;
 985:../../../mod/sensor/sensor.c **** 					}
 986:../../../mod/sensor/sensor.c **** 				break;
 987:../../../mod/sensor/sensor.c **** 				}
 988:../../../mod/sensor/sensor.c **** 
 989:../../../mod/sensor/sensor.c **** 			case SENSOR_MAGZ:
 990:../../../mod/sensor/sensor.c **** 				{
 991:../../../mod/sensor/sensor.c **** 				if ( !imu_mag_read )
 992:../../../mod/sensor/sensor.c **** 					{
 993:../../../mod/sensor/sensor.c **** 					imu_status = imu_get_mag_xyz( &( sensor_data_ptr -> imu_data ) );
 994:../../../mod/sensor/sensor.c **** 					if ( imu_status != IMU_OK )
 995:../../../mod/sensor/sensor.c **** 						{
 996:../../../mod/sensor/sensor.c **** 						return SENSOR_GYRO_ERROR;
 997:../../../mod/sensor/sensor.c **** 						}
 998:../../../mod/sensor/sensor.c **** 					imu_mag_read = true;
 999:../../../mod/sensor/sensor.c **** 					}
1000:../../../mod/sensor/sensor.c **** 				break;
ARM GAS  /tmp/ccnIi471.s 			page 19


1001:../../../mod/sensor/sensor.c **** 				}
1002:../../../mod/sensor/sensor.c **** 
1003:../../../mod/sensor/sensor.c **** 			case SENSOR_IMUT:
1004:../../../mod/sensor/sensor.c **** 				{
1005:../../../mod/sensor/sensor.c **** 				sensor_data_ptr -> imu_data.temp = 0;
1006:../../../mod/sensor/sensor.c **** 				break;
1007:../../../mod/sensor/sensor.c **** 				}
1008:../../../mod/sensor/sensor.c **** 		#endif /* #if defined( FLIGHT_COMPUTER ) */
1009:../../../mod/sensor/sensor.c **** 
1010:../../../mod/sensor/sensor.c **** 		#if ( defined( FLIGHT_COMPUTER )  || defined( FLIGHT_COMPUTER_LITE ) )
1011:../../../mod/sensor/sensor.c **** 			case SENSOR_PRES:
1012:../../../mod/sensor/sensor.c **** 				{
1013:../../../mod/sensor/sensor.c **** 				baro_status = baro_get_temp(     &( sensor_data_ptr -> baro_temp     ) );
1014:../../../mod/sensor/sensor.c **** 				if ( baro_status != BARO_OK )
1015:../../../mod/sensor/sensor.c **** 					{
1016:../../../mod/sensor/sensor.c **** 					return SENSOR_BARO_ERROR;
1017:../../../mod/sensor/sensor.c **** 					}
1018:../../../mod/sensor/sensor.c **** 				baro_status = baro_get_pressure( &( sensor_data_ptr -> baro_pressure ) );
1019:../../../mod/sensor/sensor.c **** 				if ( baro_status != BARO_OK )
1020:../../../mod/sensor/sensor.c **** 					{
1021:../../../mod/sensor/sensor.c **** 					return SENSOR_BARO_ERROR;
1022:../../../mod/sensor/sensor.c **** 					}
1023:../../../mod/sensor/sensor.c **** 				break;
1024:../../../mod/sensor/sensor.c **** 				}
1025:../../../mod/sensor/sensor.c **** 
1026:../../../mod/sensor/sensor.c **** 			case SENSOR_TEMP:
1027:../../../mod/sensor/sensor.c **** 				{
1028:../../../mod/sensor/sensor.c **** 				baro_status = baro_get_temp( &( sensor_data_ptr -> baro_temp ) );
1029:../../../mod/sensor/sensor.c **** 				if ( baro_status != BARO_OK )
1030:../../../mod/sensor/sensor.c **** 					{
1031:../../../mod/sensor/sensor.c **** 					return SENSOR_BARO_ERROR;
1032:../../../mod/sensor/sensor.c **** 					}
1033:../../../mod/sensor/sensor.c **** 				break;
1034:../../../mod/sensor/sensor.c **** 				}
1035:../../../mod/sensor/sensor.c **** 		#endif /* if defined( FLIGHT_COMPUTER ) || defined( FLIGHT_COMPUTER_LITE ) */
1036:../../../mod/sensor/sensor.c **** 
1037:../../../mod/sensor/sensor.c **** 		#if defined( ENGINE_CONTROLLER )
1038:../../../mod/sensor/sensor.c **** 			case SENSOR_PT0:
1039:../../../mod/sensor/sensor.c **** 				{
1040:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM0, 
1041:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1042:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1043:../../../mod/sensor/sensor.c **** 					{
1044:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1045:../../../mod/sensor/sensor.c **** 					}
1046:../../../mod/sensor/sensor.c **** 				break;
1047:../../../mod/sensor/sensor.c **** 				}
1048:../../../mod/sensor/sensor.c **** 
1049:../../../mod/sensor/sensor.c **** 			case SENSOR_PT1:
1050:../../../mod/sensor/sensor.c **** 				{
1051:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM1, 
1052:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1053:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1054:../../../mod/sensor/sensor.c **** 					{
1055:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1056:../../../mod/sensor/sensor.c **** 					}
1057:../../../mod/sensor/sensor.c **** 				break;
ARM GAS  /tmp/ccnIi471.s 			page 20


1058:../../../mod/sensor/sensor.c **** 				}
1059:../../../mod/sensor/sensor.c **** 
1060:../../../mod/sensor/sensor.c **** 			case SENSOR_PT2:
1061:../../../mod/sensor/sensor.c **** 				{
1062:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM2, 
1063:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1064:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1065:../../../mod/sensor/sensor.c **** 					{
1066:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1067:../../../mod/sensor/sensor.c **** 					}
1068:../../../mod/sensor/sensor.c **** 				break;
1069:../../../mod/sensor/sensor.c **** 				}
1070:../../../mod/sensor/sensor.c **** 
1071:../../../mod/sensor/sensor.c **** 			case SENSOR_PT3:
1072:../../../mod/sensor/sensor.c **** 				{
1073:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM3, 
1074:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1075:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1076:../../../mod/sensor/sensor.c **** 					{
1077:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1078:../../../mod/sensor/sensor.c **** 					}
1079:../../../mod/sensor/sensor.c **** 				break;
1080:../../../mod/sensor/sensor.c **** 				}
1081:../../../mod/sensor/sensor.c **** 
1082:../../../mod/sensor/sensor.c **** 			case SENSOR_PT4:
1083:../../../mod/sensor/sensor.c **** 				{
1084:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM4, 
1085:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1086:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1087:../../../mod/sensor/sensor.c **** 					{
1088:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1089:../../../mod/sensor/sensor.c **** 					}
1090:../../../mod/sensor/sensor.c **** 				break;
1091:../../../mod/sensor/sensor.c **** 				}
1092:../../../mod/sensor/sensor.c **** 
1093:../../../mod/sensor/sensor.c **** 			case SENSOR_PT5:
1094:../../../mod/sensor/sensor.c **** 				{
1095:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM5, 
1096:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1097:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1098:../../../mod/sensor/sensor.c **** 					{
1099:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1100:../../../mod/sensor/sensor.c **** 					}
1101:../../../mod/sensor/sensor.c **** 				break;
1102:../../../mod/sensor/sensor.c **** 				}
1103:../../../mod/sensor/sensor.c **** 
1104:../../../mod/sensor/sensor.c **** 			case SENSOR_PT6:
1105:../../../mod/sensor/sensor.c **** 				{
1106:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM6, 
1107:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1108:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1109:../../../mod/sensor/sensor.c **** 					{
1110:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1111:../../../mod/sensor/sensor.c **** 					}
1112:../../../mod/sensor/sensor.c **** 				break;
1113:../../../mod/sensor/sensor.c **** 				}
1114:../../../mod/sensor/sensor.c **** 
ARM GAS  /tmp/ccnIi471.s 			page 21


1115:../../../mod/sensor/sensor.c **** 			case SENSOR_PT7:
1116:../../../mod/sensor/sensor.c **** 				{
1117:../../../mod/sensor/sensor.c **** 				pt_status = pressure_get_pt_reading( PT_NUM7, 
1118:../../../mod/sensor/sensor.c **** 				                                    &( sensor_data_ptr -> pt_pressures[0]) );
1119:../../../mod/sensor/sensor.c **** 				if ( pt_status != PRESSURE_OK )
1120:../../../mod/sensor/sensor.c **** 					{
1121:../../../mod/sensor/sensor.c **** 					return SENSOR_PT_ERROR;
1122:../../../mod/sensor/sensor.c **** 					}
1123:../../../mod/sensor/sensor.c **** 				break;
1124:../../../mod/sensor/sensor.c **** 				}
1125:../../../mod/sensor/sensor.c **** 
1126:../../../mod/sensor/sensor.c **** 			case SENSOR_TC:
1127:../../../mod/sensor/sensor.c **** 				{
1128:../../../mod/sensor/sensor.c **** 				thermo_status = temp_get_temp( &( sensor_data_ptr -> tc_temp ),
1129:../../../mod/sensor/sensor.c **** 				                               THERMO_HOT_JUNCTION );
1130:../../../mod/sensor/sensor.c **** 				if ( thermo_status != THERMO_OK )
1131:../../../mod/sensor/sensor.c **** 					{
1132:../../../mod/sensor/sensor.c **** 					return SENSOR_TC_ERROR;
1133:../../../mod/sensor/sensor.c **** 					}
1134:../../../mod/sensor/sensor.c **** 				break;
1135:../../../mod/sensor/sensor.c **** 				}
1136:../../../mod/sensor/sensor.c **** 
1137:../../../mod/sensor/sensor.c **** 			case SENSOR_LC:
1138:../../../mod/sensor/sensor.c **** 				{
1139:../../../mod/sensor/sensor.c **** 				lc_status = loadcell_get_reading( &( sensor_data_ptr -> load_cell_force ) );
1140:../../../mod/sensor/sensor.c **** 				if ( lc_status != LOADCELL_OK )
1141:../../../mod/sensor/sensor.c **** 					{
1142:../../../mod/sensor/sensor.c **** 					return SENSOR_LC_ERROR;
1143:../../../mod/sensor/sensor.c **** 					}
1144:../../../mod/sensor/sensor.c **** 				break;
1145:../../../mod/sensor/sensor.c **** 				}
1146:../../../mod/sensor/sensor.c **** 		
1147:../../../mod/sensor/sensor.c **** 		#elif defined( VALVE_CONTROLLER )
1148:../../../mod/sensor/sensor.c **** 
1149:../../../mod/sensor/sensor.c **** 			case SENSOR_ENCO:
1150:../../../mod/sensor/sensor.c **** 				{
1151:../../../mod/sensor/sensor.c **** 				sensor_data_ptr -> lox_valve_pos = valve_get_ox_valve_pos();
1152:../../../mod/sensor/sensor.c **** 				break;
1153:../../../mod/sensor/sensor.c **** 				}
1154:../../../mod/sensor/sensor.c **** 
1155:../../../mod/sensor/sensor.c **** 			case SENSOR_ENCF:
1156:../../../mod/sensor/sensor.c **** 				{
1157:../../../mod/sensor/sensor.c **** 				sensor_data_ptr -> fuel_valve_pos = valve_get_fuel_valve_pos();
1158:../../../mod/sensor/sensor.c **** 				break;
1159:../../../mod/sensor/sensor.c **** 				}
1160:../../../mod/sensor/sensor.c **** 
1161:../../../mod/sensor/sensor.c **** 		#endif /* #if defined( ENGINE_CONTROLLER ) */
1162:../../../mod/sensor/sensor.c **** 
1163:../../../mod/sensor/sensor.c **** 		default:
1164:../../../mod/sensor/sensor.c **** 			{
1165:../../../mod/sensor/sensor.c **** 			/* Unrecognized sensor id */
1166:../../../mod/sensor/sensor.c **** 			return SENSOR_UNRECOGNIZED_SENSOR_ID; 
1167:../../../mod/sensor/sensor.c **** 			}
1168:../../../mod/sensor/sensor.c **** 		} /* switch( sensor_id ) */
1169:../../../mod/sensor/sensor.c **** 
1170:../../../mod/sensor/sensor.c **** 		/* Go to next sensor */
1171:../../../mod/sensor/sensor.c **** 		sensor_id_ptr++;
ARM GAS  /tmp/ccnIi471.s 			page 22


1172:../../../mod/sensor/sensor.c **** 		sensor_id        = *(sensor_id_ptr   );
1173:../../../mod/sensor/sensor.c **** 
1174:../../../mod/sensor/sensor.c **** 	} /*  while( i < num_sensors ) */
1175:../../../mod/sensor/sensor.c **** 
1176:../../../mod/sensor/sensor.c **** return SENSOR_OK;
1177:../../../mod/sensor/sensor.c **** } /* sensor_poll */
1178:../../../mod/sensor/sensor.c **** 
1179:../../../mod/sensor/sensor.c **** #ifdef ENGINE_CONTROLLER 
1180:../../../mod/sensor/sensor.c **** /*******************************************************************************
1181:../../../mod/sensor/sensor.c **** *                                                                              *
1182:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1183:../../../mod/sensor/sensor.c **** * 		sensor_conv_pressure                                                   *
1184:../../../mod/sensor/sensor.c **** *                                                                              *
1185:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1186:../../../mod/sensor/sensor.c **** *       Converts a pressure transducer ADC readout to a floating point         *
1187:../../../mod/sensor/sensor.c **** *       pressure in psi                                                        *
1188:../../../mod/sensor/sensor.c **** *                                                                              *
1189:../../../mod/sensor/sensor.c **** *******************************************************************************/
1190:../../../mod/sensor/sensor.c **** float sensor_conv_pressure
1191:../../../mod/sensor/sensor.c **** 	( 
1192:../../../mod/sensor/sensor.c **** 	uint32_t adc_readout, /* Pressure readout from ADC */
1193:../../../mod/sensor/sensor.c **** 	PT_INDEX pt_num       /* PT used for readout       */
1194:../../../mod/sensor/sensor.c **** 	)
1195:../../../mod/sensor/sensor.c **** {
1196:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1197:../../../mod/sensor/sensor.c ****  Local Variables  
1198:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1199:../../../mod/sensor/sensor.c **** float voltage; /* ADC voltage    */
1200:../../../mod/sensor/sensor.c **** float gain;    /* Amplifier gain */
1201:../../../mod/sensor/sensor.c **** 
1202:../../../mod/sensor/sensor.c **** 
1203:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1204:../../../mod/sensor/sensor.c ****  Initializations 
1205:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1206:../../../mod/sensor/sensor.c **** voltage = 0;
1207:../../../mod/sensor/sensor.c **** gain    = 0;
1208:../../../mod/sensor/sensor.c **** 
1209:../../../mod/sensor/sensor.c **** 
1210:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1211:../../../mod/sensor/sensor.c ****  Implementation 
1212:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1213:../../../mod/sensor/sensor.c **** 
1214:../../../mod/sensor/sensor.c **** /* Convert readout to voltage */
1215:../../../mod/sensor/sensor.c **** voltage = ( 3.3/( pow( 2, 16 ) ) )*( (float) adc_readout );
1216:../../../mod/sensor/sensor.c **** 
1217:../../../mod/sensor/sensor.c **** /* Convert voltage to pressure in psi */
1218:../../../mod/sensor/sensor.c **** if ( pt_num > PT_NONE_INDEX )
1219:../../../mod/sensor/sensor.c **** 	{
1220:../../../mod/sensor/sensor.c **** 	return ( voltage*( 2000.0/5.0 ) );
1221:../../../mod/sensor/sensor.c **** 	}
1222:../../../mod/sensor/sensor.c **** else
1223:../../../mod/sensor/sensor.c **** 	{
1224:../../../mod/sensor/sensor.c **** 	gain = 1 + ( 100.0/3.3 );
1225:../../../mod/sensor/sensor.c **** 	return ( voltage*( 1000.0/(gain*0.1) ) );
1226:../../../mod/sensor/sensor.c **** 	}
1227:../../../mod/sensor/sensor.c **** } /* sensor_conv_pressure */
1228:../../../mod/sensor/sensor.c **** #endif
ARM GAS  /tmp/ccnIi471.s 			page 23


1229:../../../mod/sensor/sensor.c **** 
1230:../../../mod/sensor/sensor.c **** 
1231:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1232:../../../mod/sensor/sensor.c ****  Internal procedures 
1233:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1234:../../../mod/sensor/sensor.c **** 
1235:../../../mod/sensor/sensor.c **** /*******************************************************************************
1236:../../../mod/sensor/sensor.c **** *                                                                              *
1237:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1238:../../../mod/sensor/sensor.c **** * 		sensor_map                                                             *
1239:../../../mod/sensor/sensor.c **** *                                                                              *
1240:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1241:../../../mod/sensor/sensor.c **** *       Sensor ID to size and pointer mapping                                  *
1242:../../../mod/sensor/sensor.c **** *                                                                              *
1243:../../../mod/sensor/sensor.c **** *******************************************************************************/
1244:../../../mod/sensor/sensor.c **** void static sensor_map
1245:../../../mod/sensor/sensor.c **** 	(
1246:../../../mod/sensor/sensor.c **** 	SENSOR_DATA* sensor_data_ptr, /* In:  Base pointer to sensor data   */
1247:../../../mod/sensor/sensor.c **** 	SENSOR_ID    sensor_id      , /* In:  Sensor id                    */
1248:../../../mod/sensor/sensor.c **** 	uint8_t**    sensorid_pptr  , /* Out: Pointer to sensor readout in 
1249:../../../mod/sensor/sensor.c **** 	                                      sensor_data_ptr              */
1250:../../../mod/sensor/sensor.c **** 	size_t*      sensor_size_ptr  /* Out: Size of readout in bytes     */
1251:../../../mod/sensor/sensor.c **** 	)
1252:../../../mod/sensor/sensor.c **** {
  28              		.loc 1 1252 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              		.loc 1 1252 1 is_stmt 0 view .LVU1
  34 0000 30B4     		push	{r4, r5}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 5, -4
1253:../../../mod/sensor/sensor.c **** /* Lookup sensor offset and size from table */
1254:../../../mod/sensor/sensor.c **** *sensor_size_ptr = sensor_size_offsets_table[ sensor_id ].size;
  39              		.loc 1 1254 1 is_stmt 1 view .LVU2
  40              		.loc 1 1254 58 is_stmt 0 view .LVU3
  41 0002 064C     		ldr	r4, .L3
  42 0004 04EBC10C 		add	ip, r4, r1, lsl #3
  43 0008 DCF80450 		ldr	r5, [ip, #4]
  44 000c 1D60     		str	r5, [r3]
1255:../../../mod/sensor/sensor.c **** *sensorid_pptr   = ( (uint8_t*) sensor_data_ptr ) + 
  45              		.loc 1 1255 1 is_stmt 1 view .LVU4
1256:../../../mod/sensor/sensor.c ****                    sensor_size_offsets_table[ sensor_id ].offset;
  46              		.loc 1 1256 58 is_stmt 0 view .LVU5
  47 000e 14F83130 		ldrb	r3, [r4, r1, lsl #3]	@ zero_extendqisi2
  48              	.LVL1:
1255:../../../mod/sensor/sensor.c **** *sensorid_pptr   = ( (uint8_t*) sensor_data_ptr ) + 
  49              		.loc 1 1255 51 view .LVU6
  50 0012 1844     		add	r0, r0, r3
  51              	.LVL2:
1255:../../../mod/sensor/sensor.c **** *sensorid_pptr   = ( (uint8_t*) sensor_data_ptr ) + 
  52              		.loc 1 1255 18 view .LVU7
  53 0014 1060     		str	r0, [r2]
1257:../../../mod/sensor/sensor.c **** 
ARM GAS  /tmp/ccnIi471.s 			page 24


1258:../../../mod/sensor/sensor.c **** } /*  sensor_map */
  54              		.loc 1 1258 1 view .LVU8
  55 0016 30BC     		pop	{r4, r5}
  56              	.LCFI1:
  57              		.cfi_restore 5
  58              		.cfi_restore 4
  59              		.cfi_def_cfa_offset 0
  60 0018 7047     		bx	lr
  61              	.L4:
  62 001a 00BF     		.align	2
  63              	.L3:
  64 001c 00000000 		.word	sensor_size_offsets_table
  65              		.cfi_endproc
  66              	.LFE338:
  68              		.section	.text.extract_sensor_bytes,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  74              	extract_sensor_bytes:
  75              	.LVL3:
  76              	.LFB339:
1259:../../../mod/sensor/sensor.c **** 
1260:../../../mod/sensor/sensor.c **** 
1261:../../../mod/sensor/sensor.c **** /*******************************************************************************
1262:../../../mod/sensor/sensor.c **** *                                                                              *
1263:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1264:../../../mod/sensor/sensor.c **** * 		extract_sensor_bytes                                                   *
1265:../../../mod/sensor/sensor.c **** *                                                                              *
1266:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1267:../../../mod/sensor/sensor.c **** *       Extract bytes for export from SENSOR_ID struct                         *
1268:../../../mod/sensor/sensor.c **** *                                                                              *
1269:../../../mod/sensor/sensor.c **** *******************************************************************************/
1270:../../../mod/sensor/sensor.c **** void static extract_sensor_bytes 
1271:../../../mod/sensor/sensor.c **** 	(
1272:../../../mod/sensor/sensor.c **** 	SENSOR_DATA* sensor_data_ptr      , /* In:  Sensor data in struct         */
1273:../../../mod/sensor/sensor.c **** 	SENSOR_ID*   sensor_ids_ptr       , /* In:  Sensor ids                    */
1274:../../../mod/sensor/sensor.c **** 	uint8_t      num_sensors          , /* In:  Number of sensors polled      */
1275:../../../mod/sensor/sensor.c **** 	uint8_t*     sensor_data_bytes_ptr, /* Out: Sensor data in bytes          */
1276:../../../mod/sensor/sensor.c **** 	uint8_t*     num_sensor_bytes       /* Out: Size of output data           */
1277:../../../mod/sensor/sensor.c **** 	)
1278:../../../mod/sensor/sensor.c **** {
  77              		.loc 1 1278 1 is_stmt 1 view -0
  78              		.cfi_startproc
  79              		@ args = 4, pretend = 0, frame = 8
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		.loc 1 1278 1 is_stmt 0 view .LVU10
  82 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  83              	.LCFI2:
  84              		.cfi_def_cfa_offset 32
  85              		.cfi_offset 4, -32
  86              		.cfi_offset 5, -28
  87              		.cfi_offset 6, -24
  88              		.cfi_offset 7, -20
  89              		.cfi_offset 8, -16
  90              		.cfi_offset 9, -12
  91              		.cfi_offset 10, -8
ARM GAS  /tmp/ccnIi471.s 			page 25


  92              		.cfi_offset 14, -4
  93 0004 82B0     		sub	sp, sp, #8
  94              	.LCFI3:
  95              		.cfi_def_cfa_offset 40
  96 0006 8246     		mov	r10, r0
  97 0008 0F46     		mov	r7, r1
  98 000a 1646     		mov	r6, r2
  99 000c 1D46     		mov	r5, r3
 100 000e DDF82880 		ldr	r8, [sp, #40]
1279:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1280:../../../mod/sensor/sensor.c ****  Local Variables  
1281:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1282:../../../mod/sensor/sensor.c **** uint8_t*   output_ptr;    /* Pointer to data export output                    */
 101              		.loc 1 1282 1 is_stmt 1 view .LVU11
1283:../../../mod/sensor/sensor.c **** uint8_t*   input_ptr;     /* Pointer to data within SENSOR_ID struct          */
 102              		.loc 1 1283 1 view .LVU12
1284:../../../mod/sensor/sensor.c **** size_t     sensor_size;   /* Size in bytes of current sensor readout          */
 103              		.loc 1 1284 1 view .LVU13
1285:../../../mod/sensor/sensor.c **** SENSOR_ID  sensor_id;     /* Current Sensor ID                                */
 104              		.loc 1 1285 1 view .LVU14
1286:../../../mod/sensor/sensor.c **** SENSOR_ID* sensor_id_ptr; /* Pointer to current sensor ID                     */
 105              		.loc 1 1286 1 view .LVU15
1287:../../../mod/sensor/sensor.c **** 
1288:../../../mod/sensor/sensor.c **** 
1289:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1290:../../../mod/sensor/sensor.c ****  Initializations  
1291:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1292:../../../mod/sensor/sensor.c **** output_ptr        = sensor_data_bytes_ptr;
 106              		.loc 1 1292 1 view .LVU16
 107              	.LVL4:
1293:../../../mod/sensor/sensor.c **** sensor_id_ptr     = sensor_ids_ptr;
 108              		.loc 1 1293 1 view .LVU17
1294:../../../mod/sensor/sensor.c **** sensor_id         = *(sensor_id_ptr);
 109              		.loc 1 1294 1 view .LVU18
 110              		.loc 1 1294 19 is_stmt 0 view .LVU19
 111 0012 91F80090 		ldrb	r9, [r1]	@ zero_extendqisi2
 112              	.LVL5:
1295:../../../mod/sensor/sensor.c **** *num_sensor_bytes = 0;
 113              		.loc 1 1295 1 is_stmt 1 view .LVU20
 114              		.loc 1 1295 19 is_stmt 0 view .LVU21
 115 0016 0024     		movs	r4, #0
 116 0018 88F80040 		strb	r4, [r8]
1296:../../../mod/sensor/sensor.c **** 
1297:../../../mod/sensor/sensor.c **** 
1298:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1299:../../../mod/sensor/sensor.c ****  Implementation 
1300:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1301:../../../mod/sensor/sensor.c **** for ( uint8_t i = 0; i < num_sensors; ++i )
 117              		.loc 1 1301 1 is_stmt 1 view .LVU22
 118              	.LBB6:
 119              		.loc 1 1301 7 view .LVU23
 120              	.LVL6:
 121              		.loc 1 1301 1 is_stmt 0 view .LVU24
 122 001c 01E0     		b	.L6
 123              	.LVL7:
 124              	.L7:
 125              		.loc 1 1301 39 is_stmt 1 discriminator 2 view .LVU25
ARM GAS  /tmp/ccnIi471.s 			page 26


 126 001e 0134     		adds	r4, r4, #1
 127              	.LVL8:
 128              		.loc 1 1301 39 is_stmt 0 discriminator 2 view .LVU26
 129 0020 E4B2     		uxtb	r4, r4
 130              	.LVL9:
 131              	.L6:
 132              		.loc 1 1301 24 is_stmt 1 discriminator 1 view .LVU27
 133 0022 B442     		cmp	r4, r6
 134 0024 1AD2     		bcs	.L10
1302:../../../mod/sensor/sensor.c **** 	{
1303:../../../mod/sensor/sensor.c **** 	/* Get position info of sensor readout */
1304:../../../mod/sensor/sensor.c **** 	sensor_map( sensor_data_ptr, 
 135              		.loc 1 1304 2 view .LVU28
 136 0026 6B46     		mov	r3, sp
 137 0028 01AA     		add	r2, sp, #4
 138 002a 4946     		mov	r1, r9
 139 002c 5046     		mov	r0, r10
 140 002e FFF7FEFF 		bl	sensor_map
 141              	.LVL10:
1305:../../../mod/sensor/sensor.c **** 	            sensor_id      ,
1306:../../../mod/sensor/sensor.c **** 				&input_ptr      ,
1307:../../../mod/sensor/sensor.c **** 				&sensor_size );
1308:../../../mod/sensor/sensor.c **** 
1309:../../../mod/sensor/sensor.c **** 	/* Copy data into output buffer */
1310:../../../mod/sensor/sensor.c **** 	memcpy( output_ptr, input_ptr, sensor_size );
 142              		.loc 1 1310 2 view .LVU29
 143 0032 009A     		ldr	r2, [sp]
 144 0034 0199     		ldr	r1, [sp, #4]
 145 0036 2846     		mov	r0, r5
 146 0038 FFF7FEFF 		bl	memcpy
 147              	.LVL11:
1311:../../../mod/sensor/sensor.c **** 
1312:../../../mod/sensor/sensor.c **** 	/* Update size of output */
1313:../../../mod/sensor/sensor.c **** 	*num_sensor_bytes += (uint8_t) sensor_size;
 148              		.loc 1 1313 2 view .LVU30
 149 003c 98F800C0 		ldrb	ip, [r8]	@ zero_extendqisi2
 150              		.loc 1 1313 23 is_stmt 0 view .LVU31
 151 0040 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 152              		.loc 1 1313 20 view .LVU32
 153 0044 9C44     		add	ip, ip, r3
 154 0046 88F800C0 		strb	ip, [r8]
1314:../../../mod/sensor/sensor.c **** 
1315:../../../mod/sensor/sensor.c **** 	/* Go to next sensor */ 
1316:../../../mod/sensor/sensor.c **** 	if ( i != ( num_sensors-1) )
 155              		.loc 1 1316 2 is_stmt 1 view .LVU33
 156              		.loc 1 1316 25 is_stmt 0 view .LVU34
 157 004a 731E     		subs	r3, r6, #1
 158              		.loc 1 1316 5 view .LVU35
 159 004c 9C42     		cmp	r4, r3
 160 004e E6D0     		beq	.L7
1317:../../../mod/sensor/sensor.c **** 		{
1318:../../../mod/sensor/sensor.c **** 		sensor_id_ptr++;
 161              		.loc 1 1318 3 is_stmt 1 view .LVU36
 162              	.LVL12:
1319:../../../mod/sensor/sensor.c **** 		sensor_id = *(sensor_id_ptr);
 163              		.loc 1 1319 3 view .LVU37
 164              		.loc 1 1319 13 is_stmt 0 view .LVU38
ARM GAS  /tmp/ccnIi471.s 			page 27


 165 0050 97F80190 		ldrb	r9, [r7, #1]	@ zero_extendqisi2
 166              	.LVL13:
1320:../../../mod/sensor/sensor.c **** 		output_ptr += sensor_size;
 167              		.loc 1 1320 3 is_stmt 1 view .LVU39
 168              		.loc 1 1320 14 is_stmt 0 view .LVU40
 169 0054 009B     		ldr	r3, [sp]
 170 0056 1D44     		add	r5, r5, r3
 171              	.LVL14:
1318:../../../mod/sensor/sensor.c **** 		sensor_id = *(sensor_id_ptr);
 172              		.loc 1 1318 16 view .LVU41
 173 0058 0137     		adds	r7, r7, #1
 174              	.LVL15:
1318:../../../mod/sensor/sensor.c **** 		sensor_id = *(sensor_id_ptr);
 175              		.loc 1 1318 16 view .LVU42
 176 005a E0E7     		b	.L7
 177              	.L10:
1318:../../../mod/sensor/sensor.c **** 		sensor_id = *(sensor_id_ptr);
 178              		.loc 1 1318 16 view .LVU43
 179              	.LBE6:
1321:../../../mod/sensor/sensor.c **** 		}
1322:../../../mod/sensor/sensor.c **** 	}
1323:../../../mod/sensor/sensor.c **** 
1324:../../../mod/sensor/sensor.c **** } /* extract_sensor_bytes */
 180              		.loc 1 1324 1 view .LVU44
 181 005c 02B0     		add	sp, sp, #8
 182              	.LCFI4:
 183              		.cfi_def_cfa_offset 32
 184              		@ sp needed
 185 005e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 186              		.loc 1 1324 1 view .LVU45
 187              		.cfi_endproc
 188              	.LFE339:
 190              		.section	.text.pt7_adc_channel_select,"ax",%progbits
 191              		.align	1
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 196              	pt7_adc_channel_select:
 197              	.LFB343:
1325:../../../mod/sensor/sensor.c **** 
1326:../../../mod/sensor/sensor.c **** #ifdef L0002_REV5
1327:../../../mod/sensor/sensor.c **** /*******************************************************************************
1328:../../../mod/sensor/sensor.c **** *                                                                              *
1329:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1330:../../../mod/sensor/sensor.c **** * 		sensor_adc_burst_read                                                  *
1331:../../../mod/sensor/sensor.c **** *                                                                              *
1332:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1333:../../../mod/sensor/sensor.c **** *       reads from all sensors using the MCUs ADCs                             *
1334:../../../mod/sensor/sensor.c **** *                                                                              *
1335:../../../mod/sensor/sensor.c **** *******************************************************************************/
1336:../../../mod/sensor/sensor.c **** SENSOR_STATUS sensor_adc_burst_read
1337:../../../mod/sensor/sensor.c **** 	(
1338:../../../mod/sensor/sensor.c **** 	SENSOR_DATA* sensor_data_ptr /* Pointer to sensor data structure */
1339:../../../mod/sensor/sensor.c **** 	)
1340:../../../mod/sensor/sensor.c **** {
1341:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1342:../../../mod/sensor/sensor.c ****  Local Variables  
ARM GAS  /tmp/ccnIi471.s 			page 28


1343:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1344:../../../mod/sensor/sensor.c **** HAL_StatusTypeDef      adc_status[2];    /* Return codes from ADC API         */
1345:../../../mod/sensor/sensor.c **** uint16_t               mux_pins_bitmask; /* GPIO Pins for PT1-3 MUX           */
1346:../../../mod/sensor/sensor.c **** 
1347:../../../mod/sensor/sensor.c **** 
1348:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1349:../../../mod/sensor/sensor.c ****  Initializations 
1350:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1351:../../../mod/sensor/sensor.c **** memset( &adc_status[0], HAL_OK, sizeof( adc_status ) );
1352:../../../mod/sensor/sensor.c **** mux_pins_bitmask = 0;
1353:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
1354:../../../mod/sensor/sensor.c **** 
1355:../../../mod/sensor/sensor.c **** 
1356:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
1357:../../../mod/sensor/sensor.c ****  Poll ADCs 
1358:../../../mod/sensor/sensor.c **** ------------------------------------------------------------------------------*/
1359:../../../mod/sensor/sensor.c **** 
1360:../../../mod/sensor/sensor.c **** /* PT1/PT7 readout */
1361:../../../mod/sensor/sensor.c **** pt1_adc_channel_select();
1362:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
1363:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
1364:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[0] = HAL_ADC_GetValue( &hadc1 );
1365:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
1366:../../../mod/sensor/sensor.c **** pt7_adc_channel_select();
1367:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
1368:../../../mod/sensor/sensor.c **** adc_status[1] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
1369:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[6] = HAL_ADC_GetValue( &hadc1 );
1370:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
1371:../../../mod/sensor/sensor.c **** mux_pins_bitmask = mux_map( 1 );
1372:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
1373:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, mux_pins_bitmask     , GPIO_PIN_SET   );
1374:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK || adc_status[1] != HAL_OK )
1375:../../../mod/sensor/sensor.c **** 	{
1376:../../../mod/sensor/sensor.c **** 	return SENSOR_ADC_POLL_ERROR;
1377:../../../mod/sensor/sensor.c **** 	}
1378:../../../mod/sensor/sensor.c **** 
1379:../../../mod/sensor/sensor.c **** /* Load Cell/PT8 readout */
1380:../../../mod/sensor/sensor.c **** loadcell_adc_channel_select();
1381:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc2 );
1382:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc2, ADC_TIMEOUT );
1383:../../../mod/sensor/sensor.c **** sensor_data_ptr -> load_cell_force = HAL_ADC_GetValue( &hadc2 );
1384:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
1385:../../../mod/sensor/sensor.c **** pt8_adc_channel_select();
1386:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc2 );
1387:../../../mod/sensor/sensor.c **** adc_status[1] = HAL_ADC_PollForConversion( &hadc2, ADC_TIMEOUT );
1388:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[7] = HAL_ADC_GetValue( &hadc2 );
1389:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
1390:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK || adc_status[1] != HAL_OK )
1391:../../../mod/sensor/sensor.c **** 	{
1392:../../../mod/sensor/sensor.c **** 	return SENSOR_ADC_POLL_ERROR;
1393:../../../mod/sensor/sensor.c **** 	}
1394:../../../mod/sensor/sensor.c **** 
1395:../../../mod/sensor/sensor.c **** /* PT2 readout           */
1396:../../../mod/sensor/sensor.c **** pt1_adc_channel_select(); /* wtf why patrick? */
1397:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
1398:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
1399:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[1] = HAL_ADC_GetValue( &hadc1 );
ARM GAS  /tmp/ccnIi471.s 			page 29


1400:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
1401:../../../mod/sensor/sensor.c **** mux_pins_bitmask = mux_map( 2 );
1402:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
1403:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, mux_pins_bitmask     , GPIO_PIN_SET   );
1404:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK )
1405:../../../mod/sensor/sensor.c **** 	{
1406:../../../mod/sensor/sensor.c **** 	return SENSOR_ADC_POLL_ERROR;
1407:../../../mod/sensor/sensor.c **** 	}
1408:../../../mod/sensor/sensor.c **** 
1409:../../../mod/sensor/sensor.c **** /* PT5/PT6 readout */
1410:../../../mod/sensor/sensor.c **** pt5_adc_channel_select();
1411:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc3 );
1412:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc3, ADC_TIMEOUT );
1413:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[4] = HAL_ADC_GetValue( &hadc3 );
1414:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
1415:../../../mod/sensor/sensor.c **** pt6_adc_channel_select();
1416:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc3 );
1417:../../../mod/sensor/sensor.c **** adc_status[1] = HAL_ADC_PollForConversion( &hadc3, ADC_TIMEOUT );
1418:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[5] = HAL_ADC_GetValue( &hadc3 );
1419:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
1420:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK || adc_status[1] != HAL_OK )
1421:../../../mod/sensor/sensor.c **** 	{
1422:../../../mod/sensor/sensor.c **** 	return SENSOR_ADC_POLL_ERROR;
1423:../../../mod/sensor/sensor.c **** 	}
1424:../../../mod/sensor/sensor.c **** 
1425:../../../mod/sensor/sensor.c **** /* PT3 readout */
1426:../../../mod/sensor/sensor.c **** pt1_adc_channel_select();
1427:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
1428:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
1429:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[2] = HAL_ADC_GetValue( &hadc1 );
1430:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[3] = 0;
1431:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
1432:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
1433:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK )
1434:../../../mod/sensor/sensor.c **** 	{
1435:../../../mod/sensor/sensor.c **** 	return SENSOR_ADC_POLL_ERROR;
1436:../../../mod/sensor/sensor.c **** 	}
1437:../../../mod/sensor/sensor.c **** else
1438:../../../mod/sensor/sensor.c **** 	{
1439:../../../mod/sensor/sensor.c **** 	return SENSOR_OK;
1440:../../../mod/sensor/sensor.c **** 	}
1441:../../../mod/sensor/sensor.c **** 
1442:../../../mod/sensor/sensor.c **** } /* sensor_adc_burst_read */
1443:../../../mod/sensor/sensor.c **** 
1444:../../../mod/sensor/sensor.c **** 
1445:../../../mod/sensor/sensor.c **** /*******************************************************************************
1446:../../../mod/sensor/sensor.c **** *                                                                              *
1447:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1448:../../../mod/sensor/sensor.c **** * 		mux_map                                                                *
1449:../../../mod/sensor/sensor.c **** *                                                                              *
1450:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1451:../../../mod/sensor/sensor.c **** *       Mapping from pressure transducer number to mutliplexor GPIO pin        *
1452:../../../mod/sensor/sensor.c **** *       bitmask. ex. PTNUM5 -> 101 -> GPIO_PIN_C | GPIO_PIN_A                  *
1453:../../../mod/sensor/sensor.c **** *                                                                              *
1454:../../../mod/sensor/sensor.c **** *******************************************************************************/
1455:../../../mod/sensor/sensor.c **** static inline uint16_t mux_map
1456:../../../mod/sensor/sensor.c **** 	(
ARM GAS  /tmp/ccnIi471.s 			page 30


1457:../../../mod/sensor/sensor.c ****     PRESSURE_PT_NUM    pt_num    
1458:../../../mod/sensor/sensor.c ****     )
1459:../../../mod/sensor/sensor.c **** {
1460:../../../mod/sensor/sensor.c **** /* Mux pins are adjacent and from the same port. Just shift the ptnum bits up
1461:../../../mod/sensor/sensor.c ****    to create the bitmask */
1462:../../../mod/sensor/sensor.c **** #ifdef L0002_REV4
1463:../../../mod/sensor/sensor.c **** 	return ( (uint16_t) pt_num) << PT_MUX_BITMASK_SHIFT; 
1464:../../../mod/sensor/sensor.c **** #elif defined( L0002_REV5 )
1465:../../../mod/sensor/sensor.c **** 	if ( pt_num <= 3 )
1466:../../../mod/sensor/sensor.c **** 		{
1467:../../../mod/sensor/sensor.c **** 		return ( (uint16_t) pt_num) << PT_MUX_BITMASK_SHIFT; 
1468:../../../mod/sensor/sensor.c **** 		}
1469:../../../mod/sensor/sensor.c **** 	else
1470:../../../mod/sensor/sensor.c **** 		{
1471:../../../mod/sensor/sensor.c **** 		return 0;
1472:../../../mod/sensor/sensor.c **** 		}
1473:../../../mod/sensor/sensor.c **** #endif
1474:../../../mod/sensor/sensor.c **** } /* mux_map */
1475:../../../mod/sensor/sensor.c **** 
1476:../../../mod/sensor/sensor.c **** 
1477:../../../mod/sensor/sensor.c **** /*******************************************************************************
1478:../../../mod/sensor/sensor.c **** *                                                                              *
1479:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1480:../../../mod/sensor/sensor.c **** * 		pt1_adc_channel_select                                                 *
1481:../../../mod/sensor/sensor.c **** *                                                                              *
1482:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1483:../../../mod/sensor/sensor.c **** *       Select the adc channel for PT1                                         *
1484:../../../mod/sensor/sensor.c **** *                                                                              *
1485:../../../mod/sensor/sensor.c **** *******************************************************************************/
1486:../../../mod/sensor/sensor.c **** static void pt1_adc_channel_select
1487:../../../mod/sensor/sensor.c **** 	(
1488:../../../mod/sensor/sensor.c **** 	void
1489:../../../mod/sensor/sensor.c **** 	)
1490:../../../mod/sensor/sensor.c **** {
1491:../../../mod/sensor/sensor.c **** ADC_ChannelConfTypeDef sConfig   = {0};
1492:../../../mod/sensor/sensor.c **** sConfig.Channel                  = ADC_CHANNEL_10;
1493:../../../mod/sensor/sensor.c **** sConfig.Rank                     = ADC_REGULAR_RANK_1;
1494:../../../mod/sensor/sensor.c **** sConfig.SamplingTime             = ADC_SAMPLETIME_1CYCLE_5;
1495:../../../mod/sensor/sensor.c **** sConfig.SingleDiff               = ADC_SINGLE_ENDED;
1496:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber             = ADC_OFFSET_NONE;
1497:../../../mod/sensor/sensor.c **** sConfig.Offset                   = 0;
1498:../../../mod/sensor/sensor.c **** sConfig.OffsetSignedSaturation   = DISABLE;
1499:../../../mod/sensor/sensor.c **** HAL_ADC_ConfigChannel( &hadc1, &sConfig );
1500:../../../mod/sensor/sensor.c **** 
1501:../../../mod/sensor/sensor.c **** } /* pt1_adc_channel_select */
1502:../../../mod/sensor/sensor.c **** 
1503:../../../mod/sensor/sensor.c **** 
1504:../../../mod/sensor/sensor.c **** /*******************************************************************************
1505:../../../mod/sensor/sensor.c **** *                                                                              *
1506:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1507:../../../mod/sensor/sensor.c **** * 		pt7_adc_channel_select                                                 *
1508:../../../mod/sensor/sensor.c **** *                                                                              *
1509:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1510:../../../mod/sensor/sensor.c **** *       Select the adc channel for PT7                                         *
1511:../../../mod/sensor/sensor.c **** *                                                                              *
1512:../../../mod/sensor/sensor.c **** *******************************************************************************/
1513:../../../mod/sensor/sensor.c **** static void pt7_adc_channel_select
ARM GAS  /tmp/ccnIi471.s 			page 31


1514:../../../mod/sensor/sensor.c **** 	(
1515:../../../mod/sensor/sensor.c **** 	void
1516:../../../mod/sensor/sensor.c **** 	)
1517:../../../mod/sensor/sensor.c **** {
 198              		.loc 1 1517 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 32
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 00B5     		push	{lr}
 203              	.LCFI5:
 204              		.cfi_def_cfa_offset 4
 205              		.cfi_offset 14, -4
 206 0002 89B0     		sub	sp, sp, #36
 207              	.LCFI6:
 208              		.cfi_def_cfa_offset 40
1518:../../../mod/sensor/sensor.c **** ADC_ChannelConfTypeDef sConfig   = {0};
 209              		.loc 1 1518 1 view .LVU47
 210              		.loc 1 1518 24 is_stmt 0 view .LVU48
 211 0004 0023     		movs	r3, #0
 212 0006 0193     		str	r3, [sp, #4]
 213 0008 0293     		str	r3, [sp, #8]
 214 000a 0393     		str	r3, [sp, #12]
 215 000c 0493     		str	r3, [sp, #16]
 216 000e 0593     		str	r3, [sp, #20]
 217 0010 0693     		str	r3, [sp, #24]
 218 0012 0793     		str	r3, [sp, #28]
1519:../../../mod/sensor/sensor.c **** sConfig.Channel                  = ADC_CHANNEL_4;
 219              		.loc 1 1519 1 is_stmt 1 view .LVU49
 220              		.loc 1 1519 34 is_stmt 0 view .LVU50
 221 0014 084B     		ldr	r3, .L13
 222 0016 0193     		str	r3, [sp, #4]
1520:../../../mod/sensor/sensor.c **** sConfig.Rank                     = ADC_REGULAR_RANK_1;
 223              		.loc 1 1520 1 is_stmt 1 view .LVU51
 224              		.loc 1 1520 34 is_stmt 0 view .LVU52
 225 0018 0623     		movs	r3, #6
 226 001a 0293     		str	r3, [sp, #8]
1521:../../../mod/sensor/sensor.c **** sConfig.SamplingTime             = ADC_SAMPLETIME_1CYCLE_5;
 227              		.loc 1 1521 1 is_stmt 1 view .LVU53
1522:../../../mod/sensor/sensor.c **** sConfig.SingleDiff               = ADC_SINGLE_ENDED;
 228              		.loc 1 1522 1 view .LVU54
 229              		.loc 1 1522 34 is_stmt 0 view .LVU55
 230 001c 40F2FF73 		movw	r3, #2047
 231 0020 0493     		str	r3, [sp, #16]
1523:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber             = ADC_OFFSET_NONE;
 232              		.loc 1 1523 1 is_stmt 1 view .LVU56
 233              		.loc 1 1523 34 is_stmt 0 view .LVU57
 234 0022 0423     		movs	r3, #4
 235 0024 0593     		str	r3, [sp, #20]
1524:../../../mod/sensor/sensor.c **** sConfig.Offset                   = 0;
 236              		.loc 1 1524 1 is_stmt 1 view .LVU58
1525:../../../mod/sensor/sensor.c **** sConfig.OffsetSignedSaturation   = DISABLE;
 237              		.loc 1 1525 1 view .LVU59
1526:../../../mod/sensor/sensor.c **** HAL_ADC_ConfigChannel( &hadc1, &sConfig );
 238              		.loc 1 1526 1 view .LVU60
 239 0026 0DEB0301 		add	r1, sp, r3
 240 002a 0448     		ldr	r0, .L13+4
 241 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  /tmp/ccnIi471.s 			page 32


 242              	.LVL16:
1527:../../../mod/sensor/sensor.c **** 
1528:../../../mod/sensor/sensor.c **** } /* pt7_adc_channel_select */
 243              		.loc 1 1528 1 is_stmt 0 view .LVU61
 244 0030 09B0     		add	sp, sp, #36
 245              	.LCFI7:
 246              		.cfi_def_cfa_offset 4
 247              		@ sp needed
 248 0032 5DF804FB 		ldr	pc, [sp], #4
 249              	.L14:
 250 0036 00BF     		.align	2
 251              	.L13:
 252 0038 1000C010 		.word	281018384
 253 003c 00000000 		.word	hadc1
 254              		.cfi_endproc
 255              	.LFE343:
 257              		.section	.text.loadcell_adc_channel_select,"ax",%progbits
 258              		.align	1
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 263              	loadcell_adc_channel_select:
 264              	.LFB344:
1529:../../../mod/sensor/sensor.c **** 
1530:../../../mod/sensor/sensor.c **** 
1531:../../../mod/sensor/sensor.c **** /*******************************************************************************
1532:../../../mod/sensor/sensor.c **** *                                                                              *
1533:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1534:../../../mod/sensor/sensor.c **** * 		loadcell_adc_channel_select                                            *
1535:../../../mod/sensor/sensor.c **** *                                                                              *
1536:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1537:../../../mod/sensor/sensor.c **** *       Select the adc channel for the loadcell                                *
1538:../../../mod/sensor/sensor.c **** *                                                                              *
1539:../../../mod/sensor/sensor.c **** *******************************************************************************/
1540:../../../mod/sensor/sensor.c **** static void loadcell_adc_channel_select
1541:../../../mod/sensor/sensor.c **** 	(
1542:../../../mod/sensor/sensor.c **** 	void
1543:../../../mod/sensor/sensor.c **** 	)
1544:../../../mod/sensor/sensor.c **** {
 265              		.loc 1 1544 1 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 32
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 00B5     		push	{lr}
 270              	.LCFI8:
 271              		.cfi_def_cfa_offset 4
 272              		.cfi_offset 14, -4
 273 0002 89B0     		sub	sp, sp, #36
 274              	.LCFI9:
 275              		.cfi_def_cfa_offset 40
1545:../../../mod/sensor/sensor.c **** ADC_ChannelConfTypeDef sConfig      = {0};
 276              		.loc 1 1545 1 view .LVU63
 277              		.loc 1 1545 24 is_stmt 0 view .LVU64
 278 0004 0023     		movs	r3, #0
 279 0006 0193     		str	r3, [sp, #4]
 280 0008 0293     		str	r3, [sp, #8]
 281 000a 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccnIi471.s 			page 33


 282 000c 0493     		str	r3, [sp, #16]
 283 000e 0593     		str	r3, [sp, #20]
 284 0010 0693     		str	r3, [sp, #24]
 285 0012 0793     		str	r3, [sp, #28]
1546:../../../mod/sensor/sensor.c **** sConfig.Channel                     = ADC_CHANNEL_11;
 286              		.loc 1 1546 1 is_stmt 1 view .LVU65
 287              		.loc 1 1546 37 is_stmt 0 view .LVU66
 288 0014 084B     		ldr	r3, .L17
 289 0016 0193     		str	r3, [sp, #4]
1547:../../../mod/sensor/sensor.c **** sConfig.Rank                        = ADC_REGULAR_RANK_1;
 290              		.loc 1 1547 1 is_stmt 1 view .LVU67
 291              		.loc 1 1547 37 is_stmt 0 view .LVU68
 292 0018 0623     		movs	r3, #6
 293 001a 0293     		str	r3, [sp, #8]
1548:../../../mod/sensor/sensor.c **** sConfig.SamplingTime                = ADC_SAMPLETIME_1CYCLE_5;
 294              		.loc 1 1548 1 is_stmt 1 view .LVU69
1549:../../../mod/sensor/sensor.c **** sConfig.SingleDiff                  = ADC_SINGLE_ENDED;
 295              		.loc 1 1549 1 view .LVU70
 296              		.loc 1 1549 37 is_stmt 0 view .LVU71
 297 001c 40F2FF73 		movw	r3, #2047
 298 0020 0493     		str	r3, [sp, #16]
1550:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber                = ADC_OFFSET_NONE;
 299              		.loc 1 1550 1 is_stmt 1 view .LVU72
 300              		.loc 1 1550 37 is_stmt 0 view .LVU73
 301 0022 0423     		movs	r3, #4
 302 0024 0593     		str	r3, [sp, #20]
1551:../../../mod/sensor/sensor.c **** sConfig.Offset                      = 0;
 303              		.loc 1 1551 1 is_stmt 1 view .LVU74
1552:../../../mod/sensor/sensor.c **** sConfig.OffsetSignedSaturation      = DISABLE;
 304              		.loc 1 1552 1 view .LVU75
1553:../../../mod/sensor/sensor.c **** HAL_ADC_ConfigChannel( &hadc2, &sConfig );
 305              		.loc 1 1553 1 view .LVU76
 306 0026 0DEB0301 		add	r1, sp, r3
 307 002a 0448     		ldr	r0, .L17+4
 308 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 309              	.LVL17:
1554:../../../mod/sensor/sensor.c **** } /* loadcell_adc_channel_select */
 310              		.loc 1 1554 1 is_stmt 0 view .LVU77
 311 0030 09B0     		add	sp, sp, #36
 312              	.LCFI10:
 313              		.cfi_def_cfa_offset 4
 314              		@ sp needed
 315 0032 5DF804FB 		ldr	pc, [sp], #4
 316              	.L18:
 317 0036 00BF     		.align	2
 318              	.L17:
 319 0038 0008302E 		.word	774899712
 320 003c 00000000 		.word	hadc2
 321              		.cfi_endproc
 322              	.LFE344:
 324              		.section	.text.pt8_adc_channel_select,"ax",%progbits
 325              		.align	1
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 330              	pt8_adc_channel_select:
 331              	.LFB345:
ARM GAS  /tmp/ccnIi471.s 			page 34


1555:../../../mod/sensor/sensor.c **** 
1556:../../../mod/sensor/sensor.c **** 
1557:../../../mod/sensor/sensor.c **** /*******************************************************************************
1558:../../../mod/sensor/sensor.c **** *                                                                              *
1559:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1560:../../../mod/sensor/sensor.c **** * 		pt8_adc_channel_select                                                 *
1561:../../../mod/sensor/sensor.c **** *                                                                              *
1562:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1563:../../../mod/sensor/sensor.c **** *       Select the adc channel for the pt8                                     *
1564:../../../mod/sensor/sensor.c **** *                                                                              *
1565:../../../mod/sensor/sensor.c **** *******************************************************************************/
1566:../../../mod/sensor/sensor.c **** static void pt8_adc_channel_select
1567:../../../mod/sensor/sensor.c **** 	(
1568:../../../mod/sensor/sensor.c **** 	void
1569:../../../mod/sensor/sensor.c **** 	)
1570:../../../mod/sensor/sensor.c **** {
 332              		.loc 1 1570 1 is_stmt 1 view -0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 32
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336 0000 00B5     		push	{lr}
 337              	.LCFI11:
 338              		.cfi_def_cfa_offset 4
 339              		.cfi_offset 14, -4
 340 0002 89B0     		sub	sp, sp, #36
 341              	.LCFI12:
 342              		.cfi_def_cfa_offset 40
1571:../../../mod/sensor/sensor.c **** ADC_ChannelConfTypeDef sConfig      = {0};
 343              		.loc 1 1571 1 view .LVU79
 344              		.loc 1 1571 24 is_stmt 0 view .LVU80
 345 0004 0023     		movs	r3, #0
 346 0006 0193     		str	r3, [sp, #4]
 347 0008 0293     		str	r3, [sp, #8]
 348 000a 0393     		str	r3, [sp, #12]
 349 000c 0493     		str	r3, [sp, #16]
 350 000e 0593     		str	r3, [sp, #20]
 351 0010 0693     		str	r3, [sp, #24]
 352 0012 0793     		str	r3, [sp, #28]
1572:../../../mod/sensor/sensor.c **** sConfig.Channel                     = ADC_CHANNEL_8;
 353              		.loc 1 1572 1 is_stmt 1 view .LVU81
 354              		.loc 1 1572 37 is_stmt 0 view .LVU82
 355 0014 084B     		ldr	r3, .L21
 356 0016 0193     		str	r3, [sp, #4]
1573:../../../mod/sensor/sensor.c **** sConfig.Rank                        = ADC_REGULAR_RANK_1;
 357              		.loc 1 1573 1 is_stmt 1 view .LVU83
 358              		.loc 1 1573 37 is_stmt 0 view .LVU84
 359 0018 0623     		movs	r3, #6
 360 001a 0293     		str	r3, [sp, #8]
1574:../../../mod/sensor/sensor.c **** sConfig.SamplingTime                = ADC_SAMPLETIME_1CYCLE_5;
 361              		.loc 1 1574 1 is_stmt 1 view .LVU85
1575:../../../mod/sensor/sensor.c **** sConfig.SingleDiff                  = ADC_SINGLE_ENDED;
 362              		.loc 1 1575 1 view .LVU86
 363              		.loc 1 1575 37 is_stmt 0 view .LVU87
 364 001c 40F2FF73 		movw	r3, #2047
 365 0020 0493     		str	r3, [sp, #16]
1576:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber                = ADC_OFFSET_NONE;
 366              		.loc 1 1576 1 is_stmt 1 view .LVU88
ARM GAS  /tmp/ccnIi471.s 			page 35


 367              		.loc 1 1576 37 is_stmt 0 view .LVU89
 368 0022 0423     		movs	r3, #4
 369 0024 0593     		str	r3, [sp, #20]
1577:../../../mod/sensor/sensor.c **** sConfig.Offset                      = 0;
 370              		.loc 1 1577 1 is_stmt 1 view .LVU90
1578:../../../mod/sensor/sensor.c **** sConfig.OffsetSignedSaturation      = DISABLE;
 371              		.loc 1 1578 1 view .LVU91
1579:../../../mod/sensor/sensor.c **** HAL_ADC_ConfigChannel( &hadc2, &sConfig );
 372              		.loc 1 1579 1 view .LVU92
 373 0026 0DEB0301 		add	r1, sp, r3
 374 002a 0448     		ldr	r0, .L21+4
 375 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 376              	.LVL18:
1580:../../../mod/sensor/sensor.c **** } /* pt8_adc_channel_select */
 377              		.loc 1 1580 1 is_stmt 0 view .LVU93
 378 0030 09B0     		add	sp, sp, #36
 379              	.LCFI13:
 380              		.cfi_def_cfa_offset 4
 381              		@ sp needed
 382 0032 5DF804FB 		ldr	pc, [sp], #4
 383              	.L22:
 384 0036 00BF     		.align	2
 385              	.L21:
 386 0038 00018021 		.word	562036992
 387 003c 00000000 		.word	hadc2
 388              		.cfi_endproc
 389              	.LFE345:
 391              		.section	.text.pt5_adc_channel_select,"ax",%progbits
 392              		.align	1
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	pt5_adc_channel_select:
 398              	.LFB346:
1581:../../../mod/sensor/sensor.c **** 
1582:../../../mod/sensor/sensor.c **** 
1583:../../../mod/sensor/sensor.c **** /*******************************************************************************
1584:../../../mod/sensor/sensor.c **** *                                                                              *
1585:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1586:../../../mod/sensor/sensor.c **** * 		pt5_adc_channel_select                                                 *
1587:../../../mod/sensor/sensor.c **** *                                                                              *
1588:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1589:../../../mod/sensor/sensor.c **** *       Select the adc channel for the pt5                                     *
1590:../../../mod/sensor/sensor.c **** *                                                                              *
1591:../../../mod/sensor/sensor.c **** *******************************************************************************/
1592:../../../mod/sensor/sensor.c **** static void pt5_adc_channel_select
1593:../../../mod/sensor/sensor.c **** 	(
1594:../../../mod/sensor/sensor.c **** 	void
1595:../../../mod/sensor/sensor.c **** 	)
1596:../../../mod/sensor/sensor.c **** {
 399              		.loc 1 1596 1 is_stmt 1 view -0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 32
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403 0000 00B5     		push	{lr}
 404              	.LCFI14:
 405              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccnIi471.s 			page 36


 406              		.cfi_offset 14, -4
 407 0002 89B0     		sub	sp, sp, #36
 408              	.LCFI15:
 409              		.cfi_def_cfa_offset 40
1597:../../../mod/sensor/sensor.c **** ADC_ChannelConfTypeDef sConfig = {0};
 410              		.loc 1 1597 1 view .LVU95
 411              		.loc 1 1597 24 is_stmt 0 view .LVU96
 412 0004 0023     		movs	r3, #0
 413 0006 0193     		str	r3, [sp, #4]
 414 0008 0293     		str	r3, [sp, #8]
 415 000a 0393     		str	r3, [sp, #12]
 416 000c 0493     		str	r3, [sp, #16]
 417 000e 0593     		str	r3, [sp, #20]
 418 0010 0693     		str	r3, [sp, #24]
 419 0012 0793     		str	r3, [sp, #28]
1598:../../../mod/sensor/sensor.c **** sConfig.Channel                = ADC_CHANNEL_0;
 420              		.loc 1 1598 1 is_stmt 1 view .LVU97
 421              		.loc 1 1598 32 is_stmt 0 view .LVU98
 422 0014 0123     		movs	r3, #1
 423 0016 0193     		str	r3, [sp, #4]
1599:../../../mod/sensor/sensor.c **** sConfig.Rank                   = ADC_REGULAR_RANK_1;
 424              		.loc 1 1599 1 is_stmt 1 view .LVU99
 425              		.loc 1 1599 32 is_stmt 0 view .LVU100
 426 0018 0623     		movs	r3, #6
 427 001a 0293     		str	r3, [sp, #8]
1600:../../../mod/sensor/sensor.c **** sConfig.SamplingTime           = ADC_SAMPLETIME_1CYCLE_5;
 428              		.loc 1 1600 1 is_stmt 1 view .LVU101
1601:../../../mod/sensor/sensor.c **** sConfig.SingleDiff             = ADC_SINGLE_ENDED;
 429              		.loc 1 1601 1 view .LVU102
 430              		.loc 1 1601 32 is_stmt 0 view .LVU103
 431 001c 40F2FF73 		movw	r3, #2047
 432 0020 0493     		str	r3, [sp, #16]
1602:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber           = ADC_OFFSET_NONE;
 433              		.loc 1 1602 1 is_stmt 1 view .LVU104
 434              		.loc 1 1602 32 is_stmt 0 view .LVU105
 435 0022 0423     		movs	r3, #4
 436 0024 0593     		str	r3, [sp, #20]
1603:../../../mod/sensor/sensor.c **** sConfig.Offset                 = 0;
 437              		.loc 1 1603 1 is_stmt 1 view .LVU106
1604:../../../mod/sensor/sensor.c **** sConfig.OffsetSignedSaturation = DISABLE;
 438              		.loc 1 1604 1 view .LVU107
1605:../../../mod/sensor/sensor.c **** HAL_ADC_ConfigChannel( &hadc3, &sConfig );
 439              		.loc 1 1605 1 view .LVU108
 440 0026 0DEB0301 		add	r1, sp, r3
 441 002a 0348     		ldr	r0, .L25
 442 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 443              	.LVL19:
1606:../../../mod/sensor/sensor.c **** } /* pt5_adc_channel_select */
 444              		.loc 1 1606 1 is_stmt 0 view .LVU109
 445 0030 09B0     		add	sp, sp, #36
 446              	.LCFI16:
 447              		.cfi_def_cfa_offset 4
 448              		@ sp needed
 449 0032 5DF804FB 		ldr	pc, [sp], #4
 450              	.L26:
 451 0036 00BF     		.align	2
 452              	.L25:
ARM GAS  /tmp/ccnIi471.s 			page 37


 453 0038 00000000 		.word	hadc3
 454              		.cfi_endproc
 455              	.LFE346:
 457              		.section	.text.pt6_adc_channel_select,"ax",%progbits
 458              		.align	1
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 463              	pt6_adc_channel_select:
 464              	.LFB347:
1607:../../../mod/sensor/sensor.c **** 
1608:../../../mod/sensor/sensor.c **** 
1609:../../../mod/sensor/sensor.c **** /*******************************************************************************
1610:../../../mod/sensor/sensor.c **** *                                                                              *
1611:../../../mod/sensor/sensor.c **** * PROCEDURE:                                                                   *
1612:../../../mod/sensor/sensor.c **** * 		pt6_adc_channel_select                                                 *
1613:../../../mod/sensor/sensor.c **** *                                                                              *
1614:../../../mod/sensor/sensor.c **** * DESCRIPTION:                                                                 *
1615:../../../mod/sensor/sensor.c **** *       Select the adc channel for the pt6                                     *
1616:../../../mod/sensor/sensor.c **** *                                                                              *
1617:../../../mod/sensor/sensor.c **** *******************************************************************************/
1618:../../../mod/sensor/sensor.c **** static void pt6_adc_channel_select
1619:../../../mod/sensor/sensor.c **** 	(
1620:../../../mod/sensor/sensor.c **** 	void
1621:../../../mod/sensor/sensor.c **** 	)
1622:../../../mod/sensor/sensor.c **** {
 465              		.loc 1 1622 1 is_stmt 1 view -0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 32
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469 0000 00B5     		push	{lr}
 470              	.LCFI17:
 471              		.cfi_def_cfa_offset 4
 472              		.cfi_offset 14, -4
 473 0002 89B0     		sub	sp, sp, #36
 474              	.LCFI18:
 475              		.cfi_def_cfa_offset 40
1623:../../../mod/sensor/sensor.c **** ADC_ChannelConfTypeDef sConfig = {0};
 476              		.loc 1 1623 1 view .LVU111
 477              		.loc 1 1623 24 is_stmt 0 view .LVU112
 478 0004 0023     		movs	r3, #0
 479 0006 0193     		str	r3, [sp, #4]
 480 0008 0293     		str	r3, [sp, #8]
 481 000a 0393     		str	r3, [sp, #12]
 482 000c 0493     		str	r3, [sp, #16]
 483 000e 0593     		str	r3, [sp, #20]
 484 0010 0693     		str	r3, [sp, #24]
 485 0012 0793     		str	r3, [sp, #28]
1624:../../../mod/sensor/sensor.c **** sConfig.Channel                = ADC_CHANNEL_1;
 486              		.loc 1 1624 1 is_stmt 1 view .LVU113
 487              		.loc 1 1624 32 is_stmt 0 view .LVU114
 488 0014 084B     		ldr	r3, .L29
 489 0016 0193     		str	r3, [sp, #4]
1625:../../../mod/sensor/sensor.c **** sConfig.Rank                   = ADC_REGULAR_RANK_1;
 490              		.loc 1 1625 1 is_stmt 1 view .LVU115
 491              		.loc 1 1625 32 is_stmt 0 view .LVU116
 492 0018 0623     		movs	r3, #6
ARM GAS  /tmp/ccnIi471.s 			page 38


 493 001a 0293     		str	r3, [sp, #8]
1626:../../../mod/sensor/sensor.c **** sConfig.SamplingTime           = ADC_SAMPLETIME_1CYCLE_5;
 494              		.loc 1 1626 1 is_stmt 1 view .LVU117
1627:../../../mod/sensor/sensor.c **** sConfig.SingleDiff             = ADC_SINGLE_ENDED;
 495              		.loc 1 1627 1 view .LVU118
 496              		.loc 1 1627 32 is_stmt 0 view .LVU119
 497 001c 40F2FF73 		movw	r3, #2047
 498 0020 0493     		str	r3, [sp, #16]
1628:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber           = ADC_OFFSET_NONE;
 499              		.loc 1 1628 1 is_stmt 1 view .LVU120
 500              		.loc 1 1628 32 is_stmt 0 view .LVU121
 501 0022 0423     		movs	r3, #4
 502 0024 0593     		str	r3, [sp, #20]
1629:../../../mod/sensor/sensor.c **** sConfig.Offset                 = 0;
 503              		.loc 1 1629 1 is_stmt 1 view .LVU122
1630:../../../mod/sensor/sensor.c **** sConfig.OffsetSignedSaturation = DISABLE;
 504              		.loc 1 1630 1 view .LVU123
1631:../../../mod/sensor/sensor.c **** HAL_ADC_ConfigChannel( &hadc3, &sConfig );
 505              		.loc 1 1631 1 view .LVU124
 506 0026 0DEB0301 		add	r1, sp, r3
 507 002a 0448     		ldr	r0, .L29+4
 508 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 509              	.LVL20:
1632:../../../mod/sensor/sensor.c **** } /* pt6_adc_channel_select */
 510              		.loc 1 1632 1 is_stmt 0 view .LVU125
 511 0030 09B0     		add	sp, sp, #36
 512              	.LCFI19:
 513              		.cfi_def_cfa_offset 4
 514              		@ sp needed
 515 0032 5DF804FB 		ldr	pc, [sp], #4
 516              	.L30:
 517 0036 00BF     		.align	2
 518              	.L29:
 519 0038 02003004 		.word	70254594
 520 003c 00000000 		.word	hadc3
 521              		.cfi_endproc
 522              	.LFE347:
 524              		.section	.text.pt1_adc_channel_select,"ax",%progbits
 525              		.align	1
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 530              	pt1_adc_channel_select:
 531              	.LFB342:
1490:../../../mod/sensor/sensor.c **** ADC_ChannelConfTypeDef sConfig   = {0};
 532              		.loc 1 1490 1 is_stmt 1 view -0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 32
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536 0000 00B5     		push	{lr}
 537              	.LCFI20:
 538              		.cfi_def_cfa_offset 4
 539              		.cfi_offset 14, -4
 540 0002 89B0     		sub	sp, sp, #36
 541              	.LCFI21:
 542              		.cfi_def_cfa_offset 40
1491:../../../mod/sensor/sensor.c **** sConfig.Channel                  = ADC_CHANNEL_10;
ARM GAS  /tmp/ccnIi471.s 			page 39


 543              		.loc 1 1491 1 view .LVU127
1491:../../../mod/sensor/sensor.c **** sConfig.Channel                  = ADC_CHANNEL_10;
 544              		.loc 1 1491 24 is_stmt 0 view .LVU128
 545 0004 0023     		movs	r3, #0
 546 0006 0193     		str	r3, [sp, #4]
 547 0008 0293     		str	r3, [sp, #8]
 548 000a 0393     		str	r3, [sp, #12]
 549 000c 0493     		str	r3, [sp, #16]
 550 000e 0593     		str	r3, [sp, #20]
 551 0010 0693     		str	r3, [sp, #24]
 552 0012 0793     		str	r3, [sp, #28]
1492:../../../mod/sensor/sensor.c **** sConfig.Rank                     = ADC_REGULAR_RANK_1;
 553              		.loc 1 1492 1 is_stmt 1 view .LVU129
1492:../../../mod/sensor/sensor.c **** sConfig.Rank                     = ADC_REGULAR_RANK_1;
 554              		.loc 1 1492 34 is_stmt 0 view .LVU130
 555 0014 084B     		ldr	r3, .L33
 556 0016 0193     		str	r3, [sp, #4]
1493:../../../mod/sensor/sensor.c **** sConfig.SamplingTime             = ADC_SAMPLETIME_1CYCLE_5;
 557              		.loc 1 1493 1 is_stmt 1 view .LVU131
1493:../../../mod/sensor/sensor.c **** sConfig.SamplingTime             = ADC_SAMPLETIME_1CYCLE_5;
 558              		.loc 1 1493 34 is_stmt 0 view .LVU132
 559 0018 0623     		movs	r3, #6
 560 001a 0293     		str	r3, [sp, #8]
1494:../../../mod/sensor/sensor.c **** sConfig.SingleDiff               = ADC_SINGLE_ENDED;
 561              		.loc 1 1494 1 is_stmt 1 view .LVU133
1495:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber             = ADC_OFFSET_NONE;
 562              		.loc 1 1495 1 view .LVU134
1495:../../../mod/sensor/sensor.c **** sConfig.OffsetNumber             = ADC_OFFSET_NONE;
 563              		.loc 1 1495 34 is_stmt 0 view .LVU135
 564 001c 40F2FF73 		movw	r3, #2047
 565 0020 0493     		str	r3, [sp, #16]
1496:../../../mod/sensor/sensor.c **** sConfig.Offset                   = 0;
 566              		.loc 1 1496 1 is_stmt 1 view .LVU136
1496:../../../mod/sensor/sensor.c **** sConfig.Offset                   = 0;
 567              		.loc 1 1496 34 is_stmt 0 view .LVU137
 568 0022 0423     		movs	r3, #4
 569 0024 0593     		str	r3, [sp, #20]
1497:../../../mod/sensor/sensor.c **** sConfig.OffsetSignedSaturation   = DISABLE;
 570              		.loc 1 1497 1 is_stmt 1 view .LVU138
1498:../../../mod/sensor/sensor.c **** HAL_ADC_ConfigChannel( &hadc1, &sConfig );
 571              		.loc 1 1498 1 view .LVU139
1499:../../../mod/sensor/sensor.c **** 
 572              		.loc 1 1499 1 view .LVU140
 573 0026 0DEB0301 		add	r1, sp, r3
 574 002a 0448     		ldr	r0, .L33+4
 575 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 576              	.LVL21:
1501:../../../mod/sensor/sensor.c **** 
 577              		.loc 1 1501 1 is_stmt 0 view .LVU141
 578 0030 09B0     		add	sp, sp, #36
 579              	.LCFI22:
 580              		.cfi_def_cfa_offset 4
 581              		@ sp needed
 582 0032 5DF804FB 		ldr	pc, [sp], #4
 583              	.L34:
 584 0036 00BF     		.align	2
 585              	.L33:
ARM GAS  /tmp/ccnIi471.s 			page 40


 586 0038 0004002A 		.word	704644096
 587 003c 00000000 		.word	hadc1
 588              		.cfi_endproc
 589              	.LFE342:
 591              		.section	.text.sensor_init,"ax",%progbits
 592              		.align	1
 593              		.global	sensor_init
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 598              	sensor_init:
 599              	.LFB333:
 158:../../../mod/sensor/sensor.c **** /* Setup the sensor id hash table */
 600              		.loc 1 158 1 is_stmt 1 view -0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 190:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].offset = 4;  /* SENSOR_PT1  */
 605              		.loc 1 190 2 view .LVU143
 190:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].offset = 4;  /* SENSOR_PT1  */
 606              		.loc 1 190 41 is_stmt 0 view .LVU144
 607 0000 124B     		ldr	r3, .L36
 608 0002 0022     		movs	r2, #0
 609 0004 1A70     		strb	r2, [r3]
 191:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].offset = 8;  /* SENSOR_PT2  */
 610              		.loc 1 191 2 is_stmt 1 view .LVU145
 191:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].offset = 8;  /* SENSOR_PT2  */
 611              		.loc 1 191 41 is_stmt 0 view .LVU146
 612 0006 0422     		movs	r2, #4
 613 0008 1A72     		strb	r2, [r3, #8]
 192:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].offset = 12; /* SENSOR_PT3  */
 614              		.loc 1 192 2 is_stmt 1 view .LVU147
 192:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].offset = 12; /* SENSOR_PT3  */
 615              		.loc 1 192 41 is_stmt 0 view .LVU148
 616 000a 0821     		movs	r1, #8
 617 000c 1974     		strb	r1, [r3, #16]
 193:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].offset = 16; /* SENSOR_PT4  */
 618              		.loc 1 193 2 is_stmt 1 view .LVU149
 193:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].offset = 16; /* SENSOR_PT4  */
 619              		.loc 1 193 41 is_stmt 0 view .LVU150
 620 000e 0C21     		movs	r1, #12
 621 0010 1976     		strb	r1, [r3, #24]
 194:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].offset = 20; /* SENSOR_PT5  */
 622              		.loc 1 194 2 is_stmt 1 view .LVU151
 194:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].offset = 20; /* SENSOR_PT5  */
 623              		.loc 1 194 41 is_stmt 0 view .LVU152
 624 0012 1021     		movs	r1, #16
 625 0014 83F82010 		strb	r1, [r3, #32]
 195:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].offset = 24; /* SENSOR_PT6  */
 626              		.loc 1 195 2 is_stmt 1 view .LVU153
 195:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].offset = 24; /* SENSOR_PT6  */
 627              		.loc 1 195 41 is_stmt 0 view .LVU154
 628 0018 1421     		movs	r1, #20
 629 001a 83F82810 		strb	r1, [r3, #40]
 196:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].offset = 28; /* SENSOR_PT7  */
 630              		.loc 1 196 2 is_stmt 1 view .LVU155
ARM GAS  /tmp/ccnIi471.s 			page 41


 196:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].offset = 28; /* SENSOR_PT7  */
 631              		.loc 1 196 41 is_stmt 0 view .LVU156
 632 001e 1821     		movs	r1, #24
 633 0020 83F83010 		strb	r1, [r3, #48]
 197:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].offset = 36; /* SENSOR_TC   */
 634              		.loc 1 197 2 is_stmt 1 view .LVU157
 197:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].offset = 36; /* SENSOR_TC   */
 635              		.loc 1 197 41 is_stmt 0 view .LVU158
 636 0024 1C21     		movs	r1, #28
 637 0026 83F83810 		strb	r1, [r3, #56]
 198:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].offset = 32; /* SENSOR_LC   */
 638              		.loc 1 198 2 is_stmt 1 view .LVU159
 198:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].offset = 32; /* SENSOR_LC   */
 639              		.loc 1 198 41 is_stmt 0 view .LVU160
 640 002a 2421     		movs	r1, #36
 641 002c 83F84010 		strb	r1, [r3, #64]
 199:../../../mod/sensor/sensor.c **** 
 642              		.loc 1 199 2 is_stmt 1 view .LVU161
 199:../../../mod/sensor/sensor.c **** 
 643              		.loc 1 199 41 is_stmt 0 view .LVU162
 644 0030 2021     		movs	r1, #32
 645 0032 83F84810 		strb	r1, [r3, #72]
 202:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].size   = 4;  /* SENSOR_PT1  */
 646              		.loc 1 202 2 is_stmt 1 view .LVU163
 202:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 1  ].size   = 4;  /* SENSOR_PT1  */
 647              		.loc 1 202 41 is_stmt 0 view .LVU164
 648 0036 5A60     		str	r2, [r3, #4]
 203:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].size   = 4;  /* SENSOR_PT2  */
 649              		.loc 1 203 2 is_stmt 1 view .LVU165
 203:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 2  ].size   = 4;  /* SENSOR_PT2  */
 650              		.loc 1 203 41 is_stmt 0 view .LVU166
 651 0038 DA60     		str	r2, [r3, #12]
 204:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].size   = 4;  /* SENSOR_PT3  */
 652              		.loc 1 204 2 is_stmt 1 view .LVU167
 204:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 3  ].size   = 4;  /* SENSOR_PT3  */
 653              		.loc 1 204 41 is_stmt 0 view .LVU168
 654 003a 5A61     		str	r2, [r3, #20]
 205:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].size   = 4;  /* SENSOR_PT4  */
 655              		.loc 1 205 2 is_stmt 1 view .LVU169
 205:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 4  ].size   = 4;  /* SENSOR_PT4  */
 656              		.loc 1 205 41 is_stmt 0 view .LVU170
 657 003c DA61     		str	r2, [r3, #28]
 206:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].size   = 4;  /* SENSOR_PT5  */
 658              		.loc 1 206 2 is_stmt 1 view .LVU171
 206:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 5  ].size   = 4;  /* SENSOR_PT5  */
 659              		.loc 1 206 41 is_stmt 0 view .LVU172
 660 003e 5A62     		str	r2, [r3, #36]
 207:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].size   = 4;  /* SENSOR_PT6  */
 661              		.loc 1 207 2 is_stmt 1 view .LVU173
 207:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 6  ].size   = 4;  /* SENSOR_PT6  */
 662              		.loc 1 207 41 is_stmt 0 view .LVU174
 663 0040 DA62     		str	r2, [r3, #44]
 208:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].size   = 4;  /* SENSOR_PT7  */
 664              		.loc 1 208 2 is_stmt 1 view .LVU175
 208:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 7  ].size   = 4;  /* SENSOR_PT7  */
 665              		.loc 1 208 41 is_stmt 0 view .LVU176
 666 0042 5A63     		str	r2, [r3, #52]
ARM GAS  /tmp/ccnIi471.s 			page 42


 209:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].size   = 4;  /* SENSOR_TC   */
 667              		.loc 1 209 2 is_stmt 1 view .LVU177
 209:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 8  ].size   = 4;  /* SENSOR_TC   */
 668              		.loc 1 209 41 is_stmt 0 view .LVU178
 669 0044 DA63     		str	r2, [r3, #60]
 210:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].size   = 4;  /* SENSOR_LC   */
 670              		.loc 1 210 2 is_stmt 1 view .LVU179
 210:../../../mod/sensor/sensor.c **** 	sensor_size_offsets_table[ 9  ].size   = 4;  /* SENSOR_LC   */
 671              		.loc 1 210 41 is_stmt 0 view .LVU180
 672 0046 5A64     		str	r2, [r3, #68]
 211:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 673              		.loc 1 211 2 is_stmt 1 view .LVU181
 211:../../../mod/sensor/sensor.c **** #elif defined( FLIGHT_COMPUTER_LITE )
 674              		.loc 1 211 41 is_stmt 0 view .LVU182
 675 0048 DA64     		str	r2, [r3, #76]
 230:../../../mod/sensor/sensor.c **** 
 676              		.loc 1 230 1 view .LVU183
 677 004a 7047     		bx	lr
 678              	.L37:
 679              		.align	2
 680              	.L36:
 681 004c 00000000 		.word	sensor_size_offsets_table
 682              		.cfi_endproc
 683              	.LFE333:
 685              		.section	.text.sensor_conv_pressure,"ax",%progbits
 686              		.align	1
 687              		.global	sensor_conv_pressure
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 692              	sensor_conv_pressure:
 693              	.LVL22:
 694              	.LFB337:
1195:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 695              		.loc 1 1195 1 is_stmt 1 view -0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		@ link register save eliminated.
1195:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 700              		.loc 1 1195 1 is_stmt 0 view .LVU185
 701 0000 00EE100A 		vmov	s0, r0	@ int
1199:../../../mod/sensor/sensor.c **** float gain;    /* Amplifier gain */
 702              		.loc 1 1199 1 is_stmt 1 view .LVU186
1200:../../../mod/sensor/sensor.c **** 
 703              		.loc 1 1200 1 view .LVU187
1206:../../../mod/sensor/sensor.c **** gain    = 0;
 704              		.loc 1 1206 1 view .LVU188
 705              	.LVL23:
1207:../../../mod/sensor/sensor.c **** 
 706              		.loc 1 1207 1 view .LVU189
1215:../../../mod/sensor/sensor.c **** 
 707              		.loc 1 1215 1 view .LVU190
1215:../../../mod/sensor/sensor.c **** 
 708              		.loc 1 1215 38 is_stmt 0 view .LVU191
 709 0004 B8EE400A 		vcvt.f32.u32	s0, s0
 710 0008 B7EEC00A 		vcvt.f64.f32	d0, s0
ARM GAS  /tmp/ccnIi471.s 			page 43


1215:../../../mod/sensor/sensor.c **** 
 711              		.loc 1 1215 35 view .LVU192
 712 000c 9FED0A7B 		vldr.64	d7, .L41
 713 0010 20EE070B 		vmul.f64	d0, d0, d7
1215:../../../mod/sensor/sensor.c **** 
 714              		.loc 1 1215 9 view .LVU193
 715 0014 B7EEC00B 		vcvt.f32.f64	s0, d0
 716              	.LVL24:
1218:../../../mod/sensor/sensor.c **** 	{
 717              		.loc 1 1218 1 is_stmt 1 view .LVU194
1218:../../../mod/sensor/sensor.c **** 	{
 718              		.loc 1 1218 4 is_stmt 0 view .LVU195
 719 0018 0329     		cmp	r1, #3
 720 001a 04D9     		bls	.L39
1220:../../../mod/sensor/sensor.c **** 	}
 721              		.loc 1 1220 2 is_stmt 1 view .LVU196
1220:../../../mod/sensor/sensor.c **** 	}
 722              		.loc 1 1220 18 is_stmt 0 view .LVU197
 723 001c DFED0A7A 		vldr.32	s15, .L41+16
 724 0020 20EE270A 		vmul.f32	s0, s0, s15
 725              	.LVL25:
1220:../../../mod/sensor/sensor.c **** 	}
 726              		.loc 1 1220 18 view .LVU198
 727 0024 7047     		bx	lr
 728              	.LVL26:
 729              	.L39:
1224:../../../mod/sensor/sensor.c **** 	return ( voltage*( 1000.0/(gain*0.1) ) );
 730              		.loc 1 1224 2 is_stmt 1 view .LVU199
1225:../../../mod/sensor/sensor.c **** 	}
 731              		.loc 1 1225 2 view .LVU200
1225:../../../mod/sensor/sensor.c **** 	}
 732              		.loc 1 1225 18 is_stmt 0 view .LVU201
 733 0026 B7EEC00A 		vcvt.f64.f32	d0, s0
 734              	.LVL27:
1225:../../../mod/sensor/sensor.c **** 	}
 735              		.loc 1 1225 18 view .LVU202
 736 002a 9FED057B 		vldr.64	d7, .L41+8
 737              	.LVL28:
1225:../../../mod/sensor/sensor.c **** 	}
 738              		.loc 1 1225 18 view .LVU203
 739 002e 20EE070B 		vmul.f64	d0, d0, d7
 740 0032 B7EEC00B 		vcvt.f32.f64	s0, d0
1227:../../../mod/sensor/sensor.c **** #endif
 741              		.loc 1 1227 1 view .LVU204
 742 0036 7047     		bx	lr
 743              	.L42:
 744              		.align	3
 745              	.L41:
 746 0038 66666666 		.word	1717986918
 747 003c 66660A3F 		.word	1057646182
 748 0040 757C2E87 		.word	-2026996619
 749 0044 53F77340 		.word	1081341779
 750 0048 0000C843 		.word	1137180672
 751              		.cfi_endproc
 752              	.LFE337:
 754              		.section	.text.sensor_adc_burst_read,"ax",%progbits
 755              		.align	1
ARM GAS  /tmp/ccnIi471.s 			page 44


 756              		.global	sensor_adc_burst_read
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 761              	sensor_adc_burst_read:
 762              	.LVL29:
 763              	.LFB340:
1340:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 764              		.loc 1 1340 1 is_stmt 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 8
 767              		@ frame_needed = 0, uses_anonymous_args = 0
1340:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 768              		.loc 1 1340 1 is_stmt 0 view .LVU206
 769 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 770              	.LCFI23:
 771              		.cfi_def_cfa_offset 20
 772              		.cfi_offset 4, -20
 773              		.cfi_offset 5, -16
 774              		.cfi_offset 6, -12
 775              		.cfi_offset 7, -8
 776              		.cfi_offset 14, -4
 777 0002 83B0     		sub	sp, sp, #12
 778              	.LCFI24:
 779              		.cfi_def_cfa_offset 32
 780 0004 0546     		mov	r5, r0
1344:../../../mod/sensor/sensor.c **** uint16_t               mux_pins_bitmask; /* GPIO Pins for PT1-3 MUX           */
 781              		.loc 1 1344 1 is_stmt 1 view .LVU207
1345:../../../mod/sensor/sensor.c **** 
 782              		.loc 1 1345 1 view .LVU208
1351:../../../mod/sensor/sensor.c **** mux_pins_bitmask = 0;
 783              		.loc 1 1351 1 view .LVU209
 784 0006 0027     		movs	r7, #0
 785 0008 ADF80470 		strh	r7, [sp, #4]	@ movhi
1352:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
 786              		.loc 1 1352 1 view .LVU210
 787              	.LVL30:
1353:../../../mod/sensor/sensor.c **** 
 788              		.loc 1 1353 1 view .LVU211
 789 000c 754E     		ldr	r6, .L53
 790 000e 3A46     		mov	r2, r7
 791 0010 4FF46061 		mov	r1, #3584
 792 0014 3046     		mov	r0, r6
 793              	.LVL31:
1353:../../../mod/sensor/sensor.c **** 
 794              		.loc 1 1353 1 is_stmt 0 view .LVU212
 795 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 796              	.LVL32:
1361:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
 797              		.loc 1 1361 1 is_stmt 1 view .LVU213
 798 001a FFF7FEFF 		bl	pt1_adc_channel_select
 799              	.LVL33:
1362:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
 800              		.loc 1 1362 1 view .LVU214
 801 001e 724C     		ldr	r4, .L53+4
 802 0020 2046     		mov	r0, r4
 803 0022 FFF7FEFF 		bl	HAL_ADC_Start
ARM GAS  /tmp/ccnIi471.s 			page 45


 804              	.LVL34:
1363:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[0] = HAL_ADC_GetValue( &hadc1 );
 805              		.loc 1 1363 1 view .LVU215
1363:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[0] = HAL_ADC_GetValue( &hadc1 );
 806              		.loc 1 1363 17 is_stmt 0 view .LVU216
 807 0026 6421     		movs	r1, #100
 808 0028 2046     		mov	r0, r4
 809 002a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 810              	.LVL35:
1363:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[0] = HAL_ADC_GetValue( &hadc1 );
 811              		.loc 1 1363 15 view .LVU217
 812 002e 8DF80400 		strb	r0, [sp, #4]
1364:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 813              		.loc 1 1364 1 is_stmt 1 view .LVU218
1364:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 814              		.loc 1 1364 38 is_stmt 0 view .LVU219
 815 0032 2046     		mov	r0, r4
 816 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 817              	.LVL36:
1364:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 818              		.loc 1 1364 36 view .LVU220
 819 0038 2860     		str	r0, [r5]
1365:../../../mod/sensor/sensor.c **** pt7_adc_channel_select();
 820              		.loc 1 1365 1 is_stmt 1 view .LVU221
 821 003a 2046     		mov	r0, r4
 822 003c FFF7FEFF 		bl	HAL_ADC_Stop
 823              	.LVL37:
1366:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
 824              		.loc 1 1366 1 view .LVU222
 825 0040 FFF7FEFF 		bl	pt7_adc_channel_select
 826              	.LVL38:
1367:../../../mod/sensor/sensor.c **** adc_status[1] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
 827              		.loc 1 1367 1 view .LVU223
 828 0044 2046     		mov	r0, r4
 829 0046 FFF7FEFF 		bl	HAL_ADC_Start
 830              	.LVL39:
1368:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[6] = HAL_ADC_GetValue( &hadc1 );
 831              		.loc 1 1368 1 view .LVU224
1368:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[6] = HAL_ADC_GetValue( &hadc1 );
 832              		.loc 1 1368 17 is_stmt 0 view .LVU225
 833 004a 6421     		movs	r1, #100
 834 004c 2046     		mov	r0, r4
 835 004e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 836              	.LVL40:
1368:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[6] = HAL_ADC_GetValue( &hadc1 );
 837              		.loc 1 1368 15 view .LVU226
 838 0052 8DF80500 		strb	r0, [sp, #5]
1369:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 839              		.loc 1 1369 1 is_stmt 1 view .LVU227
1369:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 840              		.loc 1 1369 38 is_stmt 0 view .LVU228
 841 0056 2046     		mov	r0, r4
 842 0058 FFF7FEFF 		bl	HAL_ADC_GetValue
 843              	.LVL41:
1369:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 844              		.loc 1 1369 36 view .LVU229
 845 005c A861     		str	r0, [r5, #24]
ARM GAS  /tmp/ccnIi471.s 			page 46


1370:../../../mod/sensor/sensor.c **** mux_pins_bitmask = mux_map( 1 );
 846              		.loc 1 1370 1 is_stmt 1 view .LVU230
 847 005e 2046     		mov	r0, r4
 848 0060 FFF7FEFF 		bl	HAL_ADC_Stop
 849              	.LVL42:
1371:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
 850              		.loc 1 1371 1 view .LVU231
1372:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, mux_pins_bitmask     , GPIO_PIN_SET   );
 851              		.loc 1 1372 1 view .LVU232
 852 0064 3A46     		mov	r2, r7
 853 0066 4FF46061 		mov	r1, #3584
 854 006a 3046     		mov	r0, r6
 855 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 856              	.LVL43:
1373:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK || adc_status[1] != HAL_OK )
 857              		.loc 1 1373 1 view .LVU233
 858 0070 0122     		movs	r2, #1
 859 0072 4FF40071 		mov	r1, #512
 860 0076 3046     		mov	r0, r6
 861 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 862              	.LVL44:
1374:../../../mod/sensor/sensor.c **** 	{
 863              		.loc 1 1374 1 view .LVU234
1374:../../../mod/sensor/sensor.c **** 	{
 864              		.loc 1 1374 16 is_stmt 0 view .LVU235
 865 007c 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
1374:../../../mod/sensor/sensor.c **** 	{
 866              		.loc 1 1374 4 view .LVU236
 867 0080 002B     		cmp	r3, #0
 868 0082 40F09F80 		bne	.L45
1374:../../../mod/sensor/sensor.c **** 	{
 869              		.loc 1 1374 43 discriminator 1 view .LVU237
 870 0086 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
1374:../../../mod/sensor/sensor.c **** 	{
 871              		.loc 1 1374 30 discriminator 1 view .LVU238
 872 008a 002B     		cmp	r3, #0
 873 008c 40F09C80 		bne	.L46
1380:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc2 );
 874              		.loc 1 1380 1 is_stmt 1 view .LVU239
 875 0090 FFF7FEFF 		bl	loadcell_adc_channel_select
 876              	.LVL45:
1381:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc2, ADC_TIMEOUT );
 877              		.loc 1 1381 1 view .LVU240
 878 0094 554C     		ldr	r4, .L53+8
 879 0096 2046     		mov	r0, r4
 880 0098 FFF7FEFF 		bl	HAL_ADC_Start
 881              	.LVL46:
1382:../../../mod/sensor/sensor.c **** sensor_data_ptr -> load_cell_force = HAL_ADC_GetValue( &hadc2 );
 882              		.loc 1 1382 1 view .LVU241
1382:../../../mod/sensor/sensor.c **** sensor_data_ptr -> load_cell_force = HAL_ADC_GetValue( &hadc2 );
 883              		.loc 1 1382 17 is_stmt 0 view .LVU242
 884 009c 6421     		movs	r1, #100
 885 009e 2046     		mov	r0, r4
 886 00a0 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 887              	.LVL47:
1382:../../../mod/sensor/sensor.c **** sensor_data_ptr -> load_cell_force = HAL_ADC_GetValue( &hadc2 );
 888              		.loc 1 1382 15 view .LVU243
ARM GAS  /tmp/ccnIi471.s 			page 47


 889 00a4 8DF80400 		strb	r0, [sp, #4]
1383:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
 890              		.loc 1 1383 1 is_stmt 1 view .LVU244
1383:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
 891              		.loc 1 1383 38 is_stmt 0 view .LVU245
 892 00a8 2046     		mov	r0, r4
 893 00aa FFF7FEFF 		bl	HAL_ADC_GetValue
 894              	.LVL48:
1383:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
 895              		.loc 1 1383 36 view .LVU246
 896 00ae 2862     		str	r0, [r5, #32]
1384:../../../mod/sensor/sensor.c **** pt8_adc_channel_select();
 897              		.loc 1 1384 1 is_stmt 1 view .LVU247
 898 00b0 2046     		mov	r0, r4
 899 00b2 FFF7FEFF 		bl	HAL_ADC_Stop
 900              	.LVL49:
1385:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc2 );
 901              		.loc 1 1385 1 view .LVU248
 902 00b6 FFF7FEFF 		bl	pt8_adc_channel_select
 903              	.LVL50:
1386:../../../mod/sensor/sensor.c **** adc_status[1] = HAL_ADC_PollForConversion( &hadc2, ADC_TIMEOUT );
 904              		.loc 1 1386 1 view .LVU249
 905 00ba 2046     		mov	r0, r4
 906 00bc FFF7FEFF 		bl	HAL_ADC_Start
 907              	.LVL51:
1387:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[7] = HAL_ADC_GetValue( &hadc2 );
 908              		.loc 1 1387 1 view .LVU250
1387:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[7] = HAL_ADC_GetValue( &hadc2 );
 909              		.loc 1 1387 17 is_stmt 0 view .LVU251
 910 00c0 6421     		movs	r1, #100
 911 00c2 2046     		mov	r0, r4
 912 00c4 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 913              	.LVL52:
1387:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[7] = HAL_ADC_GetValue( &hadc2 );
 914              		.loc 1 1387 15 view .LVU252
 915 00c8 8DF80500 		strb	r0, [sp, #5]
1388:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
 916              		.loc 1 1388 1 is_stmt 1 view .LVU253
1388:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
 917              		.loc 1 1388 38 is_stmt 0 view .LVU254
 918 00cc 2046     		mov	r0, r4
 919 00ce FFF7FEFF 		bl	HAL_ADC_GetValue
 920              	.LVL53:
1388:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc2 );
 921              		.loc 1 1388 36 view .LVU255
 922 00d2 E861     		str	r0, [r5, #28]
1389:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK || adc_status[1] != HAL_OK )
 923              		.loc 1 1389 1 is_stmt 1 view .LVU256
 924 00d4 2046     		mov	r0, r4
 925 00d6 FFF7FEFF 		bl	HAL_ADC_Stop
 926              	.LVL54:
1390:../../../mod/sensor/sensor.c **** 	{
 927              		.loc 1 1390 1 view .LVU257
1390:../../../mod/sensor/sensor.c **** 	{
 928              		.loc 1 1390 16 is_stmt 0 view .LVU258
 929 00da 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
1390:../../../mod/sensor/sensor.c **** 	{
ARM GAS  /tmp/ccnIi471.s 			page 48


 930              		.loc 1 1390 4 view .LVU259
 931 00de 002B     		cmp	r3, #0
 932 00e0 75D1     		bne	.L47
1390:../../../mod/sensor/sensor.c **** 	{
 933              		.loc 1 1390 43 discriminator 1 view .LVU260
 934 00e2 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
1390:../../../mod/sensor/sensor.c **** 	{
 935              		.loc 1 1390 30 discriminator 1 view .LVU261
 936 00e6 002B     		cmp	r3, #0
 937 00e8 73D1     		bne	.L48
1396:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
 938              		.loc 1 1396 1 is_stmt 1 view .LVU262
 939 00ea FFF7FEFF 		bl	pt1_adc_channel_select
 940              	.LVL55:
1397:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
 941              		.loc 1 1397 1 view .LVU263
 942 00ee 3E4C     		ldr	r4, .L53+4
 943 00f0 2046     		mov	r0, r4
 944 00f2 FFF7FEFF 		bl	HAL_ADC_Start
 945              	.LVL56:
1398:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[1] = HAL_ADC_GetValue( &hadc1 );
 946              		.loc 1 1398 1 view .LVU264
1398:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[1] = HAL_ADC_GetValue( &hadc1 );
 947              		.loc 1 1398 17 is_stmt 0 view .LVU265
 948 00f6 6421     		movs	r1, #100
 949 00f8 2046     		mov	r0, r4
 950 00fa FFF7FEFF 		bl	HAL_ADC_PollForConversion
 951              	.LVL57:
1398:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[1] = HAL_ADC_GetValue( &hadc1 );
 952              		.loc 1 1398 15 view .LVU266
 953 00fe 8DF80400 		strb	r0, [sp, #4]
1399:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 954              		.loc 1 1399 1 is_stmt 1 view .LVU267
1399:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 955              		.loc 1 1399 38 is_stmt 0 view .LVU268
 956 0102 2046     		mov	r0, r4
 957 0104 FFF7FEFF 		bl	HAL_ADC_GetValue
 958              	.LVL58:
1399:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 959              		.loc 1 1399 36 view .LVU269
 960 0108 6860     		str	r0, [r5, #4]
1400:../../../mod/sensor/sensor.c **** mux_pins_bitmask = mux_map( 2 );
 961              		.loc 1 1400 1 is_stmt 1 view .LVU270
 962 010a 2046     		mov	r0, r4
 963 010c FFF7FEFF 		bl	HAL_ADC_Stop
 964              	.LVL59:
1401:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
 965              		.loc 1 1401 1 view .LVU271
1402:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, mux_pins_bitmask     , GPIO_PIN_SET   );
 966              		.loc 1 1402 1 view .LVU272
 967 0110 3A46     		mov	r2, r7
 968 0112 4FF46061 		mov	r1, #3584
 969 0116 3046     		mov	r0, r6
 970 0118 FFF7FEFF 		bl	HAL_GPIO_WritePin
 971              	.LVL60:
1403:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK )
 972              		.loc 1 1403 1 view .LVU273
ARM GAS  /tmp/ccnIi471.s 			page 49


 973 011c 0122     		movs	r2, #1
 974 011e 4FF48061 		mov	r1, #1024
 975 0122 3046     		mov	r0, r6
 976 0124 FFF7FEFF 		bl	HAL_GPIO_WritePin
 977              	.LVL61:
1404:../../../mod/sensor/sensor.c **** 	{
 978              		.loc 1 1404 1 view .LVU274
1404:../../../mod/sensor/sensor.c **** 	{
 979              		.loc 1 1404 16 is_stmt 0 view .LVU275
 980 0128 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
1404:../../../mod/sensor/sensor.c **** 	{
 981              		.loc 1 1404 4 view .LVU276
 982 012c 002B     		cmp	r3, #0
 983 012e 52D1     		bne	.L49
1410:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc3 );
 984              		.loc 1 1410 1 is_stmt 1 view .LVU277
 985 0130 FFF7FEFF 		bl	pt5_adc_channel_select
 986              	.LVL62:
1411:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc3, ADC_TIMEOUT );
 987              		.loc 1 1411 1 view .LVU278
 988 0134 2E4C     		ldr	r4, .L53+12
 989 0136 2046     		mov	r0, r4
 990 0138 FFF7FEFF 		bl	HAL_ADC_Start
 991              	.LVL63:
1412:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[4] = HAL_ADC_GetValue( &hadc3 );
 992              		.loc 1 1412 1 view .LVU279
1412:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[4] = HAL_ADC_GetValue( &hadc3 );
 993              		.loc 1 1412 17 is_stmt 0 view .LVU280
 994 013c 6421     		movs	r1, #100
 995 013e 2046     		mov	r0, r4
 996 0140 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 997              	.LVL64:
1412:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[4] = HAL_ADC_GetValue( &hadc3 );
 998              		.loc 1 1412 15 view .LVU281
 999 0144 8DF80400 		strb	r0, [sp, #4]
1413:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
 1000              		.loc 1 1413 1 is_stmt 1 view .LVU282
1413:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
 1001              		.loc 1 1413 38 is_stmt 0 view .LVU283
 1002 0148 2046     		mov	r0, r4
 1003 014a FFF7FEFF 		bl	HAL_ADC_GetValue
 1004              	.LVL65:
1413:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
 1005              		.loc 1 1413 36 view .LVU284
 1006 014e 2861     		str	r0, [r5, #16]
1414:../../../mod/sensor/sensor.c **** pt6_adc_channel_select();
 1007              		.loc 1 1414 1 is_stmt 1 view .LVU285
 1008 0150 2046     		mov	r0, r4
 1009 0152 FFF7FEFF 		bl	HAL_ADC_Stop
 1010              	.LVL66:
1415:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc3 );
 1011              		.loc 1 1415 1 view .LVU286
 1012 0156 FFF7FEFF 		bl	pt6_adc_channel_select
 1013              	.LVL67:
1416:../../../mod/sensor/sensor.c **** adc_status[1] = HAL_ADC_PollForConversion( &hadc3, ADC_TIMEOUT );
 1014              		.loc 1 1416 1 view .LVU287
 1015 015a 2046     		mov	r0, r4
ARM GAS  /tmp/ccnIi471.s 			page 50


 1016 015c FFF7FEFF 		bl	HAL_ADC_Start
 1017              	.LVL68:
1417:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[5] = HAL_ADC_GetValue( &hadc3 );
 1018              		.loc 1 1417 1 view .LVU288
1417:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[5] = HAL_ADC_GetValue( &hadc3 );
 1019              		.loc 1 1417 17 is_stmt 0 view .LVU289
 1020 0160 6421     		movs	r1, #100
 1021 0162 2046     		mov	r0, r4
 1022 0164 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1023              	.LVL69:
1417:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[5] = HAL_ADC_GetValue( &hadc3 );
 1024              		.loc 1 1417 15 view .LVU290
 1025 0168 8DF80500 		strb	r0, [sp, #5]
1418:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
 1026              		.loc 1 1418 1 is_stmt 1 view .LVU291
1418:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
 1027              		.loc 1 1418 38 is_stmt 0 view .LVU292
 1028 016c 2046     		mov	r0, r4
 1029 016e FFF7FEFF 		bl	HAL_ADC_GetValue
 1030              	.LVL70:
1418:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc3 );
 1031              		.loc 1 1418 36 view .LVU293
 1032 0172 6861     		str	r0, [r5, #20]
1419:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK || adc_status[1] != HAL_OK )
 1033              		.loc 1 1419 1 is_stmt 1 view .LVU294
 1034 0174 2046     		mov	r0, r4
 1035 0176 FFF7FEFF 		bl	HAL_ADC_Stop
 1036              	.LVL71:
1420:../../../mod/sensor/sensor.c **** 	{
 1037              		.loc 1 1420 1 view .LVU295
1420:../../../mod/sensor/sensor.c **** 	{
 1038              		.loc 1 1420 16 is_stmt 0 view .LVU296
 1039 017a 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
1420:../../../mod/sensor/sensor.c **** 	{
 1040              		.loc 1 1420 4 view .LVU297
 1041 017e 63BB     		cbnz	r3, .L50
1420:../../../mod/sensor/sensor.c **** 	{
 1042              		.loc 1 1420 43 discriminator 1 view .LVU298
 1043 0180 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
1420:../../../mod/sensor/sensor.c **** 	{
 1044              		.loc 1 1420 30 discriminator 1 view .LVU299
 1045 0184 5BBB     		cbnz	r3, .L51
1426:../../../mod/sensor/sensor.c **** HAL_ADC_Start( &hadc1 );
 1046              		.loc 1 1426 1 is_stmt 1 view .LVU300
 1047 0186 FFF7FEFF 		bl	pt1_adc_channel_select
 1048              	.LVL72:
1427:../../../mod/sensor/sensor.c **** adc_status[0] = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT );
 1049              		.loc 1 1427 1 view .LVU301
 1050 018a 174C     		ldr	r4, .L53+4
 1051 018c 2046     		mov	r0, r4
 1052 018e FFF7FEFF 		bl	HAL_ADC_Start
 1053              	.LVL73:
1428:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[2] = HAL_ADC_GetValue( &hadc1 );
 1054              		.loc 1 1428 1 view .LVU302
1428:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[2] = HAL_ADC_GetValue( &hadc1 );
 1055              		.loc 1 1428 17 is_stmt 0 view .LVU303
 1056 0192 6421     		movs	r1, #100
ARM GAS  /tmp/ccnIi471.s 			page 51


 1057 0194 2046     		mov	r0, r4
 1058 0196 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1059              	.LVL74:
1428:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[2] = HAL_ADC_GetValue( &hadc1 );
 1060              		.loc 1 1428 15 view .LVU304
 1061 019a 8DF80400 		strb	r0, [sp, #4]
1429:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[3] = 0;
 1062              		.loc 1 1429 1 is_stmt 1 view .LVU305
1429:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[3] = 0;
 1063              		.loc 1 1429 38 is_stmt 0 view .LVU306
 1064 019e 2046     		mov	r0, r4
 1065 01a0 FFF7FEFF 		bl	HAL_ADC_GetValue
 1066              	.LVL75:
1429:../../../mod/sensor/sensor.c **** sensor_data_ptr -> pt_pressures[3] = 0;
 1067              		.loc 1 1429 36 view .LVU307
 1068 01a4 A860     		str	r0, [r5, #8]
1430:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 1069              		.loc 1 1430 1 is_stmt 1 view .LVU308
1430:../../../mod/sensor/sensor.c **** HAL_ADC_Stop( &hadc1 );
 1070              		.loc 1 1430 36 is_stmt 0 view .LVU309
 1071 01a6 EF60     		str	r7, [r5, #12]
1431:../../../mod/sensor/sensor.c **** HAL_GPIO_WritePin( PRESSURE_GPIO_PORT, PRESSURE_MUX_ALL_PINS, GPIO_PIN_RESET );
 1072              		.loc 1 1431 1 is_stmt 1 view .LVU310
 1073 01a8 2046     		mov	r0, r4
 1074 01aa FFF7FEFF 		bl	HAL_ADC_Stop
 1075              	.LVL76:
1432:../../../mod/sensor/sensor.c **** if ( adc_status[0] != HAL_OK )
 1076              		.loc 1 1432 1 view .LVU311
 1077 01ae 3A46     		mov	r2, r7
 1078 01b0 4FF46061 		mov	r1, #3584
 1079 01b4 0B48     		ldr	r0, .L53
 1080 01b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1081              	.LVL77:
1433:../../../mod/sensor/sensor.c **** 	{
 1082              		.loc 1 1433 1 view .LVU312
1433:../../../mod/sensor/sensor.c **** 	{
 1083              		.loc 1 1433 16 is_stmt 0 view .LVU313
 1084 01ba 9DF80400 		ldrb	r0, [sp, #4]	@ zero_extendqisi2
1433:../../../mod/sensor/sensor.c **** 	{
 1085              		.loc 1 1433 4 view .LVU314
 1086 01be 20B1     		cbz	r0, .L44
1435:../../../mod/sensor/sensor.c **** 	}
 1087              		.loc 1 1435 9 view .LVU315
 1088 01c0 1120     		movs	r0, #17
 1089 01c2 02E0     		b	.L44
 1090              	.LVL78:
 1091              	.L45:
1376:../../../mod/sensor/sensor.c **** 	}
 1092              		.loc 1 1376 9 view .LVU316
 1093 01c4 1120     		movs	r0, #17
 1094 01c6 00E0     		b	.L44
 1095              	.L46:
 1096 01c8 1120     		movs	r0, #17
 1097              	.LVL79:
 1098              	.L44:
1442:../../../mod/sensor/sensor.c **** 
 1099              		.loc 1 1442 1 view .LVU317
ARM GAS  /tmp/ccnIi471.s 			page 52


 1100 01ca 03B0     		add	sp, sp, #12
 1101              	.LCFI25:
 1102              		.cfi_remember_state
 1103              		.cfi_def_cfa_offset 20
 1104              		@ sp needed
 1105 01cc F0BD     		pop	{r4, r5, r6, r7, pc}
 1106              	.LVL80:
 1107              	.L47:
 1108              	.LCFI26:
 1109              		.cfi_restore_state
1392:../../../mod/sensor/sensor.c **** 	}
 1110              		.loc 1 1392 9 view .LVU318
 1111 01ce 1120     		movs	r0, #17
 1112 01d0 FBE7     		b	.L44
 1113              	.L48:
 1114 01d2 1120     		movs	r0, #17
 1115 01d4 F9E7     		b	.L44
 1116              	.LVL81:
 1117              	.L49:
1406:../../../mod/sensor/sensor.c **** 	}
 1118              		.loc 1 1406 9 view .LVU319
 1119 01d6 1120     		movs	r0, #17
 1120 01d8 F7E7     		b	.L44
 1121              	.L50:
1422:../../../mod/sensor/sensor.c **** 	}
 1122              		.loc 1 1422 9 view .LVU320
 1123 01da 1120     		movs	r0, #17
 1124 01dc F5E7     		b	.L44
 1125              	.L51:
 1126 01de 1120     		movs	r0, #17
 1127 01e0 F3E7     		b	.L44
 1128              	.L54:
 1129 01e2 00BF     		.align	2
 1130              	.L53:
 1131 01e4 000C0258 		.word	1476529152
 1132 01e8 00000000 		.word	hadc1
 1133 01ec 00000000 		.word	hadc2
 1134 01f0 00000000 		.word	hadc3
 1135              		.cfi_endproc
 1136              	.LFE340:
 1138              		.section	.text.sensor_dump,"ax",%progbits
 1139              		.align	1
 1140              		.global	sensor_dump
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1145              	sensor_dump:
 1146              	.LVL82:
 1147              	.LFB335:
 611:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 1148              		.loc 1 611 1 is_stmt 1 view -0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 611:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 1152              		.loc 1 611 1 is_stmt 0 view .LVU322
 1153 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccnIi471.s 			page 53


 1154              	.LCFI27:
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 3, -8
 1157              		.cfi_offset 14, -4
 627:../../../mod/sensor/sensor.c **** 		THERMO_STATUS   tc_status;          /* Thermocouple status codes   */
 1158              		.loc 1 627 3 is_stmt 1 view .LVU323
 628:../../../mod/sensor/sensor.c **** 	#endif
 1159              		.loc 1 628 3 view .LVU324
 649:../../../mod/sensor/sensor.c **** 		tc_status     = THERMO_OK;
 1160              		.loc 1 649 3 view .LVU325
 1161              	.LVL83:
 650:../../../mod/sensor/sensor.c **** 	#endif
 1162              		.loc 1 650 3 view .LVU326
 684:../../../mod/sensor/sensor.c **** 	#endif /* #ifndef L0002_REV5 */
 1163              		.loc 1 684 2 view .LVU327
 684:../../../mod/sensor/sensor.c **** 	#endif /* #ifndef L0002_REV5 */
 1164              		.loc 1 684 18 is_stmt 0 view .LVU328
 1165 0002 FFF7FEFF 		bl	sensor_adc_burst_read
 1166              	.LVL84:
 746:../../../mod/sensor/sensor.c **** 			{
 1167              		.loc 1 746 3 is_stmt 1 view .LVU329
 773:../../../mod/sensor/sensor.c **** 
 1168              		.loc 1 773 1 is_stmt 0 view .LVU330
 1169 0006 08BD     		pop	{r3, pc}
 1170              		.cfi_endproc
 1171              	.LFE335:
 1173              		.section	.text.sensor_poll,"ax",%progbits
 1174              		.align	1
 1175              		.global	sensor_poll
 1176              		.syntax unified
 1177              		.thumb
 1178              		.thumb_func
 1180              	sensor_poll:
 1181              	.LVL85:
 1182              	.LFB336:
 791:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 1183              		.loc 1 791 1 is_stmt 1 view -0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 791:../../../mod/sensor/sensor.c **** /*------------------------------------------------------------------------------
 1187              		.loc 1 791 1 is_stmt 0 view .LVU332
 1188 0000 10B5     		push	{r4, lr}
 1189              	.LCFI28:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 4, -8
 1192              		.cfi_offset 14, -4
 1193 0002 0446     		mov	r4, r0
 795:../../../mod/sensor/sensor.c **** SENSOR_ID* sensor_id_ptr;    /* Pointer to sensor id                */
 1194              		.loc 1 795 1 is_stmt 1 view .LVU333
 796:../../../mod/sensor/sensor.c **** 
 1195              		.loc 1 796 1 view .LVU334
 803:../../../mod/sensor/sensor.c **** 	LOADCELL_STATUS lc_status;       /* Loadcell return codes     */
 1196              		.loc 1 803 2 view .LVU335
 804:../../../mod/sensor/sensor.c **** 	PRESSURE_STATUS pt_status;       /* PT return codes           */
 1197              		.loc 1 804 2 view .LVU336
 805:../../../mod/sensor/sensor.c **** 	#ifdef L0002_REV5
ARM GAS  /tmp/ccnIi471.s 			page 54


 1198              		.loc 1 805 2 view .LVU337
 807:../../../mod/sensor/sensor.c **** 	#endif
 1199              		.loc 1 807 2 view .LVU338
 823:../../../mod/sensor/sensor.c **** sensor_id         = *(sensor_id_ptr   );
 1200              		.loc 1 823 1 view .LVU339
 1201              	.LVL86:
 824:../../../mod/sensor/sensor.c **** 
 1202              		.loc 1 824 1 view .LVU340
 831:../../../mod/sensor/sensor.c **** 	lc_status     = LOADCELL_OK;
 1203              		.loc 1 831 2 view .LVU341
 832:../../../mod/sensor/sensor.c **** 	pt_status     = PRESSURE_OK;
 1204              		.loc 1 832 2 view .LVU342
 833:../../../mod/sensor/sensor.c **** 	#ifdef L0002_REV5
 1205              		.loc 1 833 2 view .LVU343
 835:../../../mod/sensor/sensor.c **** 	#endif
 1206              		.loc 1 835 2 view .LVU344
 850:../../../mod/sensor/sensor.c **** 	if ( sensor_status != SENSOR_OK )
 1207              		.loc 1 850 2 view .LVU345
 850:../../../mod/sensor/sensor.c **** 	if ( sensor_status != SENSOR_OK )
 1208              		.loc 1 850 18 is_stmt 0 view .LVU346
 1209 0004 FFF7FEFF 		bl	sensor_adc_burst_read
 1210              	.LVL87:
 851:../../../mod/sensor/sensor.c **** 		{
 1211              		.loc 1 851 2 is_stmt 1 view .LVU347
 851:../../../mod/sensor/sensor.c **** 		{
 1212              		.loc 1 851 5 is_stmt 0 view .LVU348
 1213 0008 00B1     		cbz	r0, .L61
 1214              	.LVL88:
 1215              	.L58:
1177:../../../mod/sensor/sensor.c **** 
 1216              		.loc 1 1177 1 view .LVU349
 1217 000a 10BD     		pop	{r4, pc}
 1218              	.LVL89:
 1219              	.L61:
 855:../../../mod/sensor/sensor.c **** 				                   THERMO_HOT_JUNCTION );
 1220              		.loc 1 855 2 is_stmt 1 view .LVU350
 855:../../../mod/sensor/sensor.c **** 				                   THERMO_HOT_JUNCTION );
 1221              		.loc 1 855 18 is_stmt 0 view .LVU351
 1222 000c 0121     		movs	r1, #1
 1223 000e 04F12400 		add	r0, r4, #36
 1224 0012 FFF7FEFF 		bl	temp_get_temp
 1225              	.LVL90:
 857:../../../mod/sensor/sensor.c **** 		{
 1226              		.loc 1 857 2 is_stmt 1 view .LVU352
 857:../../../mod/sensor/sensor.c **** 		{
 1227              		.loc 1 857 5 is_stmt 0 view .LVU353
 1228 0016 0028     		cmp	r0, #0
 1229 0018 F7D0     		beq	.L58
 859:../../../mod/sensor/sensor.c **** 		}
 1230              		.loc 1 859 10 view .LVU354
 1231 001a 0520     		movs	r0, #5
 1232              	.LVL91:
 859:../../../mod/sensor/sensor.c **** 		}
 1233              		.loc 1 859 10 view .LVU355
 1234 001c F5E7     		b	.L58
 1235              		.cfi_endproc
 1236              	.LFE336:
ARM GAS  /tmp/ccnIi471.s 			page 55


 1238              		.section	.text.sensor_cmd_execute,"ax",%progbits
 1239              		.align	1
 1240              		.global	sensor_cmd_execute
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1245              	sensor_cmd_execute:
 1246              	.LVL92:
 1247              	.LFB334:
 251:../../../mod/sensor/sensor.c **** 
 1248              		.loc 1 251 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 96
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 251:../../../mod/sensor/sensor.c **** 
 1252              		.loc 1 251 1 is_stmt 0 view .LVU357
 1253 0000 70B5     		push	{r4, r5, r6, lr}
 1254              	.LCFI29:
 1255              		.cfi_def_cfa_offset 16
 1256              		.cfi_offset 4, -16
 1257              		.cfi_offset 5, -12
 1258              		.cfi_offset 6, -8
 1259              		.cfi_offset 14, -4
 1260 0002 9AB0     		sub	sp, sp, #104
 1261              	.LCFI30:
 1262              		.cfi_def_cfa_offset 120
 1263 0004 0546     		mov	r5, r0
 256:../../../mod/sensor/sensor.c ****                                                        subcommand function 
 1264              		.loc 1 256 1 is_stmt 1 view .LVU358
 259:../../../mod/sensor/sensor.c **** SENSOR_DATA   sensor_data;                           /* Struct with all sensor 
 1265              		.loc 1 259 1 view .LVU359
 260:../../../mod/sensor/sensor.c ****                                                         data                  */
 1266              		.loc 1 260 1 view .LVU360
 262:../../../mod/sensor/sensor.c ****                                                        readouts               */
 1267              		.loc 1 262 1 view .LVU361
 264:../../../mod/sensor/sensor.c **** uint8_t       num_sensors;                           /* Number of sensors to 
 1268              		.loc 1 264 1 view .LVU362
 264:../../../mod/sensor/sensor.c **** uint8_t       num_sensors;                           /* Number of sensors to 
 1269              		.loc 1 264 15 is_stmt 0 view .LVU363
 1270 0006 2826     		movs	r6, #40
 1271 0008 8DF81760 		strb	r6, [sp, #23]
 265:../../../mod/sensor/sensor.c ****                                                         use for polling       */
 1272              		.loc 1 265 1 is_stmt 1 view .LVU364
 267:../../../mod/sensor/sensor.c ****                                                         be polled             */
 1273              		.loc 1 267 1 view .LVU365
 269:../../../mod/sensor/sensor.c ****                                                         sensor poll           */
 1274              		.loc 1 269 1 view .LVU366
 278:../../../mod/sensor/sensor.c **** sensor_status   = SENSOR_OK;
 1275              		.loc 1 278 1 view .LVU367
 1276              	.LVL93:
 279:../../../mod/sensor/sensor.c **** #ifdef VALVE_CONTROLLER
 1277              		.loc 1 279 1 view .LVU368
 283:../../../mod/sensor/sensor.c **** sensor_poll_cmd = 0;
 1278              		.loc 1 283 1 view .LVU369
 283:../../../mod/sensor/sensor.c **** sensor_poll_cmd = 0;
 1279              		.loc 1 283 17 is_stmt 0 view .LVU370
 1280 000c 0024     		movs	r4, #0
ARM GAS  /tmp/ccnIi471.s 			page 56


 1281 000e 8DF81640 		strb	r4, [sp, #22]
 284:../../../mod/sensor/sensor.c **** memset( &sensor_data_bytes[0], 0, sizeof( sensor_data_bytes ) );
 1282              		.loc 1 284 1 is_stmt 1 view .LVU371
 284:../../../mod/sensor/sensor.c **** memset( &sensor_data_bytes[0], 0, sizeof( sensor_data_bytes ) );
 1283              		.loc 1 284 17 is_stmt 0 view .LVU372
 1284 0012 8DF80F40 		strb	r4, [sp, #15]
 285:../../../mod/sensor/sensor.c **** memset( &sensor_data         , 0, sizeof( sensor_data       ) );
 1285              		.loc 1 285 1 is_stmt 1 view .LVU373
 1286 0016 3246     		mov	r2, r6
 1287 0018 2146     		mov	r1, r4
 1288 001a 06A8     		add	r0, sp, #24
 1289              	.LVL94:
 285:../../../mod/sensor/sensor.c **** memset( &sensor_data         , 0, sizeof( sensor_data       ) );
 1290              		.loc 1 285 1 is_stmt 0 view .LVU374
 1291 001c FFF7FEFF 		bl	memset
 1292              	.LVL95:
 286:../../../mod/sensor/sensor.c **** memset( &poll_sensors[0]     , 0, sizeof( poll_sensors      ) );
 1293              		.loc 1 286 1 is_stmt 1 view .LVU375
 1294 0020 3246     		mov	r2, r6
 1295 0022 2146     		mov	r1, r4
 1296 0024 10A8     		add	r0, sp, #64
 1297 0026 FFF7FEFF 		bl	memset
 1298              	.LVL96:
 287:../../../mod/sensor/sensor.c **** 
 1299              		.loc 1 287 1 view .LVU376
 1300 002a 0494     		str	r4, [sp, #16]
 1301 002c 8DF81440 		strb	r4, [sp, #20]
 293:../../../mod/sensor/sensor.c **** 	{
 1302              		.loc 1 293 1 view .LVU377
 1303 0030 012D     		cmp	r5, #1
 1304 0032 59D0     		beq	.L63
 1305 0034 022D     		cmp	r5, #2
 1306 0036 75D1     		bne	.L72
 302:../../../mod/sensor/sensor.c **** 									sizeof( num_sensors ), 
 1307              		.loc 1 302 4 view .LVU378
 302:../../../mod/sensor/sensor.c **** 									sizeof( num_sensors ), 
 1308              		.loc 1 302 17 is_stmt 0 view .LVU379
 1309 0038 0A22     		movs	r2, #10
 1310 003a 0121     		movs	r1, #1
 1311 003c 0DF11600 		add	r0, sp, #22
 1312 0040 FFF7FEFF 		bl	usb_receive
 1313              	.LVL97:
 305:../../../mod/sensor/sensor.c **** 				{
 1314              		.loc 1 305 4 is_stmt 1 view .LVU380
 305:../../../mod/sensor/sensor.c **** 				{
 1315              		.loc 1 305 7 is_stmt 0 view .LVU381
 1316 0044 0028     		cmp	r0, #0
 1317 0046 71D1     		bne	.L73
 334:../../../mod/sensor/sensor.c **** 									num_sensors     , 
 1318              		.loc 1 334 4 is_stmt 1 view .LVU382
 334:../../../mod/sensor/sensor.c **** 									num_sensors     , 
 1319              		.loc 1 334 17 is_stmt 0 view .LVU383
 1320 0048 3246     		mov	r2, r6
 1321 004a 9DF81610 		ldrb	r1, [sp, #22]	@ zero_extendqisi2
 1322 004e 04A8     		add	r0, sp, #16
 1323              	.LVL98:
 334:../../../mod/sensor/sensor.c **** 									num_sensors     , 
ARM GAS  /tmp/ccnIi471.s 			page 57


 1324              		.loc 1 334 17 view .LVU384
 1325 0050 FFF7FEFF 		bl	usb_receive
 1326              	.LVL99:
 337:../../../mod/sensor/sensor.c **** 				{
 1327              		.loc 1 337 4 is_stmt 1 view .LVU385
 337:../../../mod/sensor/sensor.c **** 				{
 1328              		.loc 1 337 7 is_stmt 0 view .LVU386
 1329 0054 0028     		cmp	r0, #0
 1330 0056 6BD1     		bne	.L74
 366:../../../mod/sensor/sensor.c **** 									sizeof( sensor_poll_cmd ),
 1331              		.loc 1 366 4 is_stmt 1 view .LVU387
 366:../../../mod/sensor/sensor.c **** 									sizeof( sensor_poll_cmd ),
 1332              		.loc 1 366 17 is_stmt 0 view .LVU388
 1333 0058 0A22     		movs	r2, #10
 1334 005a 0121     		movs	r1, #1
 1335 005c 0DF10F00 		add	r0, sp, #15
 1336              	.LVL100:
 366:../../../mod/sensor/sensor.c **** 									sizeof( sensor_poll_cmd ),
 1337              		.loc 1 366 17 view .LVU389
 1338 0060 FFF7FEFF 		bl	usb_receive
 1339              	.LVL101:
 369:../../../mod/sensor/sensor.c **** 				{
 1340              		.loc 1 369 4 is_stmt 1 view .LVU390
 369:../../../mod/sensor/sensor.c **** 				{
 1341              		.loc 1 369 12 is_stmt 0 view .LVU391
 1342 0064 0446     		mov	r4, r0
 1343 0066 0028     		cmp	r0, #0
 1344 0068 64D1     		bne	.L75
 373:../../../mod/sensor/sensor.c **** 				{
 1345              		.loc 1 373 9 is_stmt 1 view .LVU392
 373:../../../mod/sensor/sensor.c **** 				{
 1346              		.loc 1 373 30 is_stmt 0 view .LVU393
 1347 006a 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 373:../../../mod/sensor/sensor.c **** 				{
 1348              		.loc 1 373 12 view .LVU394
 1349 006e F32B     		cmp	r3, #243
 1350 0070 62D1     		bne	.L81
 1351              	.LVL102:
 1352              	.L67:
 411:../../../mod/sensor/sensor.c **** 			{
 1353              		.loc 1 411 27 is_stmt 1 view .LVU395
 1354 0072 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 1355 0076 742B     		cmp	r3, #116
 1356 0078 55D0     		beq	.L64
 415:../../../mod/sensor/sensor.c **** 										sizeof( sensor_poll_cmd ),
 1357              		.loc 1 415 5 view .LVU396
 415:../../../mod/sensor/sensor.c **** 										sizeof( sensor_poll_cmd ),
 1358              		.loc 1 415 18 is_stmt 0 view .LVU397
 1359 007a 0A22     		movs	r2, #10
 1360 007c 0121     		movs	r1, #1
 1361 007e 0DF10F00 		add	r0, sp, #15
 1362 0082 FFF7FEFF 		bl	usb_receive
 1363              	.LVL103:
 418:../../../mod/sensor/sensor.c **** 					{
 1364              		.loc 1 418 5 is_stmt 1 view .LVU398
 418:../../../mod/sensor/sensor.c **** 					{
 1365              		.loc 1 418 8 is_stmt 0 view .LVU399
ARM GAS  /tmp/ccnIi471.s 			page 58


 1366 0086 0028     		cmp	r0, #0
 1367 0088 58D1     		bne	.L77
 446:../../../mod/sensor/sensor.c **** 				{
 1368              		.loc 1 446 4 is_stmt 1 view .LVU400
 1369 008a 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 1370 008e 512B     		cmp	r3, #81
 1371 0090 05D0     		beq	.L66
 1372 0092 742B     		cmp	r3, #116
 1373 0094 EDD0     		beq	.L67
 1374 0096 442B     		cmp	r3, #68
 1375 0098 1BD0     		beq	.L68
 1376 009a 0F24     		movs	r4, #15
 1377              	.LVL104:
 446:../../../mod/sensor/sensor.c **** 				{
 1378              		.loc 1 446 4 is_stmt 0 view .LVU401
 1379 009c 43E0     		b	.L64
 1380              	.LVL105:
 1381              	.L66:
 452:../../../mod/sensor/sensor.c **** 												 &poll_sensors[0],
 1382              		.loc 1 452 6 is_stmt 1 view .LVU402
 452:../../../mod/sensor/sensor.c **** 												 &poll_sensors[0],
 1383              		.loc 1 452 22 is_stmt 0 view .LVU403
 1384 009e 9DF81620 		ldrb	r2, [sp, #22]	@ zero_extendqisi2
 1385 00a2 04A9     		add	r1, sp, #16
 1386 00a4 10A8     		add	r0, sp, #64
 1387              	.LVL106:
 452:../../../mod/sensor/sensor.c **** 												 &poll_sensors[0],
 1388              		.loc 1 452 22 view .LVU404
 1389 00a6 FFF7FEFF 		bl	sensor_poll
 1390              	.LVL107:
 455:../../../mod/sensor/sensor.c **** 						{
 1391              		.loc 1 455 6 is_stmt 1 view .LVU405
 455:../../../mod/sensor/sensor.c **** 						{
 1392              		.loc 1 455 9 is_stmt 0 view .LVU406
 1393 00aa 0446     		mov	r4, r0
 1394 00ac 0028     		cmp	r0, #0
 1395 00ae 47D1     		bne	.L78
 462:../../../mod/sensor/sensor.c **** 						                      &poll_sensors[0],
 1396              		.loc 1 462 7 is_stmt 1 view .LVU407
 1397 00b0 0DF11703 		add	r3, sp, #23
 1398 00b4 0093     		str	r3, [sp]
 1399 00b6 06AB     		add	r3, sp, #24
 1400 00b8 9DF81620 		ldrb	r2, [sp, #22]	@ zero_extendqisi2
 1401 00bc 04A9     		add	r1, sp, #16
 1402 00be 10A8     		add	r0, sp, #64
 1403              	.LVL108:
 462:../../../mod/sensor/sensor.c **** 						                      &poll_sensors[0],
 1404              		.loc 1 462 7 is_stmt 0 view .LVU408
 1405 00c0 FFF7FEFF 		bl	extract_sensor_bytes
 1406              	.LVL109:
 469:../../../mod/sensor/sensor.c **** 						              num_sensor_bytes     ,
 1407              		.loc 1 469 7 is_stmt 1 view .LVU409
 1408 00c4 2822     		movs	r2, #40
 1409 00c6 9DF81710 		ldrb	r1, [sp, #23]	@ zero_extendqisi2
 1410 00ca 06A8     		add	r0, sp, #24
 1411 00cc FFF7FEFF 		bl	usb_transmit
 1412              	.LVL110:
ARM GAS  /tmp/ccnIi471.s 			page 59


 473:../../../mod/sensor/sensor.c **** 						}
 1413              		.loc 1 473 7 view .LVU410
 1414 00d0 CFE7     		b	.L67
 1415              	.LVL111:
 1416              	.L68:
 488:../../../mod/sensor/sensor.c **** 						{
 1417              		.loc 1 488 29 view .LVU411
 1418 00d2 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 1419 00d6 EF2B     		cmp	r3, #239
 1420 00d8 CBD0     		beq	.L67
 491:../../../mod/sensor/sensor.c **** 										sizeof( sensor_poll_cmd ),
 1421              		.loc 1 491 8 view .LVU412
 1422 00da 0A22     		movs	r2, #10
 1423 00dc 0121     		movs	r1, #1
 1424 00de 0DF10F00 		add	r0, sp, #15
 1425 00e2 FFF7FEFF 		bl	usb_receive
 1426              	.LVL112:
 1427 00e6 F4E7     		b	.L68
 1428              	.LVL113:
 1429              	.L63:
 531:../../../mod/sensor/sensor.c **** 						sizeof( num_sensor_bytes ), 
 1430              		.loc 1 531 4 view .LVU413
 1431 00e8 0A22     		movs	r2, #10
 1432 00ea 0121     		movs	r1, #1
 1433 00ec 0DF11700 		add	r0, sp, #23
 1434 00f0 FFF7FEFF 		bl	usb_transmit
 1435              	.LVL114:
 550:../../../mod/sensor/sensor.c **** 
 1436              		.loc 1 550 6 view .LVU414
 550:../../../mod/sensor/sensor.c **** 
 1437              		.loc 1 550 22 is_stmt 0 view .LVU415
 1438 00f4 10A8     		add	r0, sp, #64
 1439 00f6 FFF7FEFF 		bl	sensor_dump
 1440              	.LVL115:
 1441 00fa 0646     		mov	r6, r0
 1442              	.LVL116:
 553:../../../mod/sensor/sensor.c **** 
 1443              		.loc 1 553 3 is_stmt 1 view .LVU416
 1444 00fc 06AD     		add	r5, sp, #24
 1445 00fe 10AC     		add	r4, sp, #64
 1446 0100 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1447 0102 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1448 0104 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1449 0106 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1450 0108 94E80300 		ldm	r4, {r0, r1}
 1451 010c 85E80300 		stm	r5, {r0, r1}
 556:../../../mod/sensor/sensor.c **** 			{
 1452              		.loc 1 556 3 view .LVU417
 556:../../../mod/sensor/sensor.c **** 			{
 1453              		.loc 1 556 6 is_stmt 0 view .LVU418
 1454 0110 3446     		mov	r4, r6
 1455 0112 0EB1     		cbz	r6, .L82
 581:../../../mod/sensor/sensor.c ****             }
 1456              		.loc 1 581 10 view .LVU419
 1457 0114 1224     		movs	r4, #18
 1458 0116 06E0     		b	.L64
 1459              	.L82:
ARM GAS  /tmp/ccnIi471.s 			page 60


 559:../../../mod/sensor/sensor.c **** 							sizeof( sensor_data_bytes ), 
 1460              		.loc 1 559 5 is_stmt 1 view .LVU420
 1461 0118 2822     		movs	r2, #40
 1462 011a 1146     		mov	r1, r2
 1463 011c 06A8     		add	r0, sp, #24
 1464 011e FFF7FEFF 		bl	usb_transmit
 1465              	.LVL117:
 576:../../../mod/sensor/sensor.c ****             }
 1466              		.loc 1 576 4 view .LVU421
 576:../../../mod/sensor/sensor.c ****             }
 1467              		.loc 1 576 11 is_stmt 0 view .LVU422
 1468 0122 00E0     		b	.L64
 1469              	.LVL118:
 1470              	.L72:
 293:../../../mod/sensor/sensor.c **** 	{
 1471              		.loc 1 293 1 view .LVU423
 1472 0124 0124     		movs	r4, #1
 1473              	.LVL119:
 1474              	.L64:
 594:../../../mod/sensor/sensor.c **** 
 1475              		.loc 1 594 1 view .LVU424
 1476 0126 2046     		mov	r0, r4
 1477 0128 1AB0     		add	sp, sp, #104
 1478              	.LCFI31:
 1479              		.cfi_remember_state
 1480              		.cfi_def_cfa_offset 16
 1481              		@ sp needed
 1482 012a 70BD     		pop	{r4, r5, r6, pc}
 1483              	.LVL120:
 1484              	.L73:
 1485              	.LCFI32:
 1486              		.cfi_restore_state
 307:../../../mod/sensor/sensor.c **** 				}
 1487              		.loc 1 307 12 view .LVU425
 1488 012c 0B24     		movs	r4, #11
 1489 012e FAE7     		b	.L64
 1490              	.L74:
 339:../../../mod/sensor/sensor.c **** 				}
 1491              		.loc 1 339 12 view .LVU426
 1492 0130 0B24     		movs	r4, #11
 1493 0132 F8E7     		b	.L64
 1494              	.L75:
 371:../../../mod/sensor/sensor.c **** 				}
 1495              		.loc 1 371 12 view .LVU427
 1496 0134 0B24     		movs	r4, #11
 1497 0136 F6E7     		b	.L64
 1498              	.L81:
 376:../../../mod/sensor/sensor.c **** 				}
 1499              		.loc 1 376 12 view .LVU428
 1500 0138 0D24     		movs	r4, #13
 1501 013a F4E7     		b	.L64
 1502              	.LVL121:
 1503              	.L77:
 420:../../../mod/sensor/sensor.c **** 					}
 1504              		.loc 1 420 13 view .LVU429
 1505 013c 0B24     		movs	r4, #11
 1506              	.LVL122:
ARM GAS  /tmp/ccnIi471.s 			page 61


 420:../../../mod/sensor/sensor.c **** 					}
 1507              		.loc 1 420 13 view .LVU430
 1508 013e F2E7     		b	.L64
 1509              	.LVL123:
 1510              	.L78:
 457:../../../mod/sensor/sensor.c **** 						}
 1511              		.loc 1 457 14 view .LVU431
 1512 0140 0E24     		movs	r4, #14
 1513 0142 F0E7     		b	.L64
 1514              		.cfi_endproc
 1515              	.LFE334:
 1517              		.section	.bss.sensor_size_offsets_table,"aw",%nobits
 1518              		.align	2
 1521              	sensor_size_offsets_table:
 1522 0000 00000000 		.space	80
 1522      00000000 
 1522      00000000 
 1522      00000000 
 1522      00000000 
 1523              		.text
 1524              	.Letext0:
 1525              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 1526              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 1527              		.file 4 "../../../lib/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
 1528              		.file 5 "../../../lib/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 1529              		.file 6 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1530              		.file 7 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 1531              		.file 8 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 1532              		.file 9 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
 1533              		.file 10 "../../../lib/sdr_pin_defines_L0002.h"
 1534              		.file 11 "../../../mod/pressure/pressure.h"
 1535              		.file 12 "../../../mod/sensor/sensor.h"
 1536              		.file 13 "../../../mod/usb/usb.h"
 1537              		.file 14 "../../../mod/loadcell/loadcell.h"
 1538              		.file 15 "../../../mod/temp/temp.h"
 1539              		.file 16 "/usr/include/newlib/string.h"
 1540              		.file 17 "<built-in>"
ARM GAS  /tmp/ccnIi471.s 			page 62


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sensor.c
     /tmp/ccnIi471.s:20     .text.sensor_map:0000000000000000 $t
     /tmp/ccnIi471.s:25     .text.sensor_map:0000000000000000 sensor_map
     /tmp/ccnIi471.s:64     .text.sensor_map:000000000000001c $d
     /tmp/ccnIi471.s:1521   .bss.sensor_size_offsets_table:0000000000000000 sensor_size_offsets_table
     /tmp/ccnIi471.s:69     .text.extract_sensor_bytes:0000000000000000 $t
     /tmp/ccnIi471.s:74     .text.extract_sensor_bytes:0000000000000000 extract_sensor_bytes
     /tmp/ccnIi471.s:191    .text.pt7_adc_channel_select:0000000000000000 $t
     /tmp/ccnIi471.s:196    .text.pt7_adc_channel_select:0000000000000000 pt7_adc_channel_select
     /tmp/ccnIi471.s:252    .text.pt7_adc_channel_select:0000000000000038 $d
     /tmp/ccnIi471.s:258    .text.loadcell_adc_channel_select:0000000000000000 $t
     /tmp/ccnIi471.s:263    .text.loadcell_adc_channel_select:0000000000000000 loadcell_adc_channel_select
     /tmp/ccnIi471.s:319    .text.loadcell_adc_channel_select:0000000000000038 $d
     /tmp/ccnIi471.s:325    .text.pt8_adc_channel_select:0000000000000000 $t
     /tmp/ccnIi471.s:330    .text.pt8_adc_channel_select:0000000000000000 pt8_adc_channel_select
     /tmp/ccnIi471.s:386    .text.pt8_adc_channel_select:0000000000000038 $d
     /tmp/ccnIi471.s:392    .text.pt5_adc_channel_select:0000000000000000 $t
     /tmp/ccnIi471.s:397    .text.pt5_adc_channel_select:0000000000000000 pt5_adc_channel_select
     /tmp/ccnIi471.s:453    .text.pt5_adc_channel_select:0000000000000038 $d
     /tmp/ccnIi471.s:458    .text.pt6_adc_channel_select:0000000000000000 $t
     /tmp/ccnIi471.s:463    .text.pt6_adc_channel_select:0000000000000000 pt6_adc_channel_select
     /tmp/ccnIi471.s:519    .text.pt6_adc_channel_select:0000000000000038 $d
     /tmp/ccnIi471.s:525    .text.pt1_adc_channel_select:0000000000000000 $t
     /tmp/ccnIi471.s:530    .text.pt1_adc_channel_select:0000000000000000 pt1_adc_channel_select
     /tmp/ccnIi471.s:586    .text.pt1_adc_channel_select:0000000000000038 $d
     /tmp/ccnIi471.s:592    .text.sensor_init:0000000000000000 $t
     /tmp/ccnIi471.s:598    .text.sensor_init:0000000000000000 sensor_init
     /tmp/ccnIi471.s:681    .text.sensor_init:000000000000004c $d
     /tmp/ccnIi471.s:686    .text.sensor_conv_pressure:0000000000000000 $t
     /tmp/ccnIi471.s:692    .text.sensor_conv_pressure:0000000000000000 sensor_conv_pressure
     /tmp/ccnIi471.s:746    .text.sensor_conv_pressure:0000000000000038 $d
     /tmp/ccnIi471.s:755    .text.sensor_adc_burst_read:0000000000000000 $t
     /tmp/ccnIi471.s:761    .text.sensor_adc_burst_read:0000000000000000 sensor_adc_burst_read
     /tmp/ccnIi471.s:1131   .text.sensor_adc_burst_read:00000000000001e4 $d
     /tmp/ccnIi471.s:1139   .text.sensor_dump:0000000000000000 $t
     /tmp/ccnIi471.s:1145   .text.sensor_dump:0000000000000000 sensor_dump
     /tmp/ccnIi471.s:1174   .text.sensor_poll:0000000000000000 $t
     /tmp/ccnIi471.s:1180   .text.sensor_poll:0000000000000000 sensor_poll
     /tmp/ccnIi471.s:1239   .text.sensor_cmd_execute:0000000000000000 $t
     /tmp/ccnIi471.s:1245   .text.sensor_cmd_execute:0000000000000000 sensor_cmd_execute
     /tmp/ccnIi471.s:1518   .bss.sensor_size_offsets_table:0000000000000000 $d

UNDEFINED SYMBOLS
memcpy
HAL_ADC_ConfigChannel
hadc1
hadc2
hadc3
HAL_GPIO_WritePin
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
temp_get_temp
memset
usb_receive
ARM GAS  /tmp/ccnIi471.s 			page 63


usb_transmit
