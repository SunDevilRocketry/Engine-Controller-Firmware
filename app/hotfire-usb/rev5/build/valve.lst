ARM GAS  /tmp/cciGH9cE.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"valve.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "../../../mod/valve/valve.c"
  19              		.section	.text.valve_transmit,"ax",%progbits
  20              		.align	1
  21              		.global	valve_transmit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	valve_transmit:
  27              	.LVL0:
  28              	.LFB333:
   1:../../../mod/valve/valve.c **** /*******************************************************************************
   2:../../../mod/valve/valve.c **** *
   3:../../../mod/valve/valve.c **** * FILE:
   4:../../../mod/valve/valve.c **** * 		valve.c
   5:../../../mod/valve/valve.c **** *
   6:../../../mod/valve/valve.c **** * DESCRIPTION:
   7:../../../mod/valve/valve.c **** * 		Servo valve actuation API	
   8:../../../mod/valve/valve.c **** *
   9:../../../mod/valve/valve.c **** *******************************************************************************/
  10:../../../mod/valve/valve.c **** 
  11:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
  12:../../../mod/valve/valve.c ****  Standard Includes                                                              
  13:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
  14:../../../mod/valve/valve.c **** #include <stdbool.h>
  15:../../../mod/valve/valve.c **** 
  16:../../../mod/valve/valve.c **** 
  17:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
  18:../../../mod/valve/valve.c ****  Project Includes                                                               
  19:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
  20:../../../mod/valve/valve.c **** #if   defined( VALVE_CONTROLLER  )
  21:../../../mod/valve/valve.c **** 	#include "sdr_pin_defines_L0005.h"
  22:../../../mod/valve/valve.c **** #elif defined( ENGINE_CONTROLLER )
  23:../../../mod/valve/valve.c **** 	#include "sdr_pin_defines_L0002.h"
  24:../../../mod/valve/valve.c **** #endif
  25:../../../mod/valve/valve.c **** #include "stm32h7xx_hal.h"
  26:../../../mod/valve/valve.c **** #include "main.h"
  27:../../../mod/valve/valve.c **** #include "valve.h"
  28:../../../mod/valve/valve.c **** #include "usb.h"
  29:../../../mod/valve/valve.c **** 
  30:../../../mod/valve/valve.c **** 
ARM GAS  /tmp/cciGH9cE.s 			page 2


  31:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
  32:../../../mod/valve/valve.c ****  Global Variables 
  33:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
  34:../../../mod/valve/valve.c **** 
  35:../../../mod/valve/valve.c **** #ifdef VALVE_CONTROLLER
  36:../../../mod/valve/valve.c **** /* Encoder variables */
  37:../../../mod/valve/valve.c **** volatile static int32_t  lox_valve_pos       = 0;  /* LOX Valve Encoder count  */
  38:../../../mod/valve/valve.c **** volatile static bool     lox_channelA_state  = ENCODER_LOW; /* Voltage on channel 
  39:../../../mod/valve/valve.c ****                                                              A pin */
  40:../../../mod/valve/valve.c **** volatile static bool     lox_channelB_state  = ENCODER_LOW; /* Voltage on Channel 
  41:../../../mod/valve/valve.c ****                                                              B pin */
  42:../../../mod/valve/valve.c **** volatile static int32_t  fuel_valve_pos      = 0;  /* Fuel Valve Encoder count */
  43:../../../mod/valve/valve.c **** volatile static bool     fuel_channelA_state = ENCODER_LOW; /* Voltage on channel 
  44:../../../mod/valve/valve.c ****                                                              A pin */
  45:../../../mod/valve/valve.c **** volatile static bool     fuel_channelB_state = ENCODER_LOW; /* Voltage on Channel 
  46:../../../mod/valve/valve.c ****                                                              B pin */
  47:../../../mod/valve/valve.c **** 
  48:../../../mod/valve/valve.c **** /* Stepper Driver States */
  49:../../../mod/valve/valve.c **** static STEPPER_DRIVER_STATE lox_driver_state;
  50:../../../mod/valve/valve.c **** static STEPPER_DRIVER_STATE fuel_driver_state;
  51:../../../mod/valve/valve.c **** 
  52:../../../mod/valve/valve.c **** /* Valve openining/closing states */
  53:../../../mod/valve/valve.c **** volatile static bool ox_valve_closing    = false; /* LOX valve is closing   */
  54:../../../mod/valve/valve.c **** volatile static bool ox_valve_opening    = false; /* LOX valve is opening   */
  55:../../../mod/valve/valve.c **** volatile static bool fuel_valve_closing  = false; /* Fuel valve is closing  */
  56:../../../mod/valve/valve.c **** volatile static bool fuel_valve_opening  = false; /* Fuel valve is opening  */
  57:../../../mod/valve/valve.c **** volatile static bool ox_valve_cracking   = false; /* LOX valve is cracking  */
  58:../../../mod/valve/valve.c **** volatile static bool fuel_valve_cracking = false; /* Fuel valve is cracking */
  59:../../../mod/valve/valve.c **** #endif /* #ifdef VALVE_CONTROLLER */
  60:../../../mod/valve/valve.c **** 
  61:../../../mod/valve/valve.c **** 
  62:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
  63:../../../mod/valve/valve.c ****  Internal Function Prototypes 
  64:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
  65:../../../mod/valve/valve.c **** 
  66:../../../mod/valve/valve.c **** #ifdef VALVE_CONTROLLER
  67:../../../mod/valve/valve.c **** /* Enable the lox stepper motor driver */
  68:../../../mod/valve/valve.c **** static void lox_driver_enable
  69:../../../mod/valve/valve.c **** 	(
  70:../../../mod/valve/valve.c **** 	void
  71:../../../mod/valve/valve.c **** 	);
  72:../../../mod/valve/valve.c **** 
  73:../../../mod/valve/valve.c **** /* Enable the fuel stepper motor driver */
  74:../../../mod/valve/valve.c **** static void fuel_driver_enable
  75:../../../mod/valve/valve.c **** 	(
  76:../../../mod/valve/valve.c **** 	void
  77:../../../mod/valve/valve.c **** 	);
  78:../../../mod/valve/valve.c **** 
  79:../../../mod/valve/valve.c **** /* Disable the lox stepper motor driver */
  80:../../../mod/valve/valve.c **** static void lox_driver_disable
  81:../../../mod/valve/valve.c **** 	(
  82:../../../mod/valve/valve.c **** 	void
  83:../../../mod/valve/valve.c **** 	);
  84:../../../mod/valve/valve.c **** 
  85:../../../mod/valve/valve.c **** /* Disable the fuel stepper motor driver */
  86:../../../mod/valve/valve.c **** static void fuel_driver_disable
  87:../../../mod/valve/valve.c **** 	(
ARM GAS  /tmp/cciGH9cE.s 			page 3


  88:../../../mod/valve/valve.c **** 	void
  89:../../../mod/valve/valve.c **** 	);
  90:../../../mod/valve/valve.c **** 
  91:../../../mod/valve/valve.c **** /* Set the lox stepper motor direction */
  92:../../../mod/valve/valve.c **** static VALVE_STATUS lox_driver_set_direction
  93:../../../mod/valve/valve.c **** 	(
  94:../../../mod/valve/valve.c **** 	STEPPER_DRIVER_DIR_STATE direction
  95:../../../mod/valve/valve.c **** 	);
  96:../../../mod/valve/valve.c **** 
  97:../../../mod/valve/valve.c **** /* Set the fuel stepper motor direction */
  98:../../../mod/valve/valve.c **** static VALVE_STATUS fuel_driver_set_direction
  99:../../../mod/valve/valve.c **** 	(
 100:../../../mod/valve/valve.c **** 	STEPPER_DRIVER_DIR_STATE direction
 101:../../../mod/valve/valve.c **** 	);
 102:../../../mod/valve/valve.c **** 
 103:../../../mod/valve/valve.c **** /* Increase the lox encoder count by one */
 104:../../../mod/valve/valve.c **** static void inc_lox_encoder
 105:../../../mod/valve/valve.c **** 	(
 106:../../../mod/valve/valve.c **** 	void
 107:../../../mod/valve/valve.c **** 	);
 108:../../../mod/valve/valve.c **** 
 109:../../../mod/valve/valve.c **** 
 110:../../../mod/valve/valve.c **** /* Increase the fuel encoder count by one */
 111:../../../mod/valve/valve.c **** static void inc_fuel_encoder
 112:../../../mod/valve/valve.c **** 	(
 113:../../../mod/valve/valve.c **** 	void
 114:../../../mod/valve/valve.c **** 	);
 115:../../../mod/valve/valve.c **** 
 116:../../../mod/valve/valve.c **** 
 117:../../../mod/valve/valve.c **** /* Decrease the lox encoder count by one */
 118:../../../mod/valve/valve.c **** static void dec_lox_encoder
 119:../../../mod/valve/valve.c **** 	(
 120:../../../mod/valve/valve.c **** 	void
 121:../../../mod/valve/valve.c **** 	);
 122:../../../mod/valve/valve.c **** 
 123:../../../mod/valve/valve.c **** 
 124:../../../mod/valve/valve.c **** /* Decrease the fuel encoder count by one */
 125:../../../mod/valve/valve.c **** static void dec_fuel_encoder
 126:../../../mod/valve/valve.c **** 	(
 127:../../../mod/valve/valve.c **** 	void
 128:../../../mod/valve/valve.c **** 	);
 129:../../../mod/valve/valve.c **** 
 130:../../../mod/valve/valve.c **** #endif
 131:../../../mod/valve/valve.c **** 
 132:../../../mod/valve/valve.c **** 
 133:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 134:../../../mod/valve/valve.c ****  API Functions 
 135:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 136:../../../mod/valve/valve.c **** 
 137:../../../mod/valve/valve.c **** #ifdef VALVE_CONTROLLER
 138:../../../mod/valve/valve.c **** /*******************************************************************************
 139:../../../mod/valve/valve.c **** *                                                                              *
 140:../../../mod/valve/valve.c **** * PROCEDURE:                                                                   *
 141:../../../mod/valve/valve.c **** * 		valve_cmd_execute                                                      *
 142:../../../mod/valve/valve.c **** *                                                                              *
 143:../../../mod/valve/valve.c **** * DESCRIPTION:                                                                 *
 144:../../../mod/valve/valve.c **** *       Execute a valve subcommand                                             *
ARM GAS  /tmp/cciGH9cE.s 			page 4


 145:../../../mod/valve/valve.c **** *                                                                              *
 146:../../../mod/valve/valve.c **** *******************************************************************************/
 147:../../../mod/valve/valve.c **** VALVE_STATUS valve_cmd_execute
 148:../../../mod/valve/valve.c **** 	(
 149:../../../mod/valve/valve.c **** 	uint8_t subcommand
 150:../../../mod/valve/valve.c **** 	)
 151:../../../mod/valve/valve.c **** {
 152:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 153:../../../mod/valve/valve.c ****  Local Variables
 154:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 155:../../../mod/valve/valve.c **** uint8_t           valve_num;         /* Valve number, 0 -> ox, 1 -> fuel   */
 156:../../../mod/valve/valve.c **** VALVE_STATUS      valve_status[2];   /* Valve return codes                 */
 157:../../../mod/valve/valve.c **** MAIN_VALVE_STATES main_valve_states; /* Main valve open/close states       */
 158:../../../mod/valve/valve.c **** 
 159:../../../mod/valve/valve.c **** 
 160:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 161:../../../mod/valve/valve.c ****  Initializations 
 162:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 163:../../../mod/valve/valve.c **** valve_num         = subcommand & 0x01;
 164:../../../mod/valve/valve.c **** subcommand       -= valve_num;
 165:../../../mod/valve/valve.c **** main_valve_states = 0;
 166:../../../mod/valve/valve.c **** 
 167:../../../mod/valve/valve.c **** 
 168:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 169:../../../mod/valve/valve.c ****  Implementation 
 170:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 171:../../../mod/valve/valve.c **** switch( subcommand )
 172:../../../mod/valve/valve.c **** 	{
 173:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 174:../../../mod/valve/valve.c **** 	 VALVE ENABLE	
 175:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 176:../../../mod/valve/valve.c **** 	case VALVE_ENABLE_CODE:
 177:../../../mod/valve/valve.c **** 		{
 178:../../../mod/valve/valve.c **** 		valve_enable_valves();
 179:../../../mod/valve/valve.c **** 		return VALVE_OK;
 180:../../../mod/valve/valve.c **** 		} /* VALVE_ENABLE_CODE*/
 181:../../../mod/valve/valve.c **** 
 182:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 183:../../../mod/valve/valve.c **** 	 VALVE DISABLE 
 184:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 185:../../../mod/valve/valve.c **** 	case VALVE_DISABLE_CODE:
 186:../../../mod/valve/valve.c **** 		{
 187:../../../mod/valve/valve.c **** 		valve_disable_valves();
 188:../../../mod/valve/valve.c **** 		return VALVE_OK;
 189:../../../mod/valve/valve.c **** 		} /* VALVE_DISABLE_CODE */
 190:../../../mod/valve/valve.c **** 
 191:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 192:../../../mod/valve/valve.c **** 	 VALVE OPEN 
 193:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 194:../../../mod/valve/valve.c **** 	case VALVE_OPEN_CODE:
 195:../../../mod/valve/valve.c **** 		{
 196:../../../mod/valve/valve.c **** 		if ( valve_num )
 197:../../../mod/valve/valve.c **** 			{
 198:../../../mod/valve/valve.c **** 			return valve_open_fuel_valve();
 199:../../../mod/valve/valve.c **** 			}
 200:../../../mod/valve/valve.c **** 		else
 201:../../../mod/valve/valve.c **** 			{
ARM GAS  /tmp/cciGH9cE.s 			page 5


 202:../../../mod/valve/valve.c **** 			return valve_open_ox_valve();
 203:../../../mod/valve/valve.c **** 			}
 204:../../../mod/valve/valve.c **** 		} /* VALVE_OPEN_CODE */
 205:../../../mod/valve/valve.c **** 
 206:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 207:../../../mod/valve/valve.c **** 	 VALVE CLOSE 
 208:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 209:../../../mod/valve/valve.c **** 	case VALVE_CLOSE_CODE:
 210:../../../mod/valve/valve.c **** 		{
 211:../../../mod/valve/valve.c **** 		if ( valve_num )
 212:../../../mod/valve/valve.c **** 			{
 213:../../../mod/valve/valve.c **** 			return valve_close_fuel_valve();
 214:../../../mod/valve/valve.c **** 			}
 215:../../../mod/valve/valve.c **** 		else
 216:../../../mod/valve/valve.c **** 			{
 217:../../../mod/valve/valve.c **** 			return valve_close_ox_valve();
 218:../../../mod/valve/valve.c **** 			}
 219:../../../mod/valve/valve.c **** 		} /* VALVE_CLOSE_CODE */
 220:../../../mod/valve/valve.c **** 
 221:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 222:../../../mod/valve/valve.c **** 	 VALVE CALIBRATE 
 223:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 224:../../../mod/valve/valve.c **** 	case VALVE_CALIBRATE_CODE:
 225:../../../mod/valve/valve.c **** 		{
 226:../../../mod/valve/valve.c **** 		return valve_calibrate_valves();
 227:../../../mod/valve/valve.c **** 		} /* VALVE_CALIBRATE_CODE */
 228:../../../mod/valve/valve.c **** 
 229:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 230:../../../mod/valve/valve.c **** 	 VALVE CRACK 
 231:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 232:../../../mod/valve/valve.c **** 	case VALVE_CRACK_CODE:
 233:../../../mod/valve/valve.c **** 		{
 234:../../../mod/valve/valve.c **** 		if ( valve_num )
 235:../../../mod/valve/valve.c **** 			{
 236:../../../mod/valve/valve.c **** 			return valve_crack_fuel_valve();
 237:../../../mod/valve/valve.c **** 			}
 238:../../../mod/valve/valve.c **** 		else
 239:../../../mod/valve/valve.c **** 			{
 240:../../../mod/valve/valve.c **** 			return valve_crack_ox_valve();
 241:../../../mod/valve/valve.c **** 			}
 242:../../../mod/valve/valve.c **** 		} /* VALVE_CRACK_CODE */
 243:../../../mod/valve/valve.c **** 
 244:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 245:../../../mod/valve/valve.c **** 	 VALVE RESET 
 246:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 247:../../../mod/valve/valve.c **** 	case VALVE_RESET_CODE:
 248:../../../mod/valve/valve.c **** 		{
 249:../../../mod/valve/valve.c **** 		valve_status[0] = valve_close_ox_valve  ();
 250:../../../mod/valve/valve.c **** 		valve_status[1] = valve_close_fuel_valve();
 251:../../../mod/valve/valve.c **** 		if ( ( valve_status[0] != VALVE_OK ) || ( valve_status[1] != VALVE_OK ) )
 252:../../../mod/valve/valve.c **** 			{
 253:../../../mod/valve/valve.c **** 			return VALVE_ERROR;
 254:../../../mod/valve/valve.c **** 			}
 255:../../../mod/valve/valve.c **** 		else
 256:../../../mod/valve/valve.c **** 			{
 257:../../../mod/valve/valve.c **** 			return VALVE_OK;
 258:../../../mod/valve/valve.c **** 			}
ARM GAS  /tmp/cciGH9cE.s 			page 6


 259:../../../mod/valve/valve.c **** 		} /* VALVE_RESET_CODE */
 260:../../../mod/valve/valve.c **** 
 261:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 262:../../../mod/valve/valve.c **** 	 VALVE OPENALL 
 263:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 264:../../../mod/valve/valve.c **** 	case VALVE_OPENALL_CODE:
 265:../../../mod/valve/valve.c **** 		{
 266:../../../mod/valve/valve.c **** 		valve_status[0] = valve_open_ox_valve  ();
 267:../../../mod/valve/valve.c **** 		valve_status[1] = valve_open_fuel_valve();
 268:../../../mod/valve/valve.c **** 		if ( ( valve_status[0] != VALVE_OK ) || ( valve_status[1] != VALVE_OK ) )
 269:../../../mod/valve/valve.c **** 			{
 270:../../../mod/valve/valve.c **** 			return VALVE_ERROR;
 271:../../../mod/valve/valve.c **** 			}
 272:../../../mod/valve/valve.c **** 		else
 273:../../../mod/valve/valve.c **** 			{
 274:../../../mod/valve/valve.c **** 			return VALVE_OK;
 275:../../../mod/valve/valve.c **** 			}
 276:../../../mod/valve/valve.c **** 		} /* VALVE_OPENALL_CODE */
 277:../../../mod/valve/valve.c **** 	
 278:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 279:../../../mod/valve/valve.c **** 	 VALVE GETSTATE 
 280:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 281:../../../mod/valve/valve.c **** 	case VALVE_GETSTATE_CODE:
 282:../../../mod/valve/valve.c **** 		{
 283:../../../mod/valve/valve.c **** 		main_valve_states = valve_get_valve_states();
 284:../../../mod/valve/valve.c **** 		#if defined( HOTFIRE )
 285:../../../mod/valve/valve.c **** 			valve_transmit( &main_valve_states         , 
 286:../../../mod/valve/valve.c **** 			                sizeof( main_valve_states ), 
 287:../../../mod/valve/valve.c **** 							HAL_DEFAULT_TIMEOUT );
 288:../../../mod/valve/valve.c **** 		#elif defined( TERMINAL )
 289:../../../mod/valve/valve.c **** 			usb_transmit( &main_valve_states, 
 290:../../../mod/valve/valve.c **** 			              sizeof( main_valve_states ),
 291:../../../mod/valve/valve.c **** 						  HAL_DEFAULT_TIMEOUT );
 292:../../../mod/valve/valve.c **** 		#endif
 293:../../../mod/valve/valve.c **** 		}
 294:../../../mod/valve/valve.c **** 
 295:../../../mod/valve/valve.c **** 	/*--------------------------------------------------------------------------
 296:../../../mod/valve/valve.c **** 	 UNRECOGNIZED SUBCOMMAND 
 297:../../../mod/valve/valve.c **** 	--------------------------------------------------------------------------*/
 298:../../../mod/valve/valve.c **** 	default:
 299:../../../mod/valve/valve.c **** 		{
 300:../../../mod/valve/valve.c **** 		return VALVE_UNRECOGNIZED_SUBCOMMAND;
 301:../../../mod/valve/valve.c **** 		}
 302:../../../mod/valve/valve.c **** 	
 303:../../../mod/valve/valve.c **** 	} /* switch( subcommand ) */
 304:../../../mod/valve/valve.c **** 
 305:../../../mod/valve/valve.c **** } /* valve_cmd_execute */
 306:../../../mod/valve/valve.c **** #endif
 307:../../../mod/valve/valve.c **** 
 308:../../../mod/valve/valve.c **** 
 309:../../../mod/valve/valve.c **** /*******************************************************************************
 310:../../../mod/valve/valve.c **** *                                                                              *
 311:../../../mod/valve/valve.c **** * PROCEDURE:                                                                   *
 312:../../../mod/valve/valve.c **** * 		valve_transmit                                                         *
 313:../../../mod/valve/valve.c **** *                                                                              *
 314:../../../mod/valve/valve.c **** * DESCRIPTION:                                                                 *
 315:../../../mod/valve/valve.c **** *       Transmits a specified number of bytes over the valve control           *
ARM GAS  /tmp/cciGH9cE.s 			page 7


 316:../../../mod/valve/valve.c **** *       serial port                                                            *
 317:../../../mod/valve/valve.c **** *                                                                              *
 318:../../../mod/valve/valve.c **** *******************************************************************************/
 319:../../../mod/valve/valve.c **** VALVE_STATUS valve_transmit
 320:../../../mod/valve/valve.c **** 	(
 321:../../../mod/valve/valve.c **** 	void*    tx_data_ptr , /* Data to send          */
 322:../../../mod/valve/valve.c **** 	size_t   tx_data_size, /* Size of transmit data */
 323:../../../mod/valve/valve.c **** 	uint32_t timeout
 324:../../../mod/valve/valve.c **** 	)
 325:../../../mod/valve/valve.c **** {
  29              		.loc 1 325 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 325 1 is_stmt 0 view .LVU1
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39 0002 1346     		mov	r3, r2
 326:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 327:../../../mod/valve/valve.c ****  Local Variables
 328:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 329:../../../mod/valve/valve.c **** HAL_StatusTypeDef hal_status; /* Return code from HAL CMSIS API */
  40              		.loc 1 329 1 is_stmt 1 view .LVU2
 330:../../../mod/valve/valve.c **** 
 331:../../../mod/valve/valve.c **** 
 332:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 333:../../../mod/valve/valve.c ****  Initializations 
 334:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 335:../../../mod/valve/valve.c **** hal_status = HAL_OK;
  41              		.loc 1 335 1 view .LVU3
  42              	.LVL1:
 336:../../../mod/valve/valve.c **** 
 337:../../../mod/valve/valve.c **** 
 338:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 339:../../../mod/valve/valve.c ****  Implementation 
 340:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 341:../../../mod/valve/valve.c **** 
 342:../../../mod/valve/valve.c **** /* Transmit buffer */
 343:../../../mod/valve/valve.c **** hal_status = HAL_UART_Transmit( &( VALVE_HUART ), 
  43              		.loc 1 343 1 view .LVU4
  44              		.loc 1 343 14 is_stmt 0 view .LVU5
  45 0004 8AB2     		uxth	r2, r1
  46              	.LVL2:
  47              		.loc 1 343 14 view .LVU6
  48 0006 0146     		mov	r1, r0
  49              	.LVL3:
  50              		.loc 1 343 14 view .LVU7
  51 0008 0548     		ldr	r0, .L5
  52              	.LVL4:
  53              		.loc 1 343 14 view .LVU8
  54 000a FFF7FEFF 		bl	HAL_UART_Transmit
  55              	.LVL5:
 344:../../../mod/valve/valve.c ****                                 tx_data_ptr     , 
 345:../../../mod/valve/valve.c **** 								tx_data_size    , 
ARM GAS  /tmp/cciGH9cE.s 			page 8


 346:../../../mod/valve/valve.c **** 								timeout );
 347:../../../mod/valve/valve.c **** 
 348:../../../mod/valve/valve.c **** /* Return status */
 349:../../../mod/valve/valve.c **** switch ( hal_status )
  56              		.loc 1 349 1 is_stmt 1 view .LVU9
  57 000e 0346     		mov	r3, r0
  58 0010 10B1     		cbz	r0, .L2
  59 0012 0328     		cmp	r0, #3
  60 0014 02D1     		bne	.L3
  61 0016 0423     		movs	r3, #4
  62              	.L2:
 350:../../../mod/valve/valve.c **** 	{
 351:../../../mod/valve/valve.c **** 	case HAL_TIMEOUT:
 352:../../../mod/valve/valve.c **** 		{
 353:../../../mod/valve/valve.c **** 		return VALVE_UART_TIMEOUT;
 354:../../../mod/valve/valve.c **** 		}
 355:../../../mod/valve/valve.c **** 	case HAL_OK:
 356:../../../mod/valve/valve.c **** 		{
 357:../../../mod/valve/valve.c **** 		return VALVE_OK;
 358:../../../mod/valve/valve.c **** 		}
 359:../../../mod/valve/valve.c **** 	default:
 360:../../../mod/valve/valve.c **** 		{
 361:../../../mod/valve/valve.c **** 		return VALVE_UART_ERROR;
 362:../../../mod/valve/valve.c **** 		}
 363:../../../mod/valve/valve.c **** 	} /* switch ( hal_status ) */
 364:../../../mod/valve/valve.c **** 
 365:../../../mod/valve/valve.c **** } /* valve_transmit */
  63              		.loc 1 365 1 is_stmt 0 view .LVU10
  64 0018 1846     		mov	r0, r3
  65              	.LVL6:
  66              		.loc 1 365 1 view .LVU11
  67 001a 08BD     		pop	{r3, pc}
  68              	.LVL7:
  69              	.L3:
 361:../../../mod/valve/valve.c **** 		}
  70              		.loc 1 361 10 view .LVU12
  71 001c 0323     		movs	r3, #3
  72 001e FBE7     		b	.L2
  73              	.L6:
  74              		.align	2
  75              	.L5:
  76 0020 00000000 		.word	huart2
  77              		.cfi_endproc
  78              	.LFE333:
  80              		.section	.text.valve_receive,"ax",%progbits
  81              		.align	1
  82              		.global	valve_receive
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  87              	valve_receive:
  88              	.LVL8:
  89              	.LFB334:
 366:../../../mod/valve/valve.c **** 
 367:../../../mod/valve/valve.c **** 
 368:../../../mod/valve/valve.c **** /*******************************************************************************
 369:../../../mod/valve/valve.c **** *                                                                              *
ARM GAS  /tmp/cciGH9cE.s 			page 9


 370:../../../mod/valve/valve.c **** * PROCEDURE:                                                                   *
 371:../../../mod/valve/valve.c **** * 		valve_receive                                                          *
 372:../../../mod/valve/valve.c **** *                                                                              *
 373:../../../mod/valve/valve.c **** * DESCRIPTION:                                                                 *
 374:../../../mod/valve/valve.c **** *       Receive bytes from the valve control serial port                       *
 375:../../../mod/valve/valve.c **** *                                                                              *
 376:../../../mod/valve/valve.c **** *******************************************************************************/
 377:../../../mod/valve/valve.c **** VALVE_STATUS valve_receive
 378:../../../mod/valve/valve.c **** 	(
 379:../../../mod/valve/valve.c **** 	void*    rx_data_ptr , /* Buffer to export data to        */
 380:../../../mod/valve/valve.c **** 	size_t   rx_data_size, /* Size of the data to be received */
 381:../../../mod/valve/valve.c **** 	uint32_t timeout       /* UART timeout                    */
 382:../../../mod/valve/valve.c **** 	)
 383:../../../mod/valve/valve.c **** {
  90              		.loc 1 383 1 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		.loc 1 383 1 is_stmt 0 view .LVU14
  95 0000 08B5     		push	{r3, lr}
  96              	.LCFI1:
  97              		.cfi_def_cfa_offset 8
  98              		.cfi_offset 3, -8
  99              		.cfi_offset 14, -4
 100 0002 1346     		mov	r3, r2
 384:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 385:../../../mod/valve/valve.c ****  Local Variables
 386:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 387:../../../mod/valve/valve.c **** HAL_StatusTypeDef hal_status; /* Return code from HAL CMSIS API */
 101              		.loc 1 387 1 is_stmt 1 view .LVU15
 388:../../../mod/valve/valve.c **** 
 389:../../../mod/valve/valve.c **** 
 390:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 391:../../../mod/valve/valve.c ****  Initializations 
 392:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 393:../../../mod/valve/valve.c **** hal_status = HAL_OK;
 102              		.loc 1 393 1 view .LVU16
 103              	.LVL9:
 394:../../../mod/valve/valve.c **** 
 395:../../../mod/valve/valve.c **** 
 396:../../../mod/valve/valve.c **** /*------------------------------------------------------------------------------
 397:../../../mod/valve/valve.c ****  Implementation 
 398:../../../mod/valve/valve.c **** ------------------------------------------------------------------------------*/
 399:../../../mod/valve/valve.c **** 
 400:../../../mod/valve/valve.c **** /* Transmit buffer */
 401:../../../mod/valve/valve.c **** hal_status = HAL_UART_Receive( &( VALVE_HUART ), 
 104              		.loc 1 401 1 view .LVU17
 105              		.loc 1 401 14 is_stmt 0 view .LVU18
 106 0004 8AB2     		uxth	r2, r1
 107              	.LVL10:
 108              		.loc 1 401 14 view .LVU19
 109 0006 0146     		mov	r1, r0
 110              	.LVL11:
 111              		.loc 1 401 14 view .LVU20
 112 0008 0548     		ldr	r0, .L11
 113              	.LVL12:
 114              		.loc 1 401 14 view .LVU21
ARM GAS  /tmp/cciGH9cE.s 			page 10


 115 000a FFF7FEFF 		bl	HAL_UART_Receive
 116              	.LVL13:
 402:../../../mod/valve/valve.c ****                                rx_data_ptr     , 
 403:../../../mod/valve/valve.c **** 							   rx_data_size    , 
 404:../../../mod/valve/valve.c **** 							   timeout );
 405:../../../mod/valve/valve.c **** 
 406:../../../mod/valve/valve.c **** /* Return status */
 407:../../../mod/valve/valve.c **** switch ( hal_status )
 117              		.loc 1 407 1 is_stmt 1 view .LVU22
 118 000e 0346     		mov	r3, r0
 119 0010 10B1     		cbz	r0, .L8
 120 0012 0328     		cmp	r0, #3
 121 0014 02D1     		bne	.L9
 122 0016 0423     		movs	r3, #4
 123              	.L8:
 408:../../../mod/valve/valve.c **** 	{
 409:../../../mod/valve/valve.c **** 	case HAL_TIMEOUT:
 410:../../../mod/valve/valve.c **** 		{
 411:../../../mod/valve/valve.c **** 		return VALVE_UART_TIMEOUT;
 412:../../../mod/valve/valve.c **** 		}
 413:../../../mod/valve/valve.c **** 	case HAL_OK:
 414:../../../mod/valve/valve.c **** 		{
 415:../../../mod/valve/valve.c **** 		return VALVE_OK;
 416:../../../mod/valve/valve.c **** 		}
 417:../../../mod/valve/valve.c **** 	default:
 418:../../../mod/valve/valve.c **** 		{
 419:../../../mod/valve/valve.c **** 		return VALVE_UART_ERROR;
 420:../../../mod/valve/valve.c **** 		}
 421:../../../mod/valve/valve.c **** 	} /* switch ( hal_status ) */
 422:../../../mod/valve/valve.c **** 
 423:../../../mod/valve/valve.c **** } /* valve_receive */
 124              		.loc 1 423 1 is_stmt 0 view .LVU23
 125 0018 1846     		mov	r0, r3
 126              	.LVL14:
 127              		.loc 1 423 1 view .LVU24
 128 001a 08BD     		pop	{r3, pc}
 129              	.LVL15:
 130              	.L9:
 419:../../../mod/valve/valve.c **** 		}
 131              		.loc 1 419 10 view .LVU25
 132 001c 0323     		movs	r3, #3
 133 001e FBE7     		b	.L8
 134              	.L12:
 135              		.align	2
 136              	.L11:
 137 0020 00000000 		.word	huart2
 138              		.cfi_endproc
 139              	.LFE334:
 141              		.text
 142              	.Letext0:
 143              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 144              		.file 3 "../../../lib/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
 145              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 146              		.file 5 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 147              		.file 6 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 148              		.file 7 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 149              		.file 8 "../../../mod/valve/valve.h"
ARM GAS  /tmp/cciGH9cE.s 			page 11


 150              		.file 9 "../../../lib/sdr_pin_defines_L0002.h"
ARM GAS  /tmp/cciGH9cE.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 valve.c
     /tmp/cciGH9cE.s:20     .text.valve_transmit:0000000000000000 $t
     /tmp/cciGH9cE.s:26     .text.valve_transmit:0000000000000000 valve_transmit
     /tmp/cciGH9cE.s:76     .text.valve_transmit:0000000000000020 $d
     /tmp/cciGH9cE.s:81     .text.valve_receive:0000000000000000 $t
     /tmp/cciGH9cE.s:87     .text.valve_receive:0000000000000000 valve_receive
     /tmp/cciGH9cE.s:137    .text.valve_receive:0000000000000020 $d

UNDEFINED SYMBOLS
HAL_UART_Transmit
huart2
HAL_UART_Receive
