ARM GAS  /tmp/ccNjvSz9.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"disarm.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "disarm.c"
  19              		.section	.text.run_disarm_state,"ax",%progbits
  20              		.align	1
  21              		.global	run_disarm_state
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	run_disarm_state:
  27              	.LFB333:
   1:disarm.c      **** /*******************************************************************************
   2:disarm.c      **** *
   3:disarm.c      **** * FILE: 
   4:disarm.c      **** * 		disarm.c
   5:disarm.c      **** *
   6:disarm.c      **** * DESCRIPTION: 
   7:disarm.c      **** * 	    Transitions the engine to a safe state 
   8:disarm.c      **** *
   9:disarm.c      **** *******************************************************************************/
  10:disarm.c      **** 
  11:disarm.c      **** 
  12:disarm.c      **** /*------------------------------------------------------------------------------
  13:disarm.c      ****  Standard Includes                                                              
  14:disarm.c      **** ------------------------------------------------------------------------------*/
  15:disarm.c      **** #include <string.h>
  16:disarm.c      **** #include <stdbool.h>
  17:disarm.c      **** 
  18:disarm.c      **** 
  19:disarm.c      **** /*------------------------------------------------------------------------------
  20:disarm.c      ****  Project Includes                                                              
  21:disarm.c      **** ------------------------------------------------------------------------------*/
  22:disarm.c      **** #include "main.h"
  23:disarm.c      **** #include "valve_control.h"
  24:disarm.c      **** #include "pressure.h"
  25:disarm.c      **** #include "sensor.h"
  26:disarm.c      **** #include "sdr_error.h"
  27:disarm.c      **** 
  28:disarm.c      **** 
  29:disarm.c      **** /*------------------------------------------------------------------------------
  30:disarm.c      ****  Global Variables 
  31:disarm.c      **** ------------------------------------------------------------------------------*/
ARM GAS  /tmp/ccNjvSz9.s 			page 2


  32:disarm.c      **** extern volatile bool lox_purge_flag;      /* Initiate LOX purge */
  33:disarm.c      **** extern volatile bool kbottle_closed_flag; /* KBottle is closed  */
  34:disarm.c      **** extern volatile bool tanks_safe_flag;     /* Engine is safe to approach */
  35:disarm.c      **** extern volatile bool stop_purge_flag;     /* Start disarming the engine */
  36:disarm.c      **** 
  37:disarm.c      **** 
  38:disarm.c      **** /*------------------------------------------------------------------------------
  39:disarm.c      ****  Public Functions 
  40:disarm.c      **** ------------------------------------------------------------------------------*/
  41:disarm.c      **** 
  42:disarm.c      **** 
  43:disarm.c      **** /*******************************************************************************
  44:disarm.c      **** *                                                                              *
  45:disarm.c      **** * PROCEDURE:                                                                   *
  46:disarm.c      **** * 		run_disarm_state                                                       *
  47:disarm.c      **** *                                                                              *
  48:disarm.c      **** * DESCRIPTION:                                                                 *
  49:disarm.c      **** *       Transitions the engine to a safe state                                 *
  50:disarm.c      **** *                                                                              *
  51:disarm.c      **** *******************************************************************************/
  52:disarm.c      **** FSM_STATE run_disarm_state 
  53:disarm.c      ****     (
  54:disarm.c      ****     void
  55:disarm.c      ****     )
  56:disarm.c      **** {
  28              		.loc 1 56 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 28
  35              		.cfi_offset 4, -28
  36              		.cfi_offset 5, -24
  37              		.cfi_offset 6, -20
  38              		.cfi_offset 7, -16
  39              		.cfi_offset 8, -12
  40              		.cfi_offset 9, -8
  41              		.cfi_offset 14, -4
  42 0004 2DED028B 		vpush.64	{d8}
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 36
  45              		.cfi_offset 80, -36
  46              		.cfi_offset 81, -32
  47 0008 8BB0     		sub	sp, sp, #44
  48              	.LCFI2:
  49              		.cfi_def_cfa_offset 80
  57:disarm.c      **** /*------------------------------------------------------------------------------
  58:disarm.c      ****  Local Variables 
  59:disarm.c      **** ------------------------------------------------------------------------------*/
  60:disarm.c      **** uint32_t    vent_start_time; /* Time at which vent starts                     */
  50              		.loc 1 60 1 view .LVU1
  61:disarm.c      **** uint32_t    vent_time;       /* Time engine has been venting                  */
  51              		.loc 1 61 1 view .LVU2
  62:disarm.c      **** uint32_t    safe_start_time; /* Time engine safing begins                     */
  52              		.loc 1 62 1 view .LVU3
  63:disarm.c      **** uint32_t    safe_time;       /* Time since safing begins                      */
ARM GAS  /tmp/ccNjvSz9.s 			page 3


  53              		.loc 1 63 1 view .LVU4
  64:disarm.c      **** float       lox_tank_press;  /* LOX tank pressure                             */
  54              		.loc 1 64 1 view .LVU5
  65:disarm.c      **** float       fuel_tank_press; /* Fuel tank pressure                            */
  55              		.loc 1 65 1 view .LVU6
  66:disarm.c      **** SENSOR_DATA sensor_data;     /* Data from engine sensors                      */
  56              		.loc 1 66 1 view .LVU7
  67:disarm.c      **** bool        is_press_atm;    /* True when tank pressures are sufficiently low */
  57              		.loc 1 67 1 view .LVU8
  68:disarm.c      **** float       pt_pressure;     /* PT pressure converted from adc readout        */
  58              		.loc 1 68 1 view .LVU9
  69:disarm.c      **** 
  70:disarm.c      **** 
  71:disarm.c      **** /*------------------------------------------------------------------------------
  72:disarm.c      ****  Initializations 
  73:disarm.c      **** ------------------------------------------------------------------------------*/
  74:disarm.c      **** vent_start_time = 0;
  59              		.loc 1 74 1 view .LVU10
  60              	.LVL0:
  75:disarm.c      **** vent_time       = 0;
  61              		.loc 1 75 1 view .LVU11
  76:disarm.c      **** safe_start_time = 0;
  62              		.loc 1 76 1 view .LVU12
  77:disarm.c      **** safe_time       = 0;
  63              		.loc 1 77 1 view .LVU13
  78:disarm.c      **** lox_tank_press  = 0;
  64              		.loc 1 78 1 view .LVU14
  79:disarm.c      **** fuel_tank_press = 0;
  65              		.loc 1 79 1 view .LVU15
  80:disarm.c      **** is_press_atm    = false;
  66              		.loc 1 80 1 view .LVU16
  81:disarm.c      **** memset( &sensor_data, 0, sizeof( SENSOR_DATA ) );
  67              		.loc 1 81 1 view .LVU17
  68 000a 2822     		movs	r2, #40
  69 000c 0021     		movs	r1, #0
  70 000e 6846     		mov	r0, sp
  71 0010 FFF7FEFF 		bl	memset
  72              	.LVL1:
  82:disarm.c      **** 
  83:disarm.c      **** 
  84:disarm.c      **** /*------------------------------------------------------------------------------
  85:disarm.c      ****  DISARM Sequence 
  86:disarm.c      **** ------------------------------------------------------------------------------*/
  87:disarm.c      **** 
  88:disarm.c      **** /* Open Vent solenoids           */
  89:disarm.c      **** vc_open_solenoids( SOLENOID_LOX_VENT | SOLENOID_FUEL_VENT );
  73              		.loc 1 89 1 view .LVU18
  74 0014 0C20     		movs	r0, #12
  75 0016 FFF7FEFF 		bl	vc_open_solenoids
  76              	.LVL2:
  90:disarm.c      **** 
  91:disarm.c      **** /* Close purge solenoids         */
  92:disarm.c      **** vc_close_solenoids( SOLENOID_LOX_PURGE | SOLENOID_FUEL_PURGE );
  77              		.loc 1 92 1 view .LVU19
  78 001a 3020     		movs	r0, #48
  79 001c FFF7FEFF 		bl	vc_close_solenoids
  80              	.LVL3:
ARM GAS  /tmp/ccNjvSz9.s 			page 4


  93:disarm.c      **** 
  94:disarm.c      **** 
  95:disarm.c      **** /* Wait for disarm command */
  96:disarm.c      **** while ( !stop_purge_flag ){}
  81              		.loc 1 96 1 view .LVU20
  82              	.L2:
  83              		.loc 1 96 28 discriminator 1 view .LVU21
  84              		.loc 1 96 9 discriminator 1 view .LVU22
  85 0020 5E4B     		ldr	r3, .L30
  86 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  87 0024 002B     		cmp	r3, #0
  88 0026 FBD0     		beq	.L2
  97:disarm.c      **** 
  98:disarm.c      **** /* Wait for pressure to vent off */
  99:disarm.c      **** tanks_safe_flag = false;
  89              		.loc 1 99 1 view .LVU23
  90              		.loc 1 99 17 is_stmt 0 view .LVU24
  91 0028 0025     		movs	r5, #0
  92 002a 5D4B     		ldr	r3, .L30+4
  93 002c 1D70     		strb	r5, [r3]
 100:disarm.c      **** vent_start_time = HAL_GetTick();
  94              		.loc 1 100 1 is_stmt 1 view .LVU25
  95              		.loc 1 100 19 is_stmt 0 view .LVU26
  96 002e FFF7FEFF 		bl	HAL_GetTick
  97              	.LVL4:
  98 0032 0646     		mov	r6, r0
  99              	.LVL5:
 101:disarm.c      **** vent_time       = HAL_GetTick() - vent_start_time;
 100              		.loc 1 101 1 is_stmt 1 view .LVU27
 101              		.loc 1 101 19 is_stmt 0 view .LVU28
 102 0034 FFF7FEFF 		bl	HAL_GetTick
 103              	.LVL6:
 104              		.loc 1 101 17 view .LVU29
 105 0038 841B     		subs	r4, r0, r6
 106              	.LVL7:
 102:disarm.c      **** sensor_dump( &sensor_data );
 107              		.loc 1 102 1 is_stmt 1 view .LVU30
 108 003a 6846     		mov	r0, sp
 109 003c FFF7FEFF 		bl	sensor_dump
 110              	.LVL8:
 103:disarm.c      **** lox_tank_press  = sensor_conv_pressure( sensor_data.pt_pressures[ PT_LOX_PRESS_INDEX ], 
 111              		.loc 1 103 1 view .LVU31
 112              		.loc 1 103 19 is_stmt 0 view .LVU32
 113 0040 2946     		mov	r1, r5
 114 0042 0098     		ldr	r0, [sp]
 115 0044 FFF7FEFF 		bl	sensor_conv_pressure
 116              	.LVL9:
 117 0048 B0EE408A 		vmov.f32	s16, s0
 118              	.LVL10:
 104:disarm.c      ****                                          PT_LOX_PRESS_INDEX );
 105:disarm.c      **** fuel_tank_press = sensor_conv_pressure( sensor_data.pt_pressures[ PT_FUEL_PRESS_INDEX ], 
 119              		.loc 1 105 1 is_stmt 1 view .LVU33
 120              		.loc 1 105 19 is_stmt 0 view .LVU34
 121 004c 0621     		movs	r1, #6
 122 004e 0698     		ldr	r0, [sp, #24]
 123 0050 FFF7FEFF 		bl	sensor_conv_pressure
 124              	.LVL11:
ARM GAS  /tmp/ccNjvSz9.s 			page 5


 106:disarm.c      ****                                          PT_FUEL_PRESS_INDEX );
 107:disarm.c      **** is_press_atm    = ( lox_tank_press <= 100.0 ) && ( fuel_tank_press <= 100.0 );
 125              		.loc 1 107 1 is_stmt 1 view .LVU35
 126              		.loc 1 107 47 is_stmt 0 view .LVU36
 127 0054 DFED537A 		vldr.32	s15, .L30+8
 128 0058 B4EEE78A 		vcmpe.f32	s16, s15
 129 005c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 130 0060 06D8     		bhi	.L25
 131              		.loc 1 107 47 discriminator 1 view .LVU37
 132 0062 B4EEE70A 		vcmpe.f32	s0, s15
 133 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 134 006a 07D8     		bhi	.L5
 135              		.loc 1 107 47 view .LVU38
 136 006c 0125     		movs	r5, #1
 137              	.LVL12:
 108:disarm.c      **** while ( ( !is_press_atm ) && ( vent_time <= VENT_TIMEOUT ) )
 138              		.loc 1 108 1 is_stmt 1 view .LVU39
 139              		.loc 1 108 7 is_stmt 0 view .LVU40
 140 006e 05E0     		b	.L5
 141              	.LVL13:
 142              	.L25:
 107:disarm.c      **** while ( ( !is_press_atm ) && ( vent_time <= VENT_TIMEOUT ) )
 143              		.loc 1 107 47 view .LVU41
 144 0070 0025     		movs	r5, #0
 145 0072 03E0     		b	.L5
 146              	.LVL14:
 147              	.L26:
 109:disarm.c      ****     {
 110:disarm.c      ****     lox_tank_press  = sensor_conv_pressure( sensor_data.pt_pressures[ PT_LOX_PRESS_INDEX ], 
 111:disarm.c      ****                                             PT_LOX_PRESS_INDEX );
 112:disarm.c      ****     fuel_tank_press = sensor_conv_pressure( sensor_data.pt_pressures[ PT_FUEL_PRESS_INDEX ], 
 113:disarm.c      ****                                             PT_FUEL_PRESS_INDEX );
 114:disarm.c      ****     is_press_atm    = ( lox_tank_press <= 100.0 ) && ( fuel_tank_press <= 100.0 );
 148              		.loc 1 114 51 view .LVU42
 149 0074 0025     		movs	r5, #0
 150              	.L6:
 151              	.LVL15:
 115:disarm.c      ****     vent_time = HAL_GetTick() - vent_start_time; 
 152              		.loc 1 115 5 is_stmt 1 discriminator 6 view .LVU43
 153              		.loc 1 115 17 is_stmt 0 discriminator 6 view .LVU44
 154 0076 FFF7FEFF 		bl	HAL_GetTick
 155              	.LVL16:
 156              		.loc 1 115 15 discriminator 6 view .LVU45
 157 007a 841B     		subs	r4, r0, r6
 158              	.LVL17:
 159              	.L5:
 108:disarm.c      ****     {
 160              		.loc 1 108 27 is_stmt 1 view .LVU46
 108:disarm.c      ****     {
 161              		.loc 1 108 11 is_stmt 0 view .LVU47
 162 007c 85F00105 		eor	r5, r5, #1
 163              	.LVL18:
 108:disarm.c      ****     {
 164              		.loc 1 108 27 view .LVU48
 165 0080 494B     		ldr	r3, .L30+12
 166 0082 9C42     		cmp	r4, r3
 167 0084 8CBF     		ite	hi
ARM GAS  /tmp/ccNjvSz9.s 			page 6


 168 0086 0025     		movhi	r5, #0
 169 0088 05F00105 		andls	r5, r5, #1
 170 008c CDB1     		cbz	r5, .L28
 110:disarm.c      ****                                             PT_LOX_PRESS_INDEX );
 171              		.loc 1 110 5 is_stmt 1 view .LVU49
 110:disarm.c      ****                                             PT_LOX_PRESS_INDEX );
 172              		.loc 1 110 23 is_stmt 0 view .LVU50
 173 008e 0021     		movs	r1, #0
 174 0090 0098     		ldr	r0, [sp]
 175 0092 FFF7FEFF 		bl	sensor_conv_pressure
 176              	.LVL19:
 177 0096 B0EE408A 		vmov.f32	s16, s0
 178              	.LVL20:
 112:disarm.c      ****                                             PT_FUEL_PRESS_INDEX );
 179              		.loc 1 112 5 is_stmt 1 view .LVU51
 112:disarm.c      ****                                             PT_FUEL_PRESS_INDEX );
 180              		.loc 1 112 23 is_stmt 0 view .LVU52
 181 009a 0621     		movs	r1, #6
 182 009c 0698     		ldr	r0, [sp, #24]
 183 009e FFF7FEFF 		bl	sensor_conv_pressure
 184              	.LVL21:
 114:disarm.c      ****     vent_time = HAL_GetTick() - vent_start_time; 
 185              		.loc 1 114 5 is_stmt 1 view .LVU53
 114:disarm.c      ****     vent_time = HAL_GetTick() - vent_start_time; 
 186              		.loc 1 114 51 is_stmt 0 view .LVU54
 187 00a2 DFED407A 		vldr.32	s15, .L30+8
 188 00a6 B4EEE78A 		vcmpe.f32	s16, s15
 189 00aa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 190 00ae E1D8     		bhi	.L26
 114:disarm.c      ****     vent_time = HAL_GetTick() - vent_start_time; 
 191              		.loc 1 114 51 discriminator 1 view .LVU55
 192 00b0 B4EEE70A 		vcmpe.f32	s0, s15
 193 00b4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 194 00b8 01D9     		bls	.L20
 114:disarm.c      ****     vent_time = HAL_GetTick() - vent_start_time; 
 195              		.loc 1 114 51 view .LVU56
 196 00ba 0025     		movs	r5, #0
 197 00bc DBE7     		b	.L6
 198              	.L20:
 199 00be 0125     		movs	r5, #1
 200 00c0 D9E7     		b	.L6
 201              	.LVL22:
 202              	.L28:
 116:disarm.c      ****     }
 117:disarm.c      **** tanks_safe_flag = true;
 203              		.loc 1 117 1 is_stmt 1 view .LVU57
 204              		.loc 1 117 17 is_stmt 0 view .LVU58
 205 00c2 374B     		ldr	r3, .L30+4
 206 00c4 0122     		movs	r2, #1
 207 00c6 1A70     		strb	r2, [r3]
 118:disarm.c      **** 
 119:disarm.c      **** /* Go to manual mode if venting timed out */
 120:disarm.c      **** //if ( vent_time >= VENT_TIMEOUT )
 121:disarm.c      ****  //   {
 122:disarm.c      ****     //Error_Handler( ERROR_FSM_INVALID_STATE_ERROR );
 123:disarm.c      ****     //return FSM_MANUAL_STATE;
 124:disarm.c      ****   //  }
ARM GAS  /tmp/ccNjvSz9.s 			page 7


 125:disarm.c      **** 
 126:disarm.c      **** /* LOX tank purge */
 127:disarm.c      **** while ( !lox_purge_flag ){}
 208              		.loc 1 127 1 is_stmt 1 view .LVU59
 209              	.L9:
 210              		.loc 1 127 27 discriminator 1 view .LVU60
 211              		.loc 1 127 9 discriminator 1 view .LVU61
 212 00c8 384B     		ldr	r3, .L30+16
 213 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 214 00cc 002B     		cmp	r3, #0
 215 00ce FBD0     		beq	.L9
 128:disarm.c      **** vc_close_solenoids( SOLENOID_LOX_VENT );
 216              		.loc 1 128 1 view .LVU62
 217 00d0 0420     		movs	r0, #4
 218 00d2 FFF7FEFF 		bl	vc_close_solenoids
 219              	.LVL23:
 129:disarm.c      **** HAL_Delay( VENT_PRESS_DELAY );
 220              		.loc 1 129 1 view .LVU63
 221 00d6 4FF4FA60 		mov	r0, #2000
 222 00da FFF7FEFF 		bl	HAL_Delay
 223              	.LVL24:
 130:disarm.c      **** vc_open_solenoids( SOLENOID_LOX_PRESS );
 224              		.loc 1 130 1 view .LVU64
 225 00de 0120     		movs	r0, #1
 226 00e0 FFF7FEFF 		bl	vc_open_solenoids
 227              	.LVL25:
 131:disarm.c      **** vc_crack_main_valves( MAIN_VALVE_LOX_MAIN );
 228              		.loc 1 131 1 view .LVU65
 229 00e4 0020     		movs	r0, #0
 230 00e6 FFF7FEFF 		bl	vc_crack_main_valves
 231              	.LVL26:
 132:disarm.c      **** HAL_Delay( LOX_PURGE_DURATION );
 232              		.loc 1 132 1 view .LVU66
 233 00ea 4FF4FA50 		mov	r0, #8000
 234 00ee FFF7FEFF 		bl	HAL_Delay
 235              	.LVL27:
 133:disarm.c      **** 
 134:disarm.c      **** /* Transition to safe state for manual closing of K-bottle */
 135:disarm.c      **** vc_open_solenoids( SOLENOID_LOX_VENT | SOLENOID_FUEL_VENT );
 236              		.loc 1 135 1 view .LVU67
 237 00f2 0C20     		movs	r0, #12
 238 00f4 FFF7FEFF 		bl	vc_open_solenoids
 239              	.LVL28:
 136:disarm.c      **** vc_close_main_valves( MAIN_VALVE_BOTH_MAINS );
 240              		.loc 1 136 1 view .LVU68
 241 00f8 0220     		movs	r0, #2
 242 00fa FFF7FEFF 		bl	vc_close_main_valves
 243              	.LVL29:
 137:disarm.c      **** HAL_Delay( VENT_PRESS_DELAY );
 244              		.loc 1 137 1 view .LVU69
 245 00fe 4FF4FA60 		mov	r0, #2000
 246 0102 FFF7FEFF 		bl	HAL_Delay
 247              	.LVL30:
 138:disarm.c      **** vc_close_solenoids( SOLENOID_LOX_PRESS | SOLENOID_FUEL_PRESS );
 248              		.loc 1 138 1 view .LVU70
 249 0106 0320     		movs	r0, #3
 250 0108 FFF7FEFF 		bl	vc_close_solenoids
ARM GAS  /tmp/ccNjvSz9.s 			page 8


 251              	.LVL31:
 139:disarm.c      **** HAL_Delay( TANK_PRESS_DELAY );
 252              		.loc 1 139 1 view .LVU71
 253 010c 4FF4FA50 		mov	r0, #8000
 254 0110 FFF7FEFF 		bl	HAL_Delay
 255              	.LVL32:
 140:disarm.c      **** 
 141:disarm.c      **** /* Wait for safe engine pressures */
 142:disarm.c      **** safe_start_time = HAL_GetTick();
 256              		.loc 1 142 1 view .LVU72
 257              		.loc 1 142 19 is_stmt 0 view .LVU73
 258 0114 FFF7FEFF 		bl	HAL_GetTick
 259              	.LVL33:
 260 0118 8146     		mov	r9, r0
 261              	.LVL34:
 143:disarm.c      **** safe_time       = HAL_GetTick() - safe_start_time;
 262              		.loc 1 143 1 is_stmt 1 view .LVU74
 263              		.loc 1 143 19 is_stmt 0 view .LVU75
 264 011a FFF7FEFF 		bl	HAL_GetTick
 265              	.LVL35:
 266              		.loc 1 143 17 view .LVU76
 267 011e A0EB0907 		sub	r7, r0, r9
 268              	.LVL36:
 144:disarm.c      **** is_press_atm    = false;
 269              		.loc 1 144 1 is_stmt 1 view .LVU77
 145:disarm.c      **** while ( ( !is_press_atm ) && ( safe_time <= SAFE_TIMEOUT ) )
 270              		.loc 1 145 1 view .LVU78
 144:disarm.c      **** is_press_atm    = false;
 271              		.loc 1 144 17 is_stmt 0 view .LVU79
 272 0122 A846     		mov	r8, r5
 273              		.loc 1 145 7 view .LVU80
 274 0124 17E0     		b	.L10
 275              	.LVL37:
 276              	.L13:
 277              	.LBB2:
 146:disarm.c      ****     {
 147:disarm.c      ****     safe_time = HAL_GetTick() - safe_start_time;
 148:disarm.c      ****     sensor_dump( &sensor_data );
 149:disarm.c      ****     for ( uint8_t i = 0; i < NUM_PTS; ++i )
 278              		.loc 1 149 39 is_stmt 1 discriminator 2 view .LVU81
 279 0126 0134     		adds	r4, r4, #1
 280              	.LVL38:
 281              		.loc 1 149 39 is_stmt 0 discriminator 2 view .LVU82
 282 0128 E4B2     		uxtb	r4, r4
 283              	.LVL39:
 284              	.L11:
 285              		.loc 1 149 28 is_stmt 1 discriminator 1 view .LVU83
 286 012a 072C     		cmp	r4, #7
 287 012c 13D8     		bhi	.L10
 150:disarm.c      ****         {
 151:disarm.c      ****         pt_pressure = sensor_conv_pressure( sensor_data.pt_pressures[ i ], i );
 288              		.loc 1 151 9 view .LVU84
 289              		.loc 1 151 23 is_stmt 0 view .LVU85
 290 012e 2146     		mov	r1, r4
 291 0130 0AAB     		add	r3, sp, #40
 292 0132 03EB8403 		add	r3, r3, r4, lsl #2
 293 0136 53F8280C 		ldr	r0, [r3, #-40]
ARM GAS  /tmp/ccNjvSz9.s 			page 9


 294 013a FFF7FEFF 		bl	sensor_conv_pressure
 295              	.LVL40:
 152:disarm.c      ****         if ( pt_pressure >= 100.0 )
 296              		.loc 1 152 9 is_stmt 1 view .LVU86
 297              		.loc 1 152 12 is_stmt 0 view .LVU87
 298 013e DFED197A 		vldr.32	s15, .L30+8
 299 0142 B4EEE70A 		vcmpe.f32	s0, s15
 300 0146 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 301 014a 03DA     		bge	.L21
 153:disarm.c      ****             {
 154:disarm.c      ****             is_press_atm = false;
 155:disarm.c      ****             break;
 156:disarm.c      ****             }
 157:disarm.c      ****         else if ( i == ( NUM_PTS - 1) )
 302              		.loc 1 157 14 is_stmt 1 view .LVU88
 303              		.loc 1 157 17 is_stmt 0 view .LVU89
 304 014c 072C     		cmp	r4, #7
 305 014e EAD1     		bne	.L13
 158:disarm.c      ****             {
 159:disarm.c      ****             is_press_atm = true;
 306              		.loc 1 159 26 view .LVU90
 307 0150 B046     		mov	r8, r6
 308              	.LVL41:
 309              		.loc 1 159 26 view .LVU91
 310 0152 E8E7     		b	.L13
 311              	.LVL42:
 312              	.L21:
 154:disarm.c      ****             break;
 313              		.loc 1 154 26 view .LVU92
 314 0154 A846     		mov	r8, r5
 315              	.LVL43:
 316              	.L10:
 154:disarm.c      ****             break;
 317              		.loc 1 154 26 view .LVU93
 318              	.LBE2:
 145:disarm.c      ****     {
 319              		.loc 1 145 27 is_stmt 1 view .LVU94
 145:disarm.c      ****     {
 320              		.loc 1 145 11 is_stmt 0 view .LVU95
 321 0156 88F00106 		eor	r6, r8, #1
 145:disarm.c      ****     {
 322              		.loc 1 145 27 view .LVU96
 323 015a 134B     		ldr	r3, .L30+12
 324 015c 9F42     		cmp	r7, r3
 325 015e 8CBF     		ite	hi
 326 0160 0026     		movhi	r6, #0
 327 0162 06F00106 		andls	r6, r6, #1
 328 0166 46B1     		cbz	r6, .L29
 147:disarm.c      ****     sensor_dump( &sensor_data );
 329              		.loc 1 147 5 is_stmt 1 view .LVU97
 147:disarm.c      ****     sensor_dump( &sensor_data );
 330              		.loc 1 147 17 is_stmt 0 view .LVU98
 331 0168 FFF7FEFF 		bl	HAL_GetTick
 332              	.LVL44:
 147:disarm.c      ****     sensor_dump( &sensor_data );
 333              		.loc 1 147 15 view .LVU99
 334 016c A0EB0907 		sub	r7, r0, r9
ARM GAS  /tmp/ccNjvSz9.s 			page 10


 335              	.LVL45:
 148:disarm.c      ****     for ( uint8_t i = 0; i < NUM_PTS; ++i )
 336              		.loc 1 148 5 is_stmt 1 view .LVU100
 337 0170 6846     		mov	r0, sp
 338 0172 FFF7FEFF 		bl	sensor_dump
 339              	.LVL46:
 149:disarm.c      ****         {
 340              		.loc 1 149 5 view .LVU101
 341              	.LBB3:
 149:disarm.c      ****         {
 342              		.loc 1 149 11 view .LVU102
 149:disarm.c      ****         {
 343              		.loc 1 149 19 is_stmt 0 view .LVU103
 344 0176 0024     		movs	r4, #0
 149:disarm.c      ****         {
 345              		.loc 1 149 5 view .LVU104
 346 0178 D7E7     		b	.L11
 347              	.LVL47:
 348              	.L29:
 149:disarm.c      ****         {
 349              		.loc 1 149 5 view .LVU105
 350              	.LBE3:
 160:disarm.c      ****             }
 161:disarm.c      ****         }
 162:disarm.c      ****     }
 163:disarm.c      **** 
 164:disarm.c      **** /* Check for timeout */
 165:disarm.c      **** if ( safe_time >= SAFE_TIMEOUT )
 351              		.loc 1 165 1 is_stmt 1 view .LVU106
 166:disarm.c      ****     {
 167:disarm.c      **** //    return FSM_MANUAL_STATE;
 168:disarm.c      ****     }
 352              		.loc 1 168 5 view .LVU107
 169:disarm.c      **** 
 170:disarm.c      **** /* Send safe to approach command */
 171:disarm.c      **** tanks_safe_flag = true;
 353              		.loc 1 171 1 view .LVU108
 354              		.loc 1 171 17 is_stmt 0 view .LVU109
 355 017a 094B     		ldr	r3, .L30+4
 356 017c 0122     		movs	r2, #1
 357 017e 1A70     		strb	r2, [r3]
 172:disarm.c      **** 
 173:disarm.c      **** /* Wait for K-bottle is closed command */
 174:disarm.c      **** while ( !kbottle_closed_flag ){}
 358              		.loc 1 174 1 is_stmt 1 view .LVU110
 359              	.L16:
 360              		.loc 1 174 32 discriminator 1 view .LVU111
 361              		.loc 1 174 9 discriminator 1 view .LVU112
 362 0180 0B4B     		ldr	r3, .L30+20
 363 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 364 0184 002B     		cmp	r3, #0
 365 0186 FBD0     		beq	.L16
 175:disarm.c      **** 
 176:disarm.c      **** /* Open all the solenoids */
 177:disarm.c      **** vc_open_solenoids( SOLENOID_LOX_PRESS | SOLENOID_FUEL_PRESS |
 366              		.loc 1 177 1 view .LVU113
 367 0188 3720     		movs	r0, #55
ARM GAS  /tmp/ccNjvSz9.s 			page 11


 368 018a FFF7FEFF 		bl	vc_open_solenoids
 369              	.LVL48:
 178:disarm.c      ****                    SOLENOID_LOX_VENT  | SOLENOID_FUEL_PRESS |
 179:disarm.c      ****                    SOLENOID_LOX_PURGE | SOLENOID_FUEL_PURGE );
 180:disarm.c      **** 
 181:disarm.c      **** /* Transition to post-fire state */
 182:disarm.c      **** return FSM_POST_FIRE_STATE;
 370              		.loc 1 182 1 view .LVU114
 183:disarm.c      **** } /* run_disarm_state */
 371              		.loc 1 183 1 is_stmt 0 view .LVU115
 372 018e 0720     		movs	r0, #7
 373 0190 0BB0     		add	sp, sp, #44
 374              	.LCFI3:
 375              		.cfi_def_cfa_offset 36
 376              		@ sp needed
 377 0192 BDEC028B 		vldm	sp!, {d8}
 378              	.LCFI4:
 379              		.cfi_restore 80
 380              		.cfi_restore 81
 381              		.cfi_def_cfa_offset 28
 382              	.LVL49:
 383              		.loc 1 183 1 view .LVU116
 384 0196 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 385              	.LVL50:
 386              	.L31:
 387              		.loc 1 183 1 view .LVU117
 388 019a 00BF     		.align	2
 389              	.L30:
 390 019c 00000000 		.word	stop_purge_flag
 391 01a0 00000000 		.word	tanks_safe_flag
 392 01a4 0000C842 		.word	1120403456
 393 01a8 905F0100 		.word	90000
 394 01ac 00000000 		.word	lox_purge_flag
 395 01b0 00000000 		.word	kbottle_closed_flag
 396              		.cfi_endproc
 397              	.LFE333:
 399              		.text
 400              	.Letext0:
 401              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 402              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 403              		.file 4 "../../../mod/sensor/sensor.h"
 404              		.file 5 "main.h"
 405              		.file 6 "valve_control.h"
 406              		.file 7 "/usr/include/newlib/string.h"
 407              		.file 8 "../../../lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 408              		.file 9 "<built-in>"
ARM GAS  /tmp/ccNjvSz9.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 disarm.c
     /tmp/ccNjvSz9.s:20     .text.run_disarm_state:0000000000000000 $t
     /tmp/ccNjvSz9.s:26     .text.run_disarm_state:0000000000000000 run_disarm_state
     /tmp/ccNjvSz9.s:390    .text.run_disarm_state:000000000000019c $d

UNDEFINED SYMBOLS
memset
vc_open_solenoids
vc_close_solenoids
HAL_GetTick
sensor_dump
sensor_conv_pressure
HAL_Delay
vc_crack_main_valves
vc_close_main_valves
stop_purge_flag
tanks_safe_flag
lox_purge_flag
kbottle_closed_flag
